%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: christmas_0003_santa_and_deer_isolated_AM.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: Makkuro
%%CreationDate: 10/31/2015
%%BoundingBox: 0 0 760 420
%%HiResBoundingBox: 0 0 760 420
%%CropBox: 0 0 760 420
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151805, 2013/04/09-12:08:21        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator CC 2015 (Windows)"
   xmp:CreateDate="2015-10-31T15:11:41+03:00"
   xmp:ModifyDate="2015-10-31T15:11:41+03:00"
   xmp:MetadataDate="2015-11-02T00:56:22+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:481205df-0fb0-354e-9c2d-3a6ec573d537"
   xmpMM:InstanceID="xmp.iid:ab7afc05-63ee-5849-a930-0ca32fda1507"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 10.01">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Makkuro GL</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Santa on Sleigh and His Reindeers Isolated on White</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Santa on Sleigh and His Reindeers Isolated on White Background</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:subject>
    <rdf:Bag>
     <rdf:li>santa</rdf:li>
     <rdf:li>claus</rdf:li>
     <rdf:li>deer</rdf:li>
     <rdf:li>reindeer</rdf:li>
     <rdf:li>sleigh</rdf:li>
     <rdf:li>xmas</rdf:li>
     <rdf:li>x-mas</rdf:li>
     <rdf:li>christmas</rdf:li>
     <rdf:li>christmastime</rdf:li>
     <rdf:li>new year</rdf:li>
     <rdf:li>winter</rdf:li>
     <rdf:li>merry</rdf:li>
     <rdf:li>wintertime</rdf:li>
     <rdf:li>december</rdf:li>
     <rdf:li>background</rdf:li>
     <rdf:li>celebration</rdf:li>
     <rdf:li>congratulation</rdf:li>
     <rdf:li>tradition</rdf:li>
     <rdf:li>vector</rdf:li>
     <rdf:li>illustration</rdf:li>
     <rdf:li>holiday</rdf:li>
     <rdf:li>invitation</rdf:li>
     <rdf:li>festive</rdf:li>
     <rdf:li>noel</rdf:li>
     <rdf:li>childish</rdf:li>
     <rdf:li>design</rdf:li>
     <rdf:li>decoration</rdf:li>
     <rdf:li>greet</rdf:li>
     <rdf:li>card</rdf:li>
     <rdf:li>event</rdf:li>
     <rdf:li>present</rdf:li>
     <rdf:li>gift</rdf:li>
     <rdf:li>fly</rdf:li>
     <rdf:li>sled</rdf:li>
     <rdf:li>traditional</rdf:li>
     <rdf:li>season</rdf:li>
    </rdf:Bag>
   </dc:subject>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="144"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAkAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FW&#xA;mdUXkxCqO5NBvirHvNXnKz0LTrTUNpra5dSjipR4zQsEcbc/SLSID9oIRt1yEp0LbIYzI0yLJtbs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQ95qNjZCNr&#xA;ydLdJXEaPKQilz0XkdqnsO+AmkgEr7m7tbW2e5upkgtoxykmkYIijxLGgGJNKBbzHWPPWv8AmTSt&#xA;e03ynot1qiXTvaWWpsEhtFheFI5HSSQpydZfUoO2xJ7ZQchkCIi3JjiESDI0pReSfOfmZtL03X7S&#xA;LRPKWkNayRab6y3N3M1nGY1RpIj6ao/L4vop448EpbHYBTkjGyN5F6xmQ4rsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqG1PUrLTLCa/vpfRtLdec0tGbiK06&#xA;KCx+gYJSAFllCBkQBzLAPNf5v+Wo7R7TTBHqck68G9VD9XCtseatx57dV2+eYeTWR5BzMeilzk8h&#xA;0O1g1XzKlrIhkW6ZksNPgVRa+ufskxyh1WLjWvw7daZhwmZGnOnERjb6b0i0ns9Ks7SeRZZ4IUjl&#xA;kRQisyqASqqAFFegpm3iCAAXSzIJJCLyTF2KuxV2KuxV2KuxVp3VFLuQqKCWYmgAHUk4q5HR0V0Y&#xA;MjAMrKagg7ggjFW8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVUru1t7u1mtbmMS&#xA;286NHNG3RkYUYH5jARYpINGw8f8AzC/L3yXoNhNeWizRSemxSD1S6K7fDH9vk+7H+btmt1OGEOTs&#xA;9NnnPmh/yF0ewuNW1PVJoud5YJClo56J6/qiQgeJCAV8MOhiCSe5GvkQAO97bmydY7FXYq7FXYq7&#xA;FXYqoy3dvFcQW8j8ZbksIV/mKLyb8MFppgmofmFaLoWvXWoXqadDFd3dhpF5G4HOS1iaRZEJrz+J&#xA;QhFCC9VpQ5UcmxtuGLcUmv5WLq3+BtOk1SD6rc3BnuEtKEejDNO8kMQB3ASNlCg9Bt2yWK+Hdjmr&#xA;iNMsyxqdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVUrq4W3tpJ23EalqVpUjoK++C&#xA;RoWmIs08W/MlNV1WS1giA9OSQyXE8jLHF6hokac3IFaE0UVPgM0uoyWd3eaXEeQDIvySgtbWz1O1&#xA;jkE83KCeSdQVQrIHVAoajbem25UdfbMns6YkJe9o7V08sfCT1v7K/W9MzZOpdiqlBdW1x6noSrJ6&#xA;LmKXia8XWlVNO4rgBBSQQq4UOxVbKrPG6o5jdlIWQAEqSNiAQRt74q8x1384rjy/e/o+a1tddnLc&#xA;I59NmdByOwWWNklEZ+UjD5Ziy1Qia2LmQ0hkL3DtI0K/893smo+ZdRkhSwLQRaNp3rWyRiZVJE0r&#xA;hJHLqFJApTsaGmGH7zclZnwtgOfUsj0v8p/y80u4jubTRYfWhIaJ5mluOLA1BUTPIAQenhloxRHR&#xA;olnmeZZbljU7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxn8wvNGoeWfL/wCk7K1S&#xA;6cTJFIJOXFEcN8Z40P2gF698o1GUwjYb9PiE5UXleofnfrV/YmzlsorczmNxJHyVjGrhmAEocEOq&#xA;lajp1zX5tTKcTHlbs9NpscJiR9XP7v0c2MJrlvM0Ut9JPc3JpG7uxARVmMqM0gZp3Kkj+7aLoBvm&#xA;uljIFjcu7nrwNsceEfso7cvnxMi8seZ/MmgQXc9sLcrPJGtvBGsUVvKDFOycORVn/eceVG5mu++T&#xA;waow+n424400dTKst0Ou/eL7+nfsEz13869dWW4tbFLeL03ZFuUQsx4tTkPUZl3p/Kczvz0zHoHV&#xA;DQQB3tiqfmb51S6+sfpOVt/iiYkxkHqOO1P9jT2ysaid8206bHVU9q/K6e1ufJ1tdQkma5klkvC1&#xA;K+uXIfpsBQDiP5aZs9LXAKdXqr4yCyzMhxnYq8e88Q/m+Li8t0MlzozSuYJrb0QTC5+FXCcH+EGh&#xA;5D6T1zXaiOXf+a7PBPDttUvi8yTT9cvdZg0q3jJ1VpPQiSoBV6liSw/l3Na7D2GYYiZSrq5hlGMb&#xA;6Pp/QtIh0nS7exjozRovrz0o00tAHlfxZzuSc3UICIp0c5mRtH5Ng7FXYq7FXYq7FXYqoy3lrFcR&#xA;W7yATznjFH1JIVn7eyHfBaaSLS/NqXnnDUfLxTi9pCJlqOLrxYK6uKsCGV45I2HUNQgFciJ70zMK&#xA;iCyPJtbsVdirsVdirsVdirsVdirsVdiqF1XTLTVNNuNOvE5210hjkXvQ9x7g7j3yMoiQosoSMTYe&#xA;VeUI9Es1uvy+85WyytBdO2kyzofSeOYinpSAVjLPUg8hXlTrtmDiMR+7n37OdlEj+8h3bobzZ+S8&#xA;1vLJPoStNaGrLAGLSRj+Wjmrjwoa+3fIZdGRvHkzw6wHaXNjVtbtpElnp85ZbuBpL65gLIjBU/fK&#xA;kkLqZKf6ANxShceOazJE8VdzvtKawyn0Pv8Adsf87z5JPPaaha2C3Nxp8V3bRKBPOkcilOih2aMo&#xA;Ou1T3w/liBYMh9v3uD44J3QS3ekSCv1NwD/vuen/ABJHyPBkH8X2ftDK49z1j8r/ADroNro8Wjrd&#xA;xafOJHYJehmDF2rtMpjTw2IX6euZ+my5AOHih8j/AMU6/VYQZcVSPuI/U9O46v1Eluf9g4/Hmczq&#xA;z98Pkf1uDeLul8x+po3GqRby2qzIOrQP8X/AOF/4lkTlzR5wEh/RO/yNfengxnlKveP0j9SQ+bPN&#xA;dta6RcNESDFGXuFYMjrTpHQ0oXO3y+eQlrITiRHn1HIj4NuLSyErPweQ/lT9YvPzIsbpzycG5nmY&#xA;/wCXBIpP/BPmNpN8gczV7Yy+ic3DpnYq7FXYq7FXYqgl1rSm1BtON0iX43FpIfTlZf5kR+Jdf8pa&#xA;jBxDky4TVpF56876foenXFpbzev5iuImj0zTYAZJ2ndT6ZMaBmCj7VSOg2qchkyAe9nixGRvoxbU&#xA;1/NHWvMVprEHl2GxisLa4h01Lu7j5LNdgI08vp8yQqLtHQU33ys8ZN02jwwKtkfkbyTf6Rfalr+u&#xA;3Ud95l1gRLeTQKVgjigQIkUXL4yKKOTNudvmbIQrc8y15MgIAHIMwyxpdirsVdirsVdirsVdirsV&#xA;dirsVdiqXaroOnapLaS3SEyWcqTROtAaowfi1QaqWUEj2yrJhjMgnobbceaUAQP4hSY5a1LHghkd&#xA;HeNXeM1jZgCVJ7gnpgISJEcl0kaSI0cih0cFXRhUEHYgg4UMI1X8mfIGoStMti1jK5LM1pI0Smpr&#xA;sh5RqP8AVUZjy0sD0cmOrmOrGPOP5J6PY+XLq90F7ltRs0MwjlkEiyom7rTiPi414077ZRl0kRG4&#xA;82/FrJGVS5M+8g6zHqnkzS73mCRbrHMxPR4RwYt4V41zJwT4oAuLnhwzIRsXmryxLJ6cWr2UknTg&#xA;tzEW8OgbJjLHvDE4p9xeUeY/Nek6zcSWkdrNd/W5Eb09+ZhkkajqkfOVxEU+JOK9t853UZRklYFS&#xA;v8B6rTdmShD1EAb+6wO/kLvY2gvJOs2WneaNOW7mhsEi5PLY2gM7BhbzRsJTDzqhMiMvqO8gI6AV&#xA;OT0uQRyCUuW/4/FsddDGccseP1E/rj38jse4HzeyN5o8uLGZJNSt4gNyskixtt/kMQ3bwzejPA/x&#xA;B5qWmyRNGJY5f/nF5LtJvSEs9wO8kMfw/wDJQxt+GUnWQHm2R0WQ+SP8vecB5h1thpg56LDalppi&#xA;tG+sO6+mhPYhA9V+WTx5uOW30sMuHgjv9VsozIcd2KpB5k88eXvLk0cOpzPHNLGZYkWNm5KG40DU&#xA;419q/wAMqy54w5t+LTyyCw8g/ML8yY/M1s9lbwxR2UbgxCeBJZmJqOau4YRED+UA79c1+bVGQ2dh&#xA;h0vAd00/I3RfUcX9nyiSyeSPUblwpe4dwWSJWC14pzDNU9aUG+W6QGRvo1ayQArq9qzYOtdirsVd&#xA;irsVdirsVdirsVY35g/MbyZoE5ttS1ONLpftW8YaaRfZljDcf9lTKMmphDYl2ek7H1WoHFjgeHvO&#xA;w+3n8F/l78wfJ/mGb0NK1KOa5pX6u4aKQ0FTxWQKWp/k1w49RCfIsdZ2TqdOLyQIj38x9jIcudc7&#xA;FXYq7FXYq7FXYq7FXYqwiH8torDzBLc6VdPbaLqIk/SmmByEq8UiH0loVozSBqH7NPh60GJ+WInY&#xA;Pp3sOZ+ZBhUh6hVF5Rp35bXF15r1TyxPe/U9StozPYSOgaGZFI2PRhyV1YEE032zDjp7kYnm5ktT&#xA;URIcigNd8nebvLrvaX0TLDOCPUgk5QzKp7fZJ8eLLUeGVZcEondux6kTGxa8vs13JLFPEzzW1tIk&#xA;MqKWlHrAWyKUXd+LTLQde1cwp4+GyOR5j9Tm6eVzF9N/lv8Acs1QJIbeGG7hh4QqxiPOKv1pmulp&#xA;y5UHC4VQC9dsEZ8PQ/Bs1ZuZ35bfL0+7ol/6H1A7oqS+8csclf8AgWOT/MQ67e8EONwF6P8Akm11&#xA;puq6it8TaWc0Cmsx4I0ivRaFqAkKzZmaLWYok3OI+IcHW4JSAoE/B6/+mNJ/5bbf/kan9c2P57B/&#xA;Ph/pg678tl/my+RVorq1mNIpkkPgjBv1HLoZoS+mQPuLXLHKPMEJf5g8r+XtegSPWbNLlIKtG7Fk&#xA;ZK05cZEKsAab74Z44y5hOPJKP0l4B+YeneX9N1VLPR4PRRebuecjkq7fuwfULHZVr9OafMIg7O5w&#xA;GRjcnunkDSrLTPJ2k29rCsQe1hmnK/tzSxq0jsTuSzH+HTNthiBAU6fPImZtkGWtTsVdirsVdirs&#xA;VdirsVS7XZpksWjtpPTupCPS+EvWjAkEAjYjY5XkyiPvLZDGZe5gvmPyto3mNHsNYtFs9X4E297G&#xA;AWNNgyPtzUHqjf25DNp45BuN3O7P7VzaWVwPp/m9D+O94Emh+cLPzdJo2l2s91q9jIHje0BJCqQV&#xA;mDL9lfiHxE7d80508oyocw+hDtjDkwccq8OQ3v7Q+mfJnnDVr7T/AEPMWlXOmazaIv1wSRgRSKQf&#xA;30bA0INPiC9Dtm5wzkR6hRfPO0dPixzvFIShLl3jyP6O9l+XOudirsVdirsVdirsVdirsVYh548l&#xA;TatPba3pNzJY6/pwpBPEQDJHUlozXatCeNdjWjbHbGz4ifVH6g5OnzAemX0lONOtZtT8u20Wv26S&#xA;3EsY+sxulPi7Nx24vTc0pQ9MsgDKA4xvW7XkIjM8B2vZjGu/lLY3dvNFpN0LEXAImSeJrlCtDxVK&#xA;SQuvFyHqWb4gPDfFzaCM+Rp2Gi7TOI3IcXuNfoPuUD+TOmTvK15eFlm+1HHGq8VoFVA5J+woCg0x&#xA;hoQBuWrJrzI3TAvMP5K+cNOuX/RCpq9hUmI80inVetHVyqsf9UmvgOmU5NHIHbcN2PWxI32KA0jy&#xA;9+amgXDX+naXeWsirWQx8HDKN6NHUh/lTIQxZYbgM55cUxRIexflj5zn81+X3urtYxeW8phmEYID&#xA;DiGV+JrStSPmM2Gny8cd+brtThGOW3JlE2n2MwpLbxv4EqCR8jhnpsc/qiD8GuOaceRLH/MJlsVS&#xA;2tZ3MUwrJbuxbaooEZqsK77VzA1EJ4R+7Nj+aT9xO4+5zdORk+ob94/SHh2r6VNd6xfXmo3UcAM5&#xA;UorLJIta+mrHkkURKpsJZEJptmAcwO7ucWkmQNtvxy6nn0BfRWgTwz6Fp08Efowy2sLxQ1B4K0al&#xA;VqAOg26Z0WM3EHyeazw4Mko9xIR2TalG8vbWzga4upBFCpALt4k0A2wGQHNMYk7BWwodiqlPeWtu&#xA;KzzJFXpzYCvyrlWTPCH1ED3s4Y5S5AlQGq2zf3aTS+6QyU/4IqF/HKfzkDyEj7oy++qbPy8hzIHx&#xA;DGfNP5qaB5cvrfT7q2u5r66TnFDHGq0BbgnIytHszAiq16YDroA1Ur91fe7LR9h5tRjlkiYiEet/&#xA;E8r+2mvN35p6F5WuIrfUIZ5JpkLILcI9ONNm5tHT7W2WZ9THHV9WHZvY+XWcRxmI4a531vuB7nnO&#xA;q/n/ACy3R+pWD/Vv2WkkVH96qFkH45iHtIXtF3+P2NmY+rIAfKN/bY+5EXn5m6Jrk+kWIuWivLq6&#xA;hgik9MgxGdgjM/LilF5fFRj/ABzIjrcZquZdPl9ndVjEjMARiCbu7ruHPfzp6vouiaN5fhYK8f1u&#xA;ehuryUqsspWtOR68VqeK9B9+XTyQgfUQHTjjkABZARF7FoN3MjXMkTSoOK/veJIJrQhWHIexyP5n&#xA;FdcUfmEeDPuPyTJWVgCpBB6EbjLgQeTWRTsKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5g8V3+X&#xA;vm6+vobGS68sa6wlkNuBytrgcmK0NFCks3HoN6V+HfBnLwJGVegufCPjxEb9YQfnb80vN2k+Zhpu&#xA;mWUT286QyWKvDI8soljDfZDKa8uS0A7YM2onGdAJw6aEoWSwTXPzE1fXL9Z7sLAVMKzwxeqY6Qsx&#xA;ZWgkk4Nz5AMr1G3aprrtQTklZ2dzoskMMeHhvnvte423q9u8Vz9yDh1BZUWDTFFrdQqkdrNclZ52&#xA;RCSESRwsUTAt8PGMH/KzFmOE2fp+0fjyb8mrnkuzVm6HLz+fnbN7X8yfMejWjRPPFcRWEEEYik4u&#xA;yytHCoikVBG4IpMalzWg965mLW5ImunucbUdnYzjEyCJH395s93cx7WPzT846pLSK7ktlJJSK1rF&#xA;SvYcDzP+yY5ZPVTPM04kNLjj0v3q/l7XvMtzqlhb+YZ7q50h7mJ5kuJOLHi1V4mU1I50JVdz0GUw&#xA;1sTIAky36bsp6eokxABr3PePrOpS/wBzaiFf57hgD/wCcvxIza+Lml9MeHzkf0C/vDqeDHHnK/d+&#xA;su+oTy/71XcjjvHF+5T/AIX4/wDh8fy0pfXMnyHpH2er/ZL40R9MR8d/2fYrW9jZ25LQwojHq4Hx&#xA;H5t1OW49PjhvGIB+35tc805cyhtQ1/StPkEV1OI3YhQDtu3QVNBX2ynPr8WKXDI7tuHSZMguI2YF&#xA;+YHkHy9r2sWvmL67cW93HCzMI2QRMLQF15LIhYOXdVO/TtXMXVThKskT0J/0v6bp3HZ/aWbBjlho&#xA;cJ/336Keb/nba2y64kkeptd6hEkcN7GVQLCzLzVXAIIZkNem/wBGOvokc+Kna+yuolESxgxEbvc7&#xA;92w+DzlUYfabkfuGa17oDvZToeh6XZ6YnmbX0aW3WQppGmoxja6nShLMw3WGM/aI6nbACfx+Px07&#xA;xptfnlkn4GL6v4j/ADR+srtX/MHzfqkrvLqMttG5qILRjAg+ZQh2+bMThLLT9jafGPp4j5pZ/inz&#xA;Jb/HFqt76nRR9YlNST4FjXGMB3NubRYBHeEfk+q/KOl3umeXbK1v5Wn1H0le+lcgkzsAXFV2op+E&#xA;U7DOg02AYoUPj73yzXZxkyylHaPT3JxmQ4jsVdirsVdirsVdirsVdirsVdirsVdirsVU7i3t7iFo&#xA;biJJoX+3HIoZTQ13BqMBiCKKYyINhhX5reUrzV9Kg1TSVP6c0hxPaGPZ2VSGKr/lKyhl+mnXMfU4&#xA;jIWPqDk6XKImj9JQ9vB5J/MnTpZpLL6rrEaL6sjxhLmMkUU8h/ex1UqKn7jkB4eYHvZHxMBHcwXV&#xA;vyj1XT7tXkFdNDr611EeaLHX4mYEh04ruSRT3zDzaaUAT0c3DqhMgdUqZr7V4Wm0/mWuLppSqFrh&#xA;URUMgCAovAGW9kBWn2lO5zAhh4+buNfPw+GPcPd5b/CI+CTaw3mbR5lttSNxaLMOUDsrQLKviNl+&#xA;nJy0kY84/NwIZ+LkULpd7Hb6tZ3twpnignimlQH4nVHDMKnxAyyFRI7kTBIIfSvlnzv5c8xqRplz&#xA;yuFXnJayApKo6VKnY0r1UkZu8eaM+TpMuCUOafZa0u5CtK7jcjvgtaeVf85CaDDceV7fW1iBuNMn&#xA;VJpaD/eef4GB8f3nCn05ha7Hcb6h6b2Y1ZhnMCfTIfaP2Wl/5SecLG/0o6Xq3C5v9P8AjtY5SpeV&#xA;FH7tk5kcmX7B9uJzWaacImpj0/p/H6K+lyvaDs6eOfHj+mX4I/Hn3pX5/wDygvdd1CbU9KuoYI7i&#xA;c3k1pOrWkpmf7RZuJEntypQHrmZMVIzjL6h/FYr3W4Wi1Gl4YjNjkJQIPFCjdfzgwK2/JnzZFqIl&#xA;1S4XTtGib1L2/aSCSOOJT8VCjk8iNlFK1yB1FQrhj77v8e7m5mWGKWQ5cWaZmZWIcMgT5cxt59yn&#xA;5p1yPV9TD2sZg0uzjW10u2P+67ePpX/Kc/E2a/8AH4/HO3ruztIcULlvklvI+aT4uxZJ+WGhjXfz&#xA;C0q0dedtaP8AXbr4eS8YPjUMDtxZ+Kn55l6THxTDoe39X4WnlXOq+J/UN31dm9fL3Yq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FUHZ6Pp9ne3d7bRCOe+4G5I6MULEGnQbyMT7nIRxxiSRzLZPL&#xA;KQAJ2jyRmTa3Yqg9V0fStWtGtNTtIry2bf05lDAGlKivQ+43yMoiQosozMTYYufya/LYkn9D0r4X&#xA;F0B9wlyn8rj7m781k7/uYlfeW7LyD+Y2ianYhoPL2oE20gd3dIZWUoVLvyIUghxybs3YZRLGMWQE&#xA;fSXIjkOXGQfqD1jU7p7TTLu7jXm8EMkqL4lELAfhmVnmYY5SHQEuFijxSAPUpZ5T0+OLT476RjNe&#xA;3SkzTuSSd+n4ZreydMBj8U75J8z+hzNfmJlwDaEeQUvzC0G41/yXq2k2wDXNxDWBTQcpI2EiLU0A&#xA;5MgGbLPDigQjs3UDDnhM8gfv2fIpleB2t7uJo5ojxdHWjKV2owO4IznzG+T6pjzxMd90wtfM2p2y&#xA;cLbU7u3T+SKeZB9ysBkRCujCeDTz+qMT8HXuvX+oAC+1Ce7VTVUnmkkUHxCuSBjws8WDBjNwEQhf&#xA;Xh/nX78aLk+JHvWSXcSqeJ5N2AwiJYTzADZ7X/zjd5bnjg1PzHcxFRdcbWylbbkisWmI8V5hBXxB&#xA;zbaHHVyeD9p9UJGOMHl6j+j9L23Ng8m7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FUBruhaZrumTabqUImtphuOjKw+y6N+yy9jkZwEhRZQmYmwgPJ3lu50HSZNNubtr2MSH0G&#xA;ck8YRGiBaNsKlSxA2qcqwYTCJiTe/wBjdqMwnIECtvtWQ6LremAwaTPFJY/7qt7gsjRjsokCTclH&#xA;QfCDTqTmCNJmxbYpDg7j0+NH8d7cdRjnvMery/AW6lD5vubOS2Agi9UEGW3kLuB/z0WIb5DU4tXO&#xA;BjcRfdz+2mWGeCMuLfbv/BQFtoMUFrFbT+WI7wRqaySx2kjszH4izSTEkt3yOnxZMUBAY7A/q/pm&#xA;2y1NyJGSUb85foCnP5a8pSRlLnyZax1orFbSMt47NBG5+45ccp64vx8AWUdVmBsZpfP9ZSyX8vvy&#xA;vm5PN5ZkQbsxSK/iAA/2MSj9WR8THzMJfKf6g3jtLVjYZR/sP2pdefll+Tkgp9UlsCBuRdsh+Lof&#xA;38r75Wc+n7iPiP0lvh2nrR/EJf5v6glN7+U/5bW8f1vS7qS+uLd0ZrCadJI5V/aT9yFYN3FWp275&#xA;i6rLi4LxS9Y6c78tnJx9r6ompgAHqBuPm9a0nUtIj063igjWyijQItqEMax024gABaeGbXBr8coA&#xA;n0nu7nnc+nyGZJ9Xn3pnDNFNGssTiSNvsupqD2zMhOMxcTYcWUTE0divybF2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVZLBDKAJY1kA6BgGp9+RlAS5&#xA;i0iRHJBv5e0BzV9NtWPSpgjO3/A5SdHhP8EfkG0ajJ/OPzKLt7a3toVgt4khhT7EUahFFTXZRQZd&#xA;CEYioig1ykZGybKpkmLsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVf//Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="uuid:a7e2bf0d-45d9-472c-8405-24a7492f6d4a"
    stRef:documentID="xmp.did:2fcc7b0a-cb0a-ea44-9768-be01b7c6f13c"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:B1F1D641FC1FE411B4CBC5013C73D47C"
      stEvt:when="2014-08-09T23:36:58+04:00"
      stEvt:softwareAgent="Adobe Illustrator CS6 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:481205df-0fb0-354e-9c2d-3a6ec573d537"
      stEvt:when="2015-10-31T15:11:41+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2015 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:c48614b0-3527-074a-867d-fb0c2cc35683"
      stEvt:when="2015-10-31T15:12:28+03:00"
      stEvt:softwareAgent="Adobe Bridge CC (Windows)"
      stEvt:changed="/metadata"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:ab7afc05-63ee-5849-a930-0ca32fda1507"
      stEvt:when="2015-11-02T00:56:22+03:00"
      stEvt:softwareAgent="Adobe Bridge CC (Windows)"
      stEvt:changed="/metadata"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="760.000000"
    stDim:h="420.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    

<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -420 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 420 li
760 420 li
760 0 li
cp
clp
760 420 mo
0 420 li
0 0 li
760 0 li
760 420 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
388.71 338.916 mo
389.282 339.657 390.461 339.378 390.64 338.459 cv
392.093 330.984 li
392.16 330.642 392.06 330.289 391.821 330.034 cv
390.92 329.071 388.655 326.712 387.799 326.412 cv
387.68 326.37 387.557 326.328 387.436 326.286 cv
384.434 334.116 li
388.71 338.916 li
cp
.45098 .25098 .141176 rgb
f
389.128 338.329 mo
390.579 330.868 391.383 330.386 387.323 326.563 cv
384.434 334.116 li
388.71 338.916 li
388.722 338.931 388.737 338.939 388.75 338.954 cv
388.933 338.804 389.076 338.598 389.128 338.329 cv
cp
.827451 .509804 .227451 rgb
f
427.366 219.179 mo
424.164 219.185 420.636 219.968 417.754 221.474 cv
409.023 226.038 403.986 232.498 391.172 231.85 cv
389.88 233.013 391.142 238.222 393.262 239.59 cv
397.504 242.325 402.727 243.005 407.408 243.441 cv
411.076 245.206 409.673 248.108 409.055 250.342 cv
406.245 260.491 395.361 266.945 391.945 279.912 cv
390.431 285.658 391.145 290.704 391.014 293.964 cv
390.936 295.92 390.801 295.479 389.105 295.276 cv
381.037 294.309 365.625 291.451 362.663 296.011 cv
361.682 297.52 362.19 300.805 363.805 304.213 cv
366.576 310.058 368.013 311.733 371.264 317.62 cv
372.592 320.025 373.858 322.545 374.951 324.827 cv
377.453 328.385 382.694 332.165 382.694 332.165 cv
384.434 334.116 li
387.436 326.286 li
384.482 325.267 380.851 324.127 379.975 320.372 cv
379.71 319.237 377.294 310.678 372.844 303.474 cv
389.353 308.919 387.77 310.663 396.454 312.796 cv
410.258 329.867 437.125 331.728 457.284 324.412 cv
463.46 333.064 472.986 337.056 483.374 337.956 cv
492.299 338.729 502.75 336.711 505.408 339.236 cv
508.064 341.759 511.254 350.789 515.454 356.86 cv
517.752 360.182 522.514 363.853 522.514 363.853 cv
524.457 365.932 li
526.588 358.535 li
526.275 358.614 526.019 358.684 524.669 357.636 cv
523.988 357.109 521.028 354.95 520.437 354.091 cv
518.183 350.813 518.007 346.929 516.436 341.91 cv
514.925 337.083 515.193 333.178 513.279 330.982 cv
509.952 327.165 493.816 324.13 495.142 319.243 cv
498.147 308.162 496.321 299.783 491.541 294.586 cv
497.16 292.29 498.34 283.253 496.296 279.506 cv
493.934 282.648 488.489 289.139 486.311 290.687 cv
486.059 290.563 485.805 290.442 485.546 290.328 cv
479.156 287.508 470.716 288.066 461.608 291.699 cv
452.244 295.435 436.487 297.69 430.206 291.506 cv
423.724 285.123 427.21 273.632 428.467 263.35 cv
429.637 253.785 427.874 245.715 431.422 241.959 cv
431.421 241.958 431.42 241.958 431.42 241.957 cv
435.044 239.653 437.491 233.636 437.296 229.619 cv
437.296 229.619 445.848 227.244 445.33 218.692 cv
440.017 217.655 436.26 218.67 433.649 220.608 cv
431.509 219.124 427.366 219.179 427.366 219.179 cv
cp
.607843 .392157 .239216 rgb
f
414.484 223.346 mo
407.711 227.515 402.512 232.193 391.854 231.862 cv
390.856 232.344 li
390.788 232.512 390.733 232.698 390.7 232.91 cv
392.219 232.858 402.441 232.902 410.777 227.935 cv
413.172 226.507 415.528 222.703 414.484 223.346 cv
cp
.827451 .619608 .462745 rgb
f
431.077 221.456 mo
431.492 220.135 434.636 217.895 435.316 217.316 cv
444.409 214.459 448.302 209.822 454.321 207.922 cv
454.323 207.922 454.32 207.922 454.32 207.922 cv
468.907 204.609 473.346 207.995 482.586 200.484 cv
482.695 200.386 482.882 200.214 483.003 200.103 cv
490.019 193.899 492.146 181.415 481.834 174.801 cv
481.718 174.927 li
481.718 174.927 481.907 175.206 482.269 175.705 cv
485.681 180.527 486.947 185.387 484.723 190.889 cv
483.987 186.617 481.902 183.662 478.466 181.2 cv
478.273 181.425 li
479.954 183.153 481.431 185.228 481.973 187.588 cv
482.828 190.329 482.395 194.088 481.225 196.29 cv
479.617 197.951 477.319 199.401 475.765 200.035 cv
476.484 198.111 476.484 196.082 475.532 193.951 cv
475.304 193.466 475.503 193.803 474.803 192.708 cv
474.635 192.791 li
474.964 193.696 475.308 194.426 475.219 196.164 cv
475.221 196.942 474.774 199.396 472.38 201.091 cv
469.647 201.658 466.55 201.759 463.262 202.023 cv
467.099 198.456 469.301 191.848 467.761 184.351 cv
467.563 184.358 li
467.529 185.236 467.571 189.306 465.682 193.4 cv
464.944 190.605 463.896 188.738 462.55 186.894 cv
462.396 186.974 li
463.388 189.879 464.262 191.485 464.143 194.354 cv
464.06 196.233 463.663 196.856 462.974 198.073 cv
461.889 199.987 460.24 201.316 458.411 202.588 cv
456.073 202.926 452.637 203.631 450.343 204.678 cv
451.305 201.091 451.202 198.056 450.287 194.673 cv
449.995 194.72 li
450.257 199.238 449.147 203.273 446.109 207.064 cv
431.86 216.074 429.141 215.394 422.957 213.799 cv
417.689 212.436 411.833 209.979 408.79 208.455 cv
408.643 208.695 li
411.434 210.759 416.864 214.234 421.979 216.554 cv
424.193 217.556 426.445 218.354 427.499 218.629 cv
426.995 221.456 li
428.053 222.234 430.083 222.277 431.077 221.456 cv
cp
.388235 .203922 .113725 rgb
f
530.983 360.952 mo
530.983 360.952 527.865 358.724 527.224 358.545 cv
526.906 358.457 526.741 358.497 526.588 358.535 cv
524.457 365.932 li
527.895 369.708 li
528.533 370.418 529.709 370.048 529.826 369.102 cv
531.425 361.983 li
531.474 361.585 531.305 361.191 530.983 360.952 cv
cp
.45098 .25098 .141176 rgb
f
407.688 315.463 mo
407.688 315.463 396.398 310.987 392.852 309.049 cv
389.827 307.395 386.114 304.514 380.542 302.829 cv
377.769 301.991 371.926 300.562 369.399 300.886 cv
369.399 300.886 377.238 319.091 378.296 323.561 cv
378.854 325.919 386.506 328.712 386.506 328.712 cv
387.436 326.286 li
384.482 325.267 380.851 324.127 379.975 320.372 cv
379.71 319.237 377.294 310.678 372.844 303.474 cv
389.353 308.919 387.77 310.663 396.454 312.796 cv
399.454 313.862 402.735 314.594 407.688 315.463 cv
cp
.521569 .321569 .176471 rgb
f
403.661 297.829 mo
403.661 297.829 403.565 283.827 404.384 278.642 cv
407.163 261.055 418.897 245.73 414.055 242.947 cv
410.467 243.76 407.389 243.437 407.389 243.437 cv
410.304 245.26 409.633 248.253 409.055 250.342 cv
406.245 260.491 395.322 266.174 391.815 279.117 cv
389.871 286.291 390.319 292.197 390.708 295.566 cv
403.661 297.829 li
cp
.909804 .784314 .690196 rgb
f
407.624 315.592 mo
407.624 315.592 401.015 314.426 396.454 312.796 cv
409.481 329.522 440.665 334.532 460.447 327.88 cv
460.524 327.989 456.295 322.941 455.025 321.095 cv
451.722 321.661 422.676 326.699 407.624 315.592 cv
cp
.709804 .545098 .411765 rgb
f
493.727 282.731 mo
491.227 285.759 487.997 289.489 486.311 290.687 cv
488.781 292.377 li
492.04 289.718 493.953 285.829 493.727 282.731 cv
cp
.909804 .784314 .690196 rgb
f
395.977 232.209 mo
396.152 233.259 390.868 234.136 390.694 233.085 cv
390.519 232.035 391.561 230.987 393.02 230.745 cv
394.479 230.503 395.803 231.158 395.977 232.209 cv
cp
.909804 .160784 .141176 rgb
f
437.032 227.842 mo
435.455 227.1 433.794 226.837 433.376 226.133 cv
432.898 225.328 433.835 224.016 434.767 221.961 cv
435.961 220.039 440.273 220.223 442.22 220.938 cv
442.776 223.044 439.607 228.285 437.032 227.842 cv
cp
.909804 .784314 .690196 rgb
f
419.569 213.548 mo
421.368 214.13 427.142 215.746 430.29 215.634 cv
434.326 215.453 447.92 206.777 453.352 204.944 cv
458.361 203.26 470.174 203.447 473.863 201.858 cv
473.896 201.922 li
470.091 203.775 458.473 203.946 453.639 205.75 cv
448.082 207.838 437.893 214.568 432.247 216.074 cv
431.527 216.266 430.021 218.67 429.468 218.671 cv
428.692 218.676 428.851 216.294 428.173 216.184 cv
425.44 215.738 421.926 214.637 419.52 213.686 cv
419.569 213.548 li
cp
.6 .4 .301961 rgb
f
393.043 233.495 mo
392.772 232.916 391.712 232.465 390.698 232.931 cv
390.634 233.362 390.64 233.87 390.706 234.414 cv
390.723 234.551 392.327 233.926 393.043 233.495 cv
cp
.286275 .27451 .266667 rgb
f
384.851 333.013 mo
390.131 338.419 li
385.952 330.162 li
384.851 333.013 li
cp
.960784 .647059 .466667 rgb
f
528.693 369.134 mo
530.352 361.742 530.218 361.656 526.59 358.547 cv
524.457 365.932 li
527.895 369.708 li
527.982 369.805 528.08 369.878 528.183 369.936 cv
528.448 369.771 528.648 369.495 528.693 369.134 cv
cp
.827451 .509804 .227451 rgb
f
524.831 364.599 mo
525.537 362.175 li
529.813 368.977 li
524.831 364.599 li
cp
.960784 .647059 .466667 rgb
f
420.204 228.306 mo
420.302 228.996 418.553 230.999 416.635 231.18 cv
414.718 231.361 413.026 230.137 412.951 229.022 cv
412.909 228.407 414.42 226.547 416.322 226.242 cv
418.464 225.899 420.084 227.456 420.204 228.306 cv
cp
.909804 .784314 .690196 rgb
f
417.081 228.653 mo
417.147 229.355 416.459 229.993 415.545 230.079 cv
414.63 230.165 413.836 229.666 413.77 228.965 cv
413.703 228.264 414.391 227.626 415.305 227.54 cv
416.22 227.454 417.015 227.952 417.081 228.653 cv
cp
.2 .2 .2 rgb
f
403.714 297.858 mo
403.714 297.858 421.012 296.794 427.509 292.392 cv
426.577 290.34 426.126 288.121 426.016 285.931 cv
403.714 297.858 li
cp
.501961 .286275 .129412 rgb
f
433.15 298.683 mo
445.12 305.776 465.814 293.986 470.208 292.463 cv
474.301 291.045 479.084 289.289 486.311 290.687 cv
486.059 290.563 485.805 290.442 485.546 290.328 cv
479.156 287.508 470.716 288.066 461.608 291.699 cv
452.244 295.435 436.487 297.69 430.206 291.506 cv
427.304 288.648 426.4 284.766 426.4 280.426 cv
425.246 286.503 426.153 294.536 433.15 298.683 cv
cp
.701961 .47451 .317647 rgb
f
393.262 239.59 mo
397.509 242.306 402.715 243.003 407.392 243.439 cv
407.391 243.438 407.39 243.438 407.389 243.437 cv
407.389 243.437 412.774 243.678 414.038 242.933 cv
406.652 242.447 392.528 241.281 390.701 234.381 cv
391.034 237.682 392.701 239.231 393.262 239.59 cv
cp
.521569 .321569 .176471 rgb
f
390.649 295.573 mo
397.356 295.547 li
395.141 294.513 391.533 294.926 390.516 287.261 cv
390.061 291.46 390.387 293.299 390.649 295.573 cv
cp
.780392 .6 .454902 rgb
f
434.705 229.878 mo
433.603 235.904 427.745 238.445 427.708 241.929 cv
427.643 248.019 428.226 263.957 428.226 263.957 cv
428.447 263.506 li
428.453 263.454 428.461 263.402 428.467 263.35 cv
429.637 253.785 427.874 245.715 431.422 241.959 cv
431.421 241.958 431.42 241.958 431.42 241.957 cv
435.044 239.653 437.491 233.636 437.296 229.619 cv
434.705 229.878 li
cp
.521569 .321569 .176471 rgb
f
457.284 324.412 mo
463.46 333.064 472.986 337.056 483.374 337.956 cv
492.299 338.729 502.75 336.711 505.408 339.236 cv
508.064 341.759 511.254 350.789 515.454 356.86 cv
517.752 360.182 522.514 363.853 522.514 363.853 cv
524.457 365.932 li
525.245 363.198 li
525.245 363.198 518.028 357.378 516.467 354.789 cv
514.189 351.011 512.396 340.802 509.34 337.62 cv
507.55 335.757 504.243 334.402 501.652 334.1 cv
497.658 333.634 490.357 334.186 485.585 333.409 cv
466.967 330.376 462.638 325.343 449.476 313.541 cv
457.284 324.412 li
cp
f
414.953 293.728 mo
412.534 294.234 li
413.055 295.007 413.653 295.796 414.307 296.588 cv
415.122 296.448 415.951 296.294 416.78 296.125 cv
416.102 295.324 415.487 294.521 414.953 293.728 cv
cp
.580392 .372549 .0431373 rgb
f
429.384 290.597 mo
428.312 289.288 427.585 287.802 427.118 286.184 cv
426.714 285.893 426.426 285.712 426.426 285.712 cv
426.016 285.931 li
426.126 288.121 426.577 290.34 427.509 292.392 cv
428.315 291.845 428.965 291.25 429.384 290.597 cv
cp
.580392 .341176 .176471 rgb
f
389.882 287.777 mo
389.882 287.777 390.479 287.591 391.523 287.266 cv
392.039 287.094 392.666 286.885 393.385 286.646 cv
394.103 286.399 394.913 286.121 395.797 285.818 cv
397.563 285.203 399.609 284.444 401.808 283.647 cv
404.001 282.836 406.341 281.969 408.672 281.076 cv
413.335 279.297 417.966 277.428 421.399 275.94 cv
423.121 275.207 424.544 274.569 425.521 274.088 cv
426.018 273.86 426.387 273.65 426.643 273.511 cv
426.898 273.373 427.035 273.299 427.035 273.299 cv
427.139 273.466 li
427.139 273.466 427.003 273.544 426.748 273.691 cv
426.493 273.839 426.121 274.062 425.629 274.302 cv
424.658 274.811 423.248 275.486 421.541 276.261 cv
418.123 277.804 413.517 279.743 408.875 281.595 cv
406.557 282.53 404.224 283.426 402.024 284.236 cv
399.831 285.062 397.752 285.746 395.973 286.34 cv
394.189 286.917 392.676 287.339 391.611 287.606 cv
390.541 287.832 389.929 287.962 389.929 287.962 cv
389.882 287.777 li
cp
1 1 1 rgb
f
427.103 272.768 mo
419.677 276.09 412.106 279.251 404.405 282.255 cv
399.612 284.125 394.32 286.55 389.27 287.908 cv
389.158 287.938 388.71 288.664 388.709 290.182 cv
388.708 291.761 388.907 293.764 389.599 295.394 cv
400.004 297.218 li
400.545 297.313 li
400.545 297.313 420.47 291.497 428.415 287.316 cv
428.499 287.272 429.292 286.288 429.17 285.113 cv
429.029 283.767 428.691 281.955 428.552 280.02 cv
428.423 278.216 428.498 276.289 428.497 274.85 cv
428.496 273.542 427.46 272.608 427.103 272.768 cv
cp
.909804 .160784 .141176 rgb
f
412.535 291.35 mo
405.45 294.381 398.638 296.966 398.638 296.966 cv
400.57 297.306 li
401.096 297.152 420.578 291.441 428.415 287.316 cv
428.466 287.289 428.779 286.911 428.99 286.356 cv
429 286.326 429.01 286.297 429.021 286.267 cv
429.138 285.929 429.203 285.436 429.159 285.014 cv
429.019 283.668 428.69 281.954 428.552 280.02 cv
428.447 278.543 428.476 276.999 428.49 275.693 cv
427.554 277.061 420.067 288.128 412.535 291.35 cv
cp
.74902 .12549 .12549 rgb
f
427.979 275.681 mo
428.159 275.604 428.327 275.568 428.492 275.545 cv
428.5 274.673 428.497 273.927 428.438 273.399 cv
428.407 273.376 428.375 273.357 428.338 273.353 cv
428.032 273.318 427.693 273.362 427.33 273.522 cv
419.761 276.846 412.043 280.009 404.194 283.016 cv
399.412 284.848 393.89 286.824 388.83 288.182 cv
388.757 288.707 388.7 289.492 388.711 290.405 cv
393.835 289.037 399.398 287.081 404.228 285.262 cv
412.286 282.228 420.209 279.036 427.979 275.681 cv
cp
.709804 .117647 .117647 rgb
f
400.165 297.236 mo
403.714 297.858 li
403.804 297.827 403.894 297.796 403.984 297.765 cv
412.421 294.837 420.62 291.645 428.564 287.464 cv
428.648 287.419 428.733 287.378 428.818 287.333 cv
429.316 287.07 429.289 286.065 429.116 284.66 cv
421.094 288.778 408.22 294.422 400.165 297.236 cv
cp
.984314 .690196 .231373 rgb
f
404.436 284.49 mo
412.342 281.458 420.115 278.268 427.739 274.916 cv
428.007 274.798 428.256 274.759 428.495 274.752 cv
428.49 273.494 428.422 272.626 428.091 272.588 cv
427.791 272.553 427.459 272.597 427.102 272.757 cv
419.676 276.079 412.104 279.24 404.404 282.244 cv
399.611 284.114 394.057 286.139 389.007 287.497 cv
388.905 287.524 388.743 288.459 388.713 289.768 cv
393.876 288.398 399.542 286.367 404.436 284.49 cv
cp
f
416.875 287.618 mo
417.985 288.158 419.322 287.696 419.862 286.587 cv
420.402 285.477 419.94 284.139 418.83 283.599 cv
417.72 283.06 416.383 283.522 415.843 284.631 cv
415.303 285.741 415.765 287.079 416.875 287.618 cv
cp
.709804 .117647 .117647 rgb
f
423.913 284.408 mo
425.023 284.948 426.36 284.486 426.9 283.376 cv
427.44 282.266 426.978 280.928 425.868 280.389 cv
424.758 279.849 423.421 280.311 422.881 281.421 cv
422.341 282.53 422.803 283.868 423.913 284.408 cv
cp
f
409.616 290.955 mo
410.795 291.319 412.046 290.658 412.41 289.479 cv
412.774 288.3 412.113 287.048 410.934 286.684 cv
409.755 286.32 408.504 286.981 408.14 288.161 cv
407.776 289.34 408.437 290.591 409.616 290.955 cv
cp
f
392.88 295.945 mo
395.542 296.41 li
396.206 296.066 396.684 295.401 396.745 294.6 cv
396.838 293.37 395.915 292.297 394.684 292.204 cv
393.454 292.111 392.381 293.033 392.288 294.264 cv
392.239 294.909 392.474 295.506 392.88 295.945 cv
cp
f
401.934 293.927 mo
403.138 294.2 404.335 293.445 404.607 292.242 cv
404.88 291.038 404.125 289.841 402.922 289.569 cv
401.718 289.296 400.521 290.051 400.248 291.254 cv
399.976 292.458 400.73 293.655 401.934 293.927 cv
cp
f
422.727 280.457 mo
422.187 281.567 422.649 282.905 423.759 283.444 cv
424.869 283.984 426.206 283.522 426.746 282.413 cv
427.286 281.303 426.824 279.965 425.714 279.425 cv
424.604 278.885 423.267 279.348 422.727 280.457 cv
cp
.839216 .466667 .0941176 rgb
f
422.994 280.202 mo
422.569 281.076 422.933 282.129 423.807 282.554 cv
424.681 282.979 425.734 282.615 426.159 281.741 cv
426.584 280.867 426.22 279.814 425.346 279.389 cv
424.472 278.964 423.419 279.328 422.994 280.202 cv
cp
.984314 .690196 .231373 rgb
f
423.653 280.022 mo
423.374 280.596 423.612 281.288 424.187 281.567 cv
424.761 281.847 425.452 281.608 425.732 281.034 cv
426.011 280.459 425.772 279.768 425.198 279.488 cv
424.624 279.209 423.932 279.448 423.653 280.022 cv
cp
1 1 1 rgb
f
415.689 283.668 mo
415.149 284.778 415.611 286.115 416.721 286.655 cv
417.831 287.195 419.168 286.733 419.708 285.623 cv
420.248 284.513 419.786 283.176 418.676 282.636 cv
417.566 282.096 416.229 282.558 415.689 283.668 cv
cp
.839216 .466667 .0941176 rgb
f
415.956 283.413 mo
415.531 284.286 415.895 285.339 416.769 285.764 cv
417.642 286.19 418.695 285.826 419.121 284.952 cv
419.546 284.078 419.182 283.025 418.308 282.6 cv
417.434 282.175 416.381 282.539 415.956 283.413 cv
cp
.984314 .690196 .231373 rgb
f
416.615 283.233 mo
416.335 283.807 416.574 284.499 417.148 284.778 cv
417.723 285.057 418.414 284.818 418.694 284.244 cv
418.973 283.67 418.734 282.979 418.16 282.699 cv
417.586 282.42 416.894 282.659 416.615 283.233 cv
cp
1 1 1 rgb
f
407.986 287.197 mo
407.622 288.377 408.283 289.628 409.462 289.992 cv
410.641 290.356 411.892 289.695 412.256 288.516 cv
412.62 287.336 411.959 286.085 410.78 285.721 cv
409.601 285.357 408.35 286.018 407.986 287.197 cv
cp
.839216 .466667 .0941176 rgb
f
408.211 286.904 mo
407.924 287.833 408.444 288.818 409.373 289.104 cv
410.301 289.391 411.287 288.87 411.573 287.942 cv
411.86 287.013 411.339 286.028 410.411 285.742 cv
409.482 285.455 408.497 285.975 408.211 286.904 cv
cp
.984314 .690196 .231373 rgb
f
408.834 286.626 mo
408.646 287.236 408.988 287.883 409.598 288.071 cv
410.208 288.26 410.855 287.918 411.043 287.308 cv
411.231 286.698 410.889 286.051 410.279 285.862 cv
409.669 285.674 409.022 286.016 408.834 286.626 cv
cp
1 1 1 rgb
f
400.094 290.291 mo
399.822 291.495 400.576 292.692 401.78 292.964 cv
402.984 293.237 404.18 292.482 404.453 291.279 cv
404.726 290.075 403.971 288.878 402.768 288.605 cv
401.564 288.333 400.367 289.087 400.094 290.291 cv
cp
.839216 .466667 .0941176 rgb
f
400.296 289.981 mo
400.081 290.929 400.676 291.871 401.623 292.086 cv
402.571 292.301 403.513 291.707 403.728 290.759 cv
403.943 289.811 403.349 288.869 402.401 288.654 cv
401.453 288.439 400.511 289.033 400.296 289.981 cv
cp
.984314 .690196 .231373 rgb
f
400.897 289.656 mo
400.755 290.279 401.146 290.898 401.768 291.039 cv
402.391 291.18 403.01 290.79 403.151 290.167 cv
403.292 289.545 402.902 288.925 402.279 288.784 cv
401.657 288.643 401.038 289.034 400.897 289.656 cv
cp
1 1 1 rgb
f
392.134 293.301 mo
392.041 294.532 392.964 295.605 394.194 295.697 cv
395.425 295.79 396.498 294.868 396.591 293.637 cv
396.684 292.406 395.761 291.333 394.53 291.241 cv
393.3 291.148 392.227 292.07 392.134 293.301 cv
cp
.839216 .466667 .0941176 rgb
f
392.288 292.965 mo
392.215 293.934 392.941 294.779 393.91 294.852 cv
394.879 294.925 395.724 294.198 395.797 293.229 cv
395.87 292.26 395.144 291.416 394.175 291.343 cv
393.206 291.27 392.361 291.996 392.288 292.965 cv
cp
.984314 .690196 .231373 rgb
f
392.834 292.555 mo
392.786 293.192 393.263 293.747 393.9 293.795 cv
394.536 293.843 395.091 293.366 395.139 292.729 cv
395.187 292.093 394.71 291.538 394.074 291.49 cv
393.437 291.442 392.882 291.919 392.834 292.555 cv
cp
1 1 1 rgb
f
410.66 294.082 mo
415.245 292.098 419.792 290.027 423.163 288.39 cv
424.847 287.567 426.237 286.853 427.194 286.32 cv
427.679 286.067 428.045 285.835 428.297 285.682 cv
428.548 285.529 428.682 285.447 428.682 285.447 cv
428.574 285.282 li
428.574 285.282 428.44 285.36 428.188 285.505 cv
427.935 285.649 427.571 285.868 427.081 286.109 cv
426.117 286.615 424.712 287.291 423.012 288.072 cv
419.623 289.656 415.051 291.657 410.442 293.569 cv
408.132 294.51 405.822 295.451 403.657 296.333 cv
402.735 296.695 401.848 297.043 400.989 297.38 cv
402.19 297.591 li
402.747 297.375 403.314 297.151 403.89 296.915 cv
406.065 296.044 408.371 295.082 410.66 294.082 cv
cp
f
389.882 287.777 mo
389.882 287.777 390.479 287.591 391.523 287.266 cv
392.039 287.094 392.666 286.885 393.385 286.646 cv
394.103 286.399 394.913 286.121 395.797 285.818 cv
397.563 285.203 399.609 284.444 401.808 283.647 cv
404.001 282.836 406.341 281.969 408.672 281.076 cv
413.335 279.297 417.966 277.428 421.399 275.94 cv
423.121 275.207 424.544 274.569 425.521 274.088 cv
426.018 273.86 426.387 273.65 426.643 273.511 cv
426.898 273.373 427.035 273.299 427.035 273.299 cv
427.139 273.466 li
427.139 273.466 427.003 273.544 426.748 273.691 cv
426.493 273.839 426.121 274.062 425.629 274.302 cv
424.658 274.811 423.248 275.486 421.541 276.261 cv
418.123 277.804 413.517 279.743 408.875 281.595 cv
406.557 282.53 404.224 283.426 402.024 284.236 cv
399.831 285.062 397.752 285.746 395.973 286.34 cv
394.189 286.917 392.676 287.339 391.611 287.606 cv
390.541 287.832 389.929 287.962 389.929 287.962 cv
389.882 287.777 li
cp
f
433.15 298.683 mo
433.068 298.635 432.999 298.579 432.919 298.53 cv
431.514 306.782 429.839 314.428 427.819 322.304 cv
433.072 322.844 438.284 322.793 442.739 322.518 cv
443.852 315 444.302 307.671 444.616 300.844 cv
440.478 301.164 436.477 300.654 433.15 298.683 cv
cp
.52549 .266667 .0823529 rgb
f
525.916 293.619 mo
495.866 302.84 464.95 312.319 444.027 310.753 cv
443.969 311.499 443.906 312.25 443.84 313.003 cv
445.43 313.121 447.067 313.185 448.76 313.185 cv
469.868 313.185 498.6 304.369 526.581 295.784 cv
563.105 284.576 597.605 273.99 608.356 285.297 cv
609.997 283.737 li
598.281 271.415 563.13 282.201 525.916 293.619 cv
cp
.984314 .690196 .231373 rgb
f
416.78 296.125 mo
415.951 296.294 415.122 296.448 414.307 296.588 cv
418.633 301.829 425.553 307.257 430.739 309.892 cv
430.9 309.137 431.061 308.381 431.216 307.621 cv
426.589 305.231 420.657 300.71 416.78 296.125 cv
cp
f
434.261 308.948 mo
433.353 308.65 432.319 308.191 431.216 307.621 cv
431.061 308.381 430.9 309.137 430.739 309.892 cv
431.754 310.408 432.705 310.82 433.554 311.099 cv
436.648 312.116 440.1 312.725 443.84 313.003 cv
443.906 312.25 443.969 311.499 444.027 310.753 cv
440.467 310.486 437.188 309.91 434.261 308.948 cv
cp
.580392 .372549 .0431373 rgb
f
427.819 322.304 mo
427.337 324.184 426.836 326.079 426.313 327.997 cv
426.21 328.373 426.114 328.742 426.01 329.12 cv
427.145 329.358 428.289 329.566 429.436 329.75 cv
429.594 329.776 429.751 329.803 429.908 329.827 cv
430.399 329.903 430.891 329.972 431.383 330.038 cv
431.567 330.063 431.752 330.088 431.936 330.112 cv
432.431 330.175 432.927 330.233 433.423 330.286 cv
433.587 330.303 433.751 330.32 433.915 330.336 cv
434.438 330.389 434.961 330.438 435.484 330.48 cv
435.563 330.486 435.641 330.491 435.72 330.497 cv
437.572 330.638 439.421 330.713 441.252 330.718 cv
441.45 329.815 441.632 328.913 441.806 328.013 cv
442.161 326.173 442.469 324.341 442.739 322.518 cv
438.284 322.793 433.072 322.844 427.819 322.304 cv
cp
.619608 .431373 .27451 rgb
f
433.15 298.683 mo
436.477 300.654 440.478 301.164 444.616 300.844 cv
444.691 299.213 444.759 297.608 444.827 296.039 cv
444.835 295.829 444.823 295.583 444.799 295.319 cv
444.798 295.319 li
444.325 295.341 443.856 295.352 443.389 295.357 cv
443.288 295.358 443.189 295.357 443.088 295.357 cv
442.699 295.358 442.312 295.353 441.928 295.342 cv
441.847 295.34 441.766 295.339 441.685 295.336 cv
441.223 295.319 440.766 295.294 440.315 295.259 cv
440.278 295.256 440.241 295.251 440.203 295.248 cv
439.792 295.214 439.388 295.171 438.988 295.121 cv
438.906 295.111 438.824 295.1 438.743 295.089 cv
437.867 294.971 437.019 294.812 436.21 294.608 cv
436.153 294.593 436.098 294.578 436.042 294.563 cv
435.678 294.468 435.322 294.363 434.974 294.249 cv
434.928 294.234 434.882 294.221 434.837 294.205 cv
434.443 294.073 434.06 293.929 433.691 293.77 cv
433.443 295.383 433.185 296.967 432.919 298.53 cv
432.999 298.579 433.068 298.635 433.15 298.683 cv
cp
.639216 .364706 .176471 rgb
f
424.25 328.554 mo
427.696 316.168 430.246 304.988 432.235 291.974 cv
432.45 290.556 436.045 292.147 439.219 292.57 cv
442.181 292.963 445.457 292.745 445.156 294.782 cv
443.179 308.016 440.737 317.951 437.742 330.695 cv
437.208 332.968 433.523 331.433 430.391 331.146 cv
427.382 330.87 423.668 330.412 424.25 328.554 cv
cp
.909804 .160784 .141176 rgb
f
436.917 330.975 mo
439.915 317.927 442.359 307.755 444.339 294.207 cv
444.394 293.826 444.324 293.526 444.164 293.281 cv
443.701 293.097 443.109 292.985 442.445 292.902 cv
441.157 301.753 439.701 309.247 438.045 316.943 cv
437.032 321.648 432.16 323.843 427.074 327.234 cv
427.043 327.255 426.492 329.285 426.402 330.563 cv
427.579 330.864 429.054 331.024 430.391 331.146 cv
432.505 331.34 434.868 332.098 436.347 331.874 cv
436.623 331.678 436.822 331.39 436.917 330.975 cv
cp
.74902 .12549 .12549 rgb
f
429.335 326.838 mo
428.893 327.99 429.468 329.283 430.62 329.726 cv
431.772 330.169 433.065 329.594 433.507 328.441 cv
433.95 327.289 433.375 325.997 432.223 325.554 cv
431.071 325.111 429.778 325.686 429.335 326.838 cv
cp
431.171 319.637 mo
431.078 320.868 432 321.941 433.231 322.034 cv
434.462 322.127 435.535 321.204 435.628 319.974 cv
435.72 318.743 434.798 317.67 433.567 317.577 cv
432.337 317.484 431.264 318.407 431.171 319.637 cv
cp
433.068 311.661 mo
432.798 312.866 433.555 314.061 434.759 314.331 cv
435.963 314.602 437.159 313.845 437.429 312.64 cv
437.699 311.436 436.942 310.241 435.738 309.97 cv
434.534 309.7 433.339 310.457 433.068 311.661 cv
cp
434.459 304.277 mo
434.366 305.508 435.288 306.581 436.519 306.673 cv
437.75 306.766 438.823 305.844 438.915 304.613 cv
439.008 303.382 438.086 302.309 436.855 302.217 cv
435.624 302.124 434.552 303.046 434.459 304.277 cv
cp
438.294 294.536 mo
439.524 294.629 440.447 295.702 440.354 296.933 cv
440.261 298.164 439.188 299.086 437.957 298.993 cv
436.727 298.9 435.804 297.827 435.897 296.597 cv
435.99 295.366 437.063 294.444 438.294 294.536 cv
cp
.709804 .117647 .117647 rgb
f
435.936 295.595 mo
435.843 296.826 436.765 297.899 437.996 297.991 cv
439.227 298.084 440.3 297.162 440.392 295.931 cv
440.485 294.7 439.563 293.627 438.332 293.535 cv
437.101 293.442 436.029 294.364 435.936 295.595 cv
cp
.839216 .466667 .0941176 rgb
f
436.09 295.259 mo
436.017 296.228 436.743 297.073 437.712 297.146 cv
438.681 297.219 439.526 296.492 439.599 295.523 cv
439.672 294.554 438.946 293.71 437.977 293.637 cv
437.008 293.564 436.163 294.29 436.09 295.259 cv
cp
.984314 .690196 .231373 rgb
f
436.636 294.849 mo
436.588 295.486 437.065 296.041 437.702 296.089 cv
438.338 296.137 438.893 295.66 438.941 295.023 cv
438.989 294.386 438.512 293.832 437.875 293.784 cv
437.239 293.736 436.684 294.213 436.636 294.849 cv
cp
1 1 1 rgb
f
434.497 303.275 mo
434.404 304.506 435.327 305.579 436.558 305.672 cv
437.788 305.764 438.861 304.842 438.954 303.611 cv
439.047 302.381 438.124 301.308 436.894 301.215 cv
435.663 301.122 434.59 302.044 434.497 303.275 cv
cp
.839216 .466667 .0941176 rgb
f
434.651 302.939 mo
434.578 303.908 435.305 304.753 436.274 304.826 cv
437.243 304.899 438.087 304.173 438.16 303.204 cv
438.234 302.235 437.507 301.39 436.538 301.317 cv
435.569 301.244 434.724 301.97 434.651 302.939 cv
cp
.984314 .690196 .231373 rgb
f
435.197 302.529 mo
435.149 303.166 435.627 303.721 436.263 303.769 cv
436.9 303.817 437.455 303.34 437.503 302.703 cv
437.551 302.067 437.074 301.512 436.437 301.464 cv
435.8 301.416 435.245 301.893 435.197 302.529 cv
cp
1 1 1 rgb
f
433.107 310.66 mo
432.836 311.864 433.594 313.059 434.798 313.33 cv
436.002 313.6 437.197 312.843 437.468 311.639 cv
437.738 310.434 436.981 309.239 435.777 308.969 cv
434.572 308.698 433.377 309.456 433.107 310.66 cv
cp
.839216 .466667 .0941176 rgb
f
433.308 310.35 mo
433.095 311.298 433.691 312.239 434.639 312.452 cv
435.588 312.665 436.529 312.068 436.742 311.12 cv
436.954 310.172 436.358 309.231 435.41 309.018 cv
434.462 308.805 433.521 309.401 433.308 310.35 cv
cp
.984314 .690196 .231373 rgb
f
433.908 310.023 mo
433.768 310.646 434.159 311.265 434.782 311.404 cv
435.405 311.544 436.024 311.153 436.163 310.53 cv
436.303 309.907 435.912 309.289 435.289 309.149 cv
434.666 309.009 434.048 309.401 433.908 310.023 cv
cp
1 1 1 rgb
f
431.209 318.636 mo
431.117 319.866 432.039 320.939 433.27 321.032 cv
434.5 321.125 435.573 320.202 435.666 318.972 cv
435.759 317.741 434.837 316.668 433.606 316.575 cv
432.375 316.483 431.302 317.405 431.209 318.636 cv
cp
.839216 .466667 .0941176 rgb
f
431.364 318.3 mo
431.29 319.269 432.017 320.113 432.986 320.186 cv
433.955 320.259 434.8 319.533 434.873 318.564 cv
434.946 317.595 434.219 316.75 433.25 316.677 cv
432.281 316.604 431.437 317.331 431.364 318.3 cv
cp
.984314 .690196 .231373 rgb
f
431.91 317.89 mo
431.862 318.527 432.339 319.081 432.975 319.129 cv
433.612 319.177 434.167 318.7 434.215 318.064 cv
434.263 317.427 433.786 316.872 433.149 316.824 cv
432.513 316.776 431.958 317.253 431.91 317.89 cv
cp
1 1 1 rgb
f
429.374 325.837 mo
428.931 326.989 429.506 328.281 430.658 328.724 cv
431.81 329.167 433.103 328.592 433.546 327.44 cv
433.989 326.288 433.414 324.995 432.261 324.552 cv
431.109 324.109 429.817 324.684 429.374 325.837 cv
cp
.839216 .466667 .0941176 rgb
f
429.618 325.559 mo
429.27 326.466 429.722 327.484 430.629 327.832 cv
431.537 328.181 432.554 327.728 432.903 326.821 cv
433.252 325.914 432.799 324.896 431.892 324.548 cv
430.985 324.199 429.967 324.652 429.618 325.559 cv
cp
.984314 .690196 .231373 rgb
f
430.259 325.324 mo
430.03 325.919 430.327 326.588 430.923 326.817 cv
431.519 327.046 432.188 326.749 432.417 326.153 cv
432.646 325.557 432.348 324.888 431.753 324.659 cv
431.157 324.43 430.488 324.728 430.259 325.324 cv
cp
1 1 1 rgb
f
433.256 291.4 mo
433.144 291.492 433.071 291.618 433.046 291.787 cv
431.046 305.021 428.481 316.39 425.017 328.985 cv
424.857 329.5 425.026 329.907 425.408 330.235 cv
425.844 330.419 426.366 330.568 426.942 330.688 cv
430.44 317.491 433.053 305.541 435.126 291.693 cv
434.396 291.526 433.753 291.405 433.256 291.4 cv
cp
.74902 .12549 .12549 rgb
f
443.299 293.039 mo
443.303 293.143 443.3 293.252 443.283 293.371 cv
441.207 307.37 438.691 317.874 435.6 331.348 cv
435.549 331.57 435.464 331.746 435.363 331.903 cv
436.581 331.976 437.496 331.74 437.742 330.695 cv
440.737 317.951 443.179 308.016 445.156 294.782 cv
445.311 293.732 444.512 293.283 443.299 293.039 cv
cp
.984314 .690196 .231373 rgb
f
426.129 330.371 mo
429.657 317.224 432.283 305.352 434.36 291.533 cv
433.175 291.309 432.335 291.313 432.235 291.974 cv
430.246 304.988 427.696 316.168 424.25 328.554 cv
423.949 329.516 424.802 330.101 426.109 330.481 cv
426.118 330.444 426.117 330.41 426.129 330.371 cv
cp
f
435.885 331.529 mo
435.885 331.529 436.047 330.946 436.33 329.927 cv
436.46 329.418 436.618 328.799 436.799 328.09 cv
436.974 327.377 437.171 326.572 437.386 325.695 cv
437.809 323.937 438.258 321.875 438.757 319.67 cv
439.242 317.461 439.756 315.104 440.244 312.741 cv
441.227 308.016 442.116 303.27 442.69 299.698 cv
442.989 297.914 443.209 296.422 443.324 295.375 cv
443.396 294.852 443.415 294.441 443.435 294.161 cv
443.454 293.881 443.464 293.731 443.464 293.731 cv
443.658 293.732 li
443.658 293.732 443.651 293.884 443.639 294.169 cv
443.627 294.453 443.617 294.873 443.558 295.398 cv
443.468 296.455 443.287 297.956 443.031 299.75 cv
442.511 303.339 441.692 308.102 440.781 312.848 cv
440.334 315.222 439.847 317.59 439.358 319.803 cv
438.888 322.019 438.357 324.069 437.911 325.827 cv
437.448 327.58 436.998 329.031 436.657 330.036 cv
436.279 331.024 436.063 331.588 436.063 331.588 cv
435.885 331.529 li
cp
1 1 1 rgb
f
424.463 329.189 mo
424.463 329.189 424.637 328.616 424.94 327.612 cv
425.078 327.11 425.247 326.5 425.44 325.8 cv
425.625 325.097 425.834 324.303 426.063 323.437 cv
426.51 321.701 426.986 319.665 427.511 317.486 cv
428.022 315.303 428.562 312.974 429.076 310.637 cv
430.11 305.966 431.049 301.273 431.664 297.739 cv
431.984 295.974 432.222 294.498 432.355 293.463 cv
432.434 292.945 432.462 292.538 432.487 292.261 cv
432.512 291.983 432.526 291.835 432.526 291.835 cv
432.719 291.841 li
432.719 291.841 432.71 291.991 432.692 292.273 cv
432.673 292.555 432.655 292.97 432.589 293.49 cv
432.482 294.535 432.282 296.02 432.004 297.796 cv
431.442 301.346 430.575 306.058 429.611 310.751 cv
429.138 313.1 428.625 315.44 428.11 317.627 cv
427.613 319.818 427.056 321.842 426.585 323.578 cv
426.097 325.308 425.623 326.738 425.265 327.729 cv
424.867 328.698 424.639 329.253 424.639 329.253 cv
424.463 329.189 li
cp
f
615.099 280.765 mo
614.198 288.438 617.079 299.426 615.271 305.191 cv
614.694 306.887 613.254 309.822 611.605 310.276 cv
611.326 310.376 611.036 310.31 610.899 310.312 cv
610.677 310.259 610.176 309.951 609.99 309.726 cv
606.289 305.88 614.731 288.971 610.937 282.534 cv
610.646 282.157 610.479 281.964 610.479 281.964 cv
614.427 288.437 602.013 306.554 609.231 311.983 cv
609.218 311.978 609.438 312.099 609.354 312.052 cv
612.728 313.76 615.283 310.811 616.778 307.351 cv
617.044 306.722 617.257 306.133 617.44 305.464 cv
617.502 305.236 617.495 305.262 617.519 305.174 cv
618.955 298.965 615.529 287.773 615.099 280.765 cv
cp
.858824 .603922 .203922 rgb
f
663.096 245.944 mo
659.519 247.536 657.633 255.493 657.633 255.493 cv
657.633 255.493 653.333 256.006 652.986 259.394 cv
652.877 260.46 653.598 261.672 654.995 261.98 cv
659.965 263.073 675.25 259.989 675.25 259.989 cv
674.358 247.396 li
674.358 247.396 666.287 244.523 663.096 245.944 cv
cp
1 .827451 .639216 rgb
f
669.805 248.54 mo
660.642 248.227 li
660.239 248.869 li
660.593 249.476 665.633 250.766 665.759 252.426 cv
665.977 255.293 661.783 259.485 657.731 260.676 cv
662.673 261.928 li
663.678 261.826 664.702 261.703 665.71 261.569 cv
670.021 254.417 li
669.805 248.54 li
cp
.94902 .717647 .458824 rgb
f
681.793 271.035 mo
681.793 271.035 692.45 296.139 688.011 327.833 cv
660.326 330.75 li
629.856 324.055 li
619.79 319.65 li
619.79 319.65 622.421 310.427 625.588 305.03 cv
628.756 299.632 638.802 289.053 638.802 289.053 cv
681.793 271.035 li
cp
.905882 .133333 .113725 rgb
f
637.48 323.415 mo
626.153 320.884 621.804 318.448 621.431 314.564 cv
620.419 317.446 619.79 319.649 619.79 319.649 cv
629.856 324.055 li
660.326 330.75 li
688.011 327.833 li
688.204 326.454 688.367 325.088 688.505 323.735 cv
679.899 329.758 663.584 329.247 637.48 323.415 cv
cp
.827451 .101961 .0784314 rgb
f
677.289 297.174 mo
674.615 306.557 665.337 331.254 665.337 331.254 cv
688.011 327.833 li
692.45 296.139 681.793 271.035 681.793 271.035 cv
681.085 271.332 li
669.418 277.281 li
669.418 277.281 671.673 279.272 677.069 278.969 cv
677.605 284.251 678.373 293.373 677.289 297.174 cv
cp
.8 .0980392 .0745098 rgb
f
688.788 303.647 mo
687.409 284.268 681.793 271.035 681.793 271.035 cv
681.085 271.332 li
681.085 271.332 678.366 271.985 678.737 272.529 cv
684.357 280.775 683.983 305.144 683.983 305.144 cv
688.788 303.647 li
cp
.666667 .0941176 .0745098 rgb
f
621.242 315.109 mo
616.435 315.542 614.571 322.977 615.321 326.409 cv
617.302 335.476 672.15 346.664 688.826 337.251 cv
690.893 336.084 690.856 326.478 688.489 325.045 cv
679.923 331.179 663.567 330.693 637.312 324.827 cv
625.165 322.112 621.041 319.508 621.242 315.109 cv
cp
.94902 .94902 .94902 rgb
f
630.561 330.605 mo
619.114 326.521 615.385 322.403 615.385 322.403 cv
615.108 323.904 615.089 325.348 615.321 326.409 cv
617.302 335.476 672.15 346.664 688.826 337.251 cv
690.893 336.084 690.856 326.478 688.489 325.045 cv
685.816 326.959 682.384 328.228 678.13 328.891 cv
678.13 328.891 674.194 334.837 668.721 335.364 cv
659.417 336.261 639.366 333.747 630.561 330.605 cv
cp
.792157 .792157 .792157 rgb
f
673.852 337.792 mo
663.702 340.044 642.402 336.254 632.466 333.193 cv
627.83 331.764 618.385 327.511 615.183 324.046 cv
615.13 324.93 615.176 325.745 615.321 326.409 cv
617.302 335.476 672.15 346.664 688.826 337.251 cv
690.893 336.084 690.856 326.478 688.489 325.045 cv
687.287 325.905 685.926 326.631 684.412 327.234 cv
684.094 329.295 683.813 335.582 673.852 337.792 cv
cp
.619608 .619608 .619608 rgb
f
671.306 282.19 mo
671.306 282.19 670.582 274.515 662.507 272.393 cv
654.431 270.27 642.501 275.783 634.071 276.203 cv
625.641 276.622 626.91 276.147 623.403 275.513 cv
619.12 279.215 618.922 290.085 623.444 293.491 cv
633.606 297.071 643.297 296.224 655.26 291.912 cv
671.306 282.19 li
cp
.905882 .133333 .113725 rgb
f
627.083 294.585 mo
625.988 300.315 625.648 304.679 625.648 304.679 cv
628.383 300.485 630.816 298.308 634.976 295.704 cv
632.323 295.611 629.707 295.244 627.083 294.585 cv
cp
.94902 .94902 .94902 rgb
f
606.426 276.565 mo
602.97 279.222 600.876 290.032 604.156 292.903 cv
606.706 295.135 618.278 293.557 618.278 293.557 cv
621.312 290.097 li
619.991 275.872 li
619.991 275.872 609.107 274.504 606.426 276.565 cv
cp
.905882 .133333 .113725 rgb
f
607.447 288.685 mo
603.081 287.412 602.681 285.229 602.681 285.229 cv
602.258 288.428 602.609 291.549 604.156 292.903 cv
606.216 294.706 614.162 294.023 617.14 293.693 cv
615.849 288.19 li
615.849 288.19 610.298 289.516 607.447 288.685 cv
cp
.827451 .101961 .0784314 rgb
f
616.59 293.752 mo
617.62 293.646 618.278 293.557 618.278 293.557 cv
621.312 290.097 li
619.991 275.872 li
619.991 275.872 618.51 275.686 616.507 275.555 cv
614.434 281.79 614.319 290.128 616.59 293.752 cv
cp
.666667 .0941176 .0745098 rgb
f
607.227 291.932 mo
606.053 291.678 603.755 290.846 602.635 289.462 cv
602.842 290.943 603.327 292.177 604.156 292.903 cv
606.706 295.135 618.278 293.557 618.278 293.557 cv
619.545 292.112 li
619.418 290.985 li
619.418 290.985 610.293 292.597 607.227 291.932 cv
cp
f
625.725 289.994 mo
625.754 294.222 li
635.092 296.913 644.206 295.896 655.26 291.912 cv
662.909 287.277 li
662.909 287.277 652.45 291.139 648.785 291.556 cv
643.044 292.209 625.725 289.994 625.725 289.994 cv
cp
.827451 .101961 .0784314 rgb
f
632.915 295.54 mo
630.133 298.74 627.084 302.481 625.588 305.03 cv
625.497 305.185 625.406 305.345 625.316 305.506 cv
629.455 301.132 635.694 297.76 640.747 295.408 cv
639.119 295.465 634.513 295.684 632.915 295.54 cv
cp
.666667 .0941176 .0745098 rgb
f
688.446 309.389 mo
688.446 309.389 676.817 311.954 659.226 310.991 cv
642.886 310.097 629.598 306.565 625.701 304.887 cv
625.104 304.63 624.419 305.027 624.17 305.627 cv
622.177 310.424 li
621.89 311.117 622.284 311.835 622.972 312.135 cv
627.249 313.998 641.478 318.332 655.963 319.587 cv
676.765 321.388 688.171 319.514 688.171 319.514 cv
688.904 319.535 689.513 318.951 689.524 318.217 cv
689.855 310.721 li
689.866 309.95 689.215 309.334 688.446 309.389 cv
cp
.278431 .278431 .278431 rgb
f
689.089 315.533 mo
689.089 315.533 677.575 317.396 656.572 315.574 cv
641.946 314.305 627.576 309.956 623.256 308.088 cv
623.225 308.075 623.197 308.056 623.167 308.041 cv
622.177 310.424 li
621.89 311.117 622.284 311.835 622.972 312.135 cv
627.249 313.998 641.478 318.332 655.963 319.587 cv
676.765 321.388 688.171 319.514 688.171 319.514 cv
688.904 319.535 689.513 318.951 689.524 318.217 cv
689.647 315.426 li
689.476 315.498 689.288 315.539 689.089 315.533 cv
cp
.180392 .180392 .180392 rgb
f
642.622 321.26 mo
638.357 320.443 li
640.977 306.774 li
645.243 307.592 li
642.622 321.26 li
cp
.905882 .133333 .113725 rgb
f
667.904 323.326 mo
663.564 323.176 li
664.045 309.267 li
668.386 309.417 li
667.904 323.326 li
cp
f
660.747 255.967 mo
661.341 256.101 li
662.261 253.289 660.467 252.404 660.156 252.792 cv
659.974 253.018 659.785 253.865 659.684 254.165 cv
659.832 254.159 661.022 255.361 660.747 255.967 cv
cp
1 1 1 rgb
f
660.746 255.968 mo
660.747 255.967 li
661.213 254.116 659.886 253.528 659.711 254.084 cv
659.384 255.125 659.218 255.826 659.218 255.826 cv
659.218 255.826 660.137 255.81 660.746 255.968 cv
cp
.321569 .321569 .321569 rgb
f
662.163 253.53 mo
661.896 253.512 661.642 253.368 661.493 253.122 cv
660.812 251.994 659.089 251.664 658.797 251.681 cv
658.337 251.709 657.921 251.37 657.879 250.913 cv
657.838 250.456 658.147 250.05 658.602 249.995 cv
659.395 249.898 661.85 250.428 662.946 252.244 cv
663.189 252.646 663.06 253.168 662.659 253.41 cv
662.504 253.503 662.331 253.542 662.163 253.53 cv
cp
1 1 1 rgb
f
626.335 315.534 mo
627.209 315.659 628.119 315.324 628.766 314.734 cv
629.474 314.072 629.644 313.519 629.959 312.636 cv
630.72 310.447 631.043 309.551 631.267 308.775 cv
631.504 307.909 631.693 307.345 631.462 306.408 cv
631.26 305.585 630.748 304.861 630.034 304.466 cv
629.675 304.279 627.195 303.51 626.685 303.333 cv
626.437 303.691 626.207 304.036 625.996 304.367 cv
626.189 304.43 629.226 305.453 629.362 305.603 cv
629.791 305.886 630.02 306.597 629.752 307.324 cv
629.352 308.307 629.229 308.513 627.907 312.618 cv
627.674 313.336 627.031 313.913 626.295 313.719 cv
625.312 313.419 623.968 313.007 622.172 312.526 cv
622.008 312.96 621.851 313.389 621.7 313.806 cv
622.281 314.046 625.711 315.454 626.335 315.534 cv
cp
.984314 .678431 .207843 rgb
f
673.881 250.776 mo
668.874 247.352 li
668.874 247.352 667.164 253.866 664.266 257.464 cv
661.433 260.98 643.519 262.845 633.811 276.215 cv
633.898 276.211 633.981 276.207 634.071 276.203 cv
642.501 275.783 654.431 270.27 662.507 272.393 cv
666.053 273.325 668.181 275.328 669.453 277.281 cv
669.491 277.261 669.527 277.241 669.564 277.22 cv
679.048 278.589 684.004 275.925 686.516 264.97 cv
673.881 250.776 li
cp
.94902 .94902 .94902 rgb
f
634.976 295.704 mo
633.123 295.639 631.289 295.432 629.457 295.094 cv
625.654 304.664 li
625.647 304.748 626.941 302.288 629.029 300.11 cv
630.751 298.313 633.096 296.881 634.976 295.704 cv
cp
.792157 .792157 .792157 rgb
f
654.113 267.333 mo
650.528 268.495 641.106 275.093 641.106 275.093 cv
648.354 273.461 656.497 270.813 662.507 272.393 cv
666.053 273.325 668.181 275.328 669.453 277.281 cv
669.491 277.261 669.527 277.241 669.564 277.22 cv
677.276 278.333 681.994 276.779 684.838 270.27 cv
677.514 259.652 li
677.932 263.604 675.701 268.493 674.098 268.957 cv
669.755 270.213 665.53 263.633 654.113 267.333 cv
cp
.835294 .835294 .835294 rgb
f
662.659 269.236 mo
656.005 268.694 651.023 271.426 646.833 273.72 cv
652.407 272.378 658.045 271.22 662.507 272.393 cv
666.053 273.325 668.181 275.328 669.453 277.281 cv
670.636 277.104 680.095 280.577 684.68 270.615 cv
680.265 263.715 li
680.684 266.798 682.157 272.85 674.777 273.484 cv
668.372 274.034 668.92 269.746 662.659 269.236 cv
cp
.72549 .72549 .72549 rgb
f
634.976 295.704 mo
633.847 295.664 632.726 295.564 631.607 295.424 cv
630.759 296.292 629.576 298.099 628.941 299.052 cv
628.046 300.396 625.654 304.667 625.654 304.667 cv
625.654 304.668 li
625.961 304.411 li
628.567 300.52 630.983 298.204 634.976 295.704 cv
cp
.619608 .619608 .619608 rgb
f
633.472 293.922 mo
629.807 293.603 625.742 292.426 625.742 292.426 cv
625.758 294.233 li
632.848 296.276 639.807 296.166 647.586 294.258 cv
642.09 294.623 643.656 294.809 633.472 293.922 cv
cp
.666667 .0941176 .0745098 rgb
f
618.078 275.18 mo
615.566 282.265 615.659 292.403 619.021 295.022 cv
620.462 296.145 627.5 296.598 626.77 294.923 cv
624.974 290.8 627.279 278.754 629.43 275.748 cv
631.283 273.16 619.334 271.637 618.078 275.18 cv
cp
.94902 .94902 .94902 rgb
f
626.131 290.157 mo
626.215 284.929 627.862 277.939 629.43 275.748 cv
629.955 275.016 629.372 274.369 628.241 273.898 cv
622.986 281.582 625.491 288.799 621.601 291.204 cv
620.426 291.93 618.194 291.257 616.762 290.464 cv
617.073 291.978 617.556 293.262 618.221 294.174 cv
625.185 293.787 li
626.131 290.157 li
cp
.792157 .792157 .792157 rgb
f
624.056 293.001 mo
623.069 294.262 618.486 293.569 617.128 291.89 cv
617.569 293.282 618.196 294.379 619.021 295.022 cv
620.462 296.145 627.5 296.598 626.77 294.923 cv
625.532 292.08 626.243 285.468 627.51 280.652 cv
624.261 285.782 625.422 291.257 624.056 293.001 cv
cp
.619608 .619608 .619608 rgb
f
726.836 257.527 mo
720.747 252.405 720.908 253.413 715.795 247.796 cv
712.109 243.746 707.747 234.667 695.607 232.1 cv
687.011 230.282 675.868 231.3 668.726 238.473 cv
676.612 248.013 li
688.759 261.165 li
694.748 264.689 li
701.455 263.789 700.844 258.291 709.253 256.121 cv
712.922 255.175 719.837 254.825 724.947 259.185 cv
726.836 257.527 li
cp
.905882 .133333 .113725 rgb
f
724.527 257.258 mo
722.636 255.853 717.174 251.533 714.736 249.999 cv
697.798 239.347 685.288 245.104 684.227 248.146 cv
683.119 251.319 691.029 259.74 691.029 259.74 cv
709.918 253.077 li
709.918 253.077 719.766 254.772 723.81 258.415 cv
724.183 258.284 724.527 257.258 724.527 257.258 cv
cp
.827451 .101961 .0784314 rgb
f
698.997 250.635 mo
695.987 251.319 689.474 253.677 688.755 256.679 cv
688.382 258.232 693.204 263.781 693.204 263.781 cv
694.748 264.689 li
701.455 263.789 700.844 258.291 709.253 256.121 cv
712.514 255.28 718.338 254.919 723.181 257.91 cv
714.477 249.627 702.215 249.904 698.997 250.635 cv
cp
.666667 .0941176 .0745098 rgb
f
668.726 238.473 mo
668.993 238.205 669.266 237.948 669.544 237.698 cv
669.266 237.949 668.993 238.205 668.726 238.473 cv
cp
.905882 .133333 .113725 rgb
f
695.59 264.541 mo
695.495 264.561 695.4 264.582 695.301 264.601 cv
695.4 264.582 695.495 264.561 695.59 264.541 cv
cp
.666667 .0941176 .0745098 rgb
f
696.167 264.401 mo
696.047 264.434 695.924 264.466 695.798 264.496 cv
695.924 264.466 696.046 264.434 696.167 264.401 cv
cp
f
669.544 237.698 mo
669.569 237.676 669.594 237.654 669.619 237.632 cv
669.594 237.654 669.569 237.676 669.544 237.698 cv
cp
f
696.246 264.379 mo
696.22 264.387 696.194 264.394 696.167 264.401 cv
696.194 264.394 696.22 264.387 696.246 264.379 cv
cp
f
695.301 264.601 mo
695.122 264.633 694.938 264.664 694.748 264.689 cv
694.938 264.664 695.122 264.634 695.301 264.601 cv
cp
f
695.798 264.496 mo
695.73 264.512 695.66 264.526 695.59 264.541 cv
695.66 264.526 695.73 264.512 695.798 264.496 cv
cp
f
688.771 257.137 mo
686.527 254.391 683.515 250.185 684.227 248.146 cv
684.467 247.457 685.299 246.631 686.631 245.886 cv
682.415 242.1 677.302 239.228 671.745 237.29 cv
671.294 237.132 670.86 237.015 670.441 236.933 cv
670.162 237.158 669.889 237.392 669.619 237.632 cv
669.594 237.654 669.569 237.676 669.544 237.698 cv
669.266 237.948 668.993 238.205 668.726 238.473 cv
676.612 248.013 li
688.759 261.165 li
694.748 264.689 li
693.204 263.781 li
693.204 263.781 689.142 259.101 688.771 257.137 cv
cp
.827451 .101961 .0784314 rgb
f
684.227 248.146 mo
683.515 250.185 686.527 254.391 688.771 257.137 cv
688.739 256.964 688.724 256.804 688.755 256.679 cv
689.095 255.256 690.739 253.978 692.693 252.955 cv
690.994 250.324 688.948 247.967 686.631 245.886 cv
685.299 246.631 684.467 247.457 684.227 248.146 cv
cp
.666667 .0941176 .0745098 rgb
f
695.486 258.168 mo
695.22 257.584 694.924 256.979 694.6 256.318 cv
694.026 255.151 693.388 254.03 692.693 252.955 cv
690.739 253.978 689.095 255.256 688.755 256.679 cv
688.724 256.804 688.739 256.964 688.771 257.137 cv
689.142 259.101 693.204 263.781 693.204 263.781 cv
694.748 264.689 li
694.938 264.664 695.122 264.633 695.301 264.601 cv
695.4 264.582 695.495 264.561 695.59 264.541 cv
695.66 264.526 695.73 264.512 695.798 264.496 cv
695.924 264.466 696.047 264.434 696.167 264.401 cv
696.194 264.394 696.22 264.387 696.246 264.379 cv
696.385 264.34 696.52 264.298 696.651 264.254 cv
696.891 261.821 696.38 260.132 695.486 258.168 cv
cp
.627451 .0862745 .0705882 rgb
f
659.698 248.462 mo
665.399 249.953 671.382 253.469 675.344 257.805 cv
679.188 262.013 681.051 266.986 683.86 272.173 cv
684.694 273.714 694.596 270.986 695.295 265.804 cv
695.762 262.337 694.79 260.397 693.3 257.365 cv
688.772 248.154 680.307 241.777 670.445 238.336 cv
666.883 237.093 664.379 238.292 662.068 240.583 cv
658.946 243.678 656.538 247.636 659.698 248.462 cv
cp
.905882 .905882 .905882 rgb
f
686.932 262.654 mo
679.793 258.51 677.031 252.856 666.072 247.815 cv
664.876 247.264 663.162 246.754 662.226 245.976 cv
660.968 244.931 660.235 243.623 660.797 241.926 cv
658.326 244.087 658.312 248.1 659.698 248.462 cv
665.399 249.953 671.382 253.469 675.344 257.805 cv
679.188 262.013 681.051 266.986 683.86 272.173 cv
684.694 273.714 694.596 270.986 695.295 265.804 cv
695.762 262.337 694.79 260.397 693.3 257.365 cv
692.428 255.592 691.408 253.926 690.263 252.364 cv
691.589 255.665 692.152 257.678 691.472 259.486 cv
690.775 261.338 688.642 263.647 686.932 262.654 cv
cp
.760784 .760784 .760784 rgb
f
735.706 261.347 mo
735.343 264.89 732.176 267.467 728.633 267.104 cv
725.09 266.741 722.512 263.574 722.875 260.031 cv
723.239 256.488 726.405 253.911 729.948 254.274 cv
733.491 254.637 736.069 257.803 735.706 261.347 cv
cp
.619608 .619608 .619608 rgb
f
735.283 260.527 mo
734.972 263.567 732.255 265.779 729.214 265.468 cv
726.174 265.156 723.962 262.439 724.274 259.399 cv
724.585 256.358 727.302 254.146 730.343 254.458 cv
733.383 254.77 735.595 257.487 735.283 260.527 cv
cp
.792157 .792157 .792157 rgb
f
734.497 259.189 mo
734.259 261.509 732.185 263.198 729.864 262.96 cv
727.544 262.722 725.856 260.648 726.093 258.328 cv
726.331 256.007 728.405 254.319 730.726 254.557 cv
733.046 254.795 734.734 256.869 734.497 259.189 cv
cp
.94902 .94902 .94902 rgb
f
683.031 265.06 mo
681.462 262.412 677.369 257.593 672.905 253.714 cv
667.413 248.942 662.296 247.724 660.146 246.657 cv
659.524 246.348 659.257 245.131 659.429 243.724 cv
657.975 245.912 657.561 247.903 659.698 248.462 cv
665.399 249.953 671.382 253.469 675.344 257.805 cv
679.188 262.013 681.051 266.986 683.86 272.173 cv
684.694 273.714 694.596 270.986 695.295 265.804 cv
695.539 263.993 695.388 262.599 694.978 261.249 cv
693.849 264.36 686.576 271.045 683.031 265.06 cv
cp
.588235 .588235 .588235 rgb
f
644.38 309.957 mo
644.38 309.957 644.413 310.081 644.437 310.291 cv
644.467 310.503 644.482 310.799 644.482 311.152 cv
644.482 311.857 644.333 312.768 644.097 313.661 cv
643.873 314.558 643.578 315.44 643.313 316.093 cv
643.051 316.747 642.806 317.169 642.806 317.169 cv
642.751 317.265 642.628 317.298 642.532 317.242 cv
642.476 317.21 642.442 317.155 642.433 317.096 cv
642.433 317.096 642.366 316.613 642.369 315.908 cv
642.369 315.204 642.428 314.275 642.559 313.361 cv
642.676 312.444 642.882 311.544 643.147 310.891 cv
643.28 310.564 643.406 310.295 643.513 310.111 cv
643.615 309.925 643.692 309.823 643.692 309.823 cv
643.822 309.651 644.066 309.617 644.238 309.747 cv
644.31 309.801 644.358 309.876 644.38 309.957 cv
cp
.666667 .0941176 .0745098 rgb
f
667.786 311.816 mo
667.786 311.816 667.937 312.313 668.018 313.054 cv
668.054 313.424 668.091 313.855 668.092 314.316 cv
668.101 314.777 668.07 315.268 668.045 315.758 cv
668.021 316.249 667.976 316.739 667.93 317.198 cv
667.882 317.657 667.822 318.085 667.765 318.452 cv
667.65 319.185 667.518 319.672 667.518 319.672 cv
667.476 319.828 667.315 319.92 667.159 319.878 cv
667.048 319.848 666.969 319.757 666.948 319.651 cv
666.948 319.651 666.853 319.156 666.792 318.416 cv
666.762 318.046 666.734 317.615 666.72 317.154 cv
666.707 316.692 666.698 316.2 666.71 315.709 cv
666.721 315.218 666.727 314.727 666.77 314.267 cv
666.804 313.808 666.873 313.38 666.936 313.014 cv
667.071 312.281 667.259 311.797 667.259 311.797 cv
667.314 311.653 667.476 311.582 667.62 311.637 cv
667.702 311.669 667.761 311.738 667.786 311.816 cv
cp
f
739.571 376.995 mo
718.59 375.44 li
704.303 355.813 li
703.371 354.533 701.578 354.252 700.299 355.183 cv
699.02 356.114 698.737 357.907 699.669 359.186 cv
711.096 374.884 li
650.344 370.381 li
592.477 366.091 li
606.094 352.249 li
607.204 351.121 607.189 349.307 606.061 348.197 cv
604.932 347.087 603.118 347.102 602.008 348.23 cv
584.984 365.535 li
563.649 363.954 li
559.606 363.654 555.841 361.66 553.32 358.483 cv
550.829 355.342 549.794 351.455 550.407 347.54 cv
550.451 347.261 550.499 346.977 550.552 346.689 cv
551.515 341.449 554.245 338.254 558.667 337.194 cv
560.207 336.825 561.155 335.278 560.786 333.739 cv
560.417 332.2 558.87 331.251 557.331 331.621 cv
553.488 332.542 546.764 335.59 544.916 345.652 cv
544.854 345.989 544.797 346.321 544.746 346.65 cv
543.881 352.168 545.332 357.635 548.831 362.045 cv
552.343 366.473 557.59 369.251 563.225 369.669 cv
649.92 376.096 li
739.148 382.711 li
740.726 382.828 742.1 381.643 742.217 380.065 cv
742.334 378.487 741.15 377.112 739.571 376.995 cv
cp
.984314 .690196 .231373 rgb
f
740.501 381.529 mo
651.273 374.915 li
564.579 368.488 li
558.943 368.07 553.696 365.291 550.184 360.863 cv
546.685 356.453 545.234 350.986 546.099 345.468 cv
546.151 345.139 546.207 344.807 546.269 344.471 cv
547.134 339.764 549.069 336.605 551.273 334.468 cv
548.532 336.56 545.954 339.999 544.916 345.652 cv
544.854 345.989 544.797 346.321 544.746 346.65 cv
543.881 352.168 545.332 357.635 548.831 362.045 cv
552.343 366.473 557.59 369.251 563.225 369.669 cv
649.92 376.096 li
739.148 382.711 li
740.272 382.794 741.283 382.211 741.82 381.302 cv
741.415 381.473 740.97 381.564 740.501 381.529 cv
cp
.760784 .486275 .0588235 rgb
f
551.018 357.926 mo
551.723 359.059 552.584 360.278 553.699 361.419 cv
553.833 361.567 553.982 361.7 554.134 361.833 cv
554.286 361.964 554.429 362.113 554.597 362.225 cv
554.762 362.341 554.921 362.475 555.094 362.582 cv
555.277 362.695 555.463 362.81 555.649 362.926 cv
556.395 363.392 557.179 363.805 558.017 364.218 cv
559.698 365.015 561.581 365.662 563.624 366.088 cv
565.671 366.519 567.861 366.685 570.178 366.797 cv
574.805 367.068 579.817 367.361 585.118 367.672 cv
590.419 368.003 596.008 368.353 601.79 368.715 cv
607.571 369.086 613.545 369.471 619.616 369.861 cv
625.688 370.221 631.872 370.375 638.034 370.839 cv
650.354 371.809 662.675 372.779 674.225 373.688 cv
685.775 374.598 696.548 375.538 705.785 376.303 cv
715.022 377.071 722.714 377.786 728.1 378.255 cv
733.486 378.734 736.564 379.008 736.564 379.008 cv
736.535 379.376 li
736.535 379.376 724.202 378.592 705.702 377.415 cv
696.454 376.799 685.664 376.081 674.104 375.311 cv
662.546 374.521 650.218 373.679 637.889 372.837 cv
631.725 372.409 625.584 371.668 619.522 371.166 cv
613.458 370.699 607.49 370.24 601.715 369.795 cv
595.939 369.369 590.355 368.957 585.06 368.566 cv
579.763 368.197 574.755 367.847 570.133 367.525 cv
567.825 367.388 565.574 367.193 563.487 366.728 cv
561.398 366.272 559.478 365.578 557.758 364.76 cv
556.91 364.339 556.082 363.896 555.338 363.426 cv
555.151 363.31 554.967 363.194 554.784 363.079 cv
554.59 362.958 554.42 362.816 554.24 362.686 cv
554.055 362.56 553.907 362.405 553.744 362.264 cv
553.584 362.122 553.427 361.98 553.288 361.826 cv
552.129 360.629 551.259 359.381 550.542 358.219 cv
549.125 355.883 548.337 353.859 547.989 352.42 cv
547.818 351.71 549.62 355.644 551.018 357.926 cv
cp
1 1 1 rgb
f
711.014 374.89 mo
713.354 375.063 li
701.927 359.365 li
701.234 358.414 701.215 357.18 701.776 356.226 cv
701.578 356.31 701.385 356.411 701.204 356.543 cv
699.925 357.475 699.642 359.267 700.574 360.547 cv
711.014 374.89 li
cp
.760784 .486275 .0588235 rgb
f
591.9 366.822 mo
589.558 366.679 li
602.997 352.665 li
603.812 351.816 603.997 350.596 603.57 349.575 cv
603.755 349.685 603.932 349.811 604.094 349.966 cv
605.236 351.062 605.274 352.876 604.179 354.018 cv
591.9 366.822 li
cp
f
579.286 307.161 mo
585.498 312.839 588.503 329.306 589.912 341.532 cv
590.875 349.886 597.661 356.365 606.048 356.986 cv
696.152 363.666 li
708.354 364.571 719.52 356.808 722.924 345.054 cv
728.616 325.402 737.257 297.177 742.452 287.917 cv
666.742 270.81 676.53 327.63 651.709 332.275 cv
641.973 334.096 621.728 331.733 612.23 328.922 cv
601.668 325.797 602.581 295.427 579.286 307.161 cv
cp
.909804 .160784 .141176 rgb
f
581.138 309.289 mo
586.111 316.25 588.651 330.589 589.912 341.532 cv
590.875 349.886 597.661 356.365 606.048 356.986 cv
696.152 363.666 li
708.354 364.571 719.52 356.808 722.924 345.054 cv
728.455 325.959 736.769 298.773 742.002 288.753 cv
724.922 297.312 723.484 337.48 703.528 350.274 cv
697.399 354.204 674.216 353.769 650.201 352.059 cv
627.803 350.463 607.961 349.483 602.525 345.416 cv
592.453 337.881 591.932 315.294 581.206 309.238 cv
581.138 309.289 li
cp
.74902 .133333 .113725 rgb
f
651.709 332.275 mo
641.882 334.114 621.696 331.723 612.23 328.922 cv
601.677 325.799 602.565 295.435 579.286 307.161 cv
579.538 307.392 579.783 307.647 580.025 307.912 cv
580.065 307.956 580.104 308 580.143 308.045 cv
580.898 308.895 581.602 309.909 582.258 311.057 cv
588.593 308.406 590.992 309.27 592.923 310.654 cv
596.084 312.917 597.696 317.694 599.808 321.889 cv
602.519 327.274 606.51 332.472 611.336 333.9 cv
616.59 335.455 625.778 337.024 634.67 337.683 cv
657.111 339.347 662.869 336.592 673.187 319.215 cv
683.241 302.282 693.065 282.431 740.188 292.613 cv
740.994 290.753 741.755 289.16 742.452 287.917 cv
666.749 270.811 676.528 327.631 651.709 332.275 cv
cp
f
743.014 285.432 mo
673.434 269.711 672.919 315.412 656.873 327.232 cv
648.694 333.252 621.847 329.112 612.953 326.479 cv
610.241 325.677 608.162 321.547 605.961 317.175 cv
603.682 312.649 601.1 307.52 596.919 304.526 cv
591.899 300.932 585.757 301.05 578.14 304.886 cv
576.884 305.519 576.378 307.05 577.011 308.307 cv
577.644 309.564 579.176 310.069 580.432 309.436 cv
588.111 305.569 591.827 307.145 593.953 308.668 cv
597.114 310.931 599.298 315.27 601.41 319.466 cv
604.121 324.851 606.682 329.937 611.507 331.365 cv
616.762 332.92 625.95 334.489 634.842 335.148 cv
657.283 336.812 661.453 333.353 671.77 315.976 cv
681.934 298.859 693.461 279.457 741.891 290.401 cv
743.267 290.717 744.627 289.85 744.937 288.478 cv
745.247 287.106 744.386 285.742 743.014 285.432 cv
cp
.984314 .690196 .231373 rgb
f
742.411 288.109 mo
742.411 288.109 741.658 287.959 740.246 287.678 cv
739.54 287.534 738.669 287.362 737.643 287.19 cv
736.618 287.01 735.441 286.795 734.114 286.604 cv
731.468 286.175 728.237 285.763 724.52 285.486 cv
720.805 285.227 716.592 285.085 712.036 285.457 cv
707.488 285.802 702.572 286.621 697.678 288.395 cv
695.236 289.283 692.811 290.417 690.477 291.817 cv
688.138 293.208 685.924 294.909 683.837 296.815 cv
679.678 300.665 676.212 305.459 673.068 310.571 cv
671.489 313.128 669.977 315.768 668.385 318.399 cv
666.791 321.026 665.112 323.657 663.084 326.078 cv
661.066 328.485 658.604 330.687 655.629 332.013 cv
654.159 332.678 652.559 333.119 651.003 333.33 cv
649.874 333.501 li
648.7 333.614 li
648.31 333.648 647.915 333.695 647.529 333.719 cv
646.378 333.777 li
643.311 333.922 640.282 333.866 637.3 333.711 cv
634.319 333.535 631.385 333.258 628.508 332.918 cv
622.761 332.177 617.234 331.237 612.094 329.689 cv
612.034 329.672 li
612.026 329.671 611.883 329.621 611.917 329.631 cv
611.802 329.585 li
611.573 329.493 li
611.116 329.309 li
610.805 329.173 610.459 328.946 610.139 328.763 cv
609.533 328.351 608.999 327.913 608.528 327.416 cv
607.582 326.435 606.809 325.365 606.153 324.279 cv
604.834 322.104 603.832 319.911 602.82 317.845 cv
601.817 315.777 600.83 313.82 599.734 312.062 cv
598.643 310.304 597.427 308.751 596.052 307.551 cv
594.684 306.345 593.146 305.529 591.62 305.136 cv
590.093 304.747 588.619 304.685 587.303 304.815 cv
586.644 304.858 586.03 305.012 585.446 305.095 cv
584.868 305.216 584.336 305.384 583.835 305.511 cv
582.841 305.797 582.024 306.139 581.359 306.398 cv
580.065 307.014 579.4 307.387 579.4 307.387 cv
579.172 306.935 li
579.172 306.935 579.9 306.663 581.219 306.069 cv
582.572 305.579 584.527 304.654 587.253 304.335 cv
588.606 304.167 590.145 304.187 591.768 304.557 cv
593.39 304.93 595.053 305.759 596.526 306.992 cv
598.007 308.219 599.308 309.807 600.492 311.572 cv
601.676 313.341 602.744 315.299 603.818 317.341 cv
604.896 319.377 605.97 321.523 607.293 323.556 cv
608.618 325.56 610.234 327.559 612.532 328.201 cv
615.032 328.895 617.676 329.417 620.387 329.872 cv
623.098 330.335 625.884 330.739 628.729 331.048 cv
634.409 331.679 640.334 332.116 646.288 331.884 cv
647.403 331.833 li
647.773 331.811 648.132 331.77 648.498 331.74 cv
649.591 331.642 li
650.719 331.476 li
652.178 331.284 653.551 330.905 654.873 330.319 cv
657.515 329.156 659.774 327.18 661.698 324.905 cv
663.628 322.624 665.281 320.069 666.868 317.475 cv
668.456 314.879 669.984 312.237 671.593 309.656 cv
673.2 307.076 674.883 304.551 676.732 302.183 cv
678.58 299.816 680.603 297.619 682.774 295.65 cv
684.963 293.703 687.287 291.969 689.732 290.559 cv
692.171 289.14 694.695 288.002 697.225 287.121 cv
702.293 285.367 707.329 284.586 711.959 284.32 cv
716.599 284.045 720.852 284.286 724.592 284.63 cv
728.333 284.993 731.572 285.479 734.22 285.97 cv
735.547 286.196 736.724 286.451 737.749 286.662 cv
738.776 286.867 739.642 287.065 740.342 287.23 cv
741.745 287.553 742.493 287.725 742.493 287.725 cv
742.411 288.109 li
cp
1 1 1 rgb
f
214.671 280.337 mo
215.243 281.078 216.421 280.798 216.6 279.879 cv
218.054 272.405 li
218.12 272.062 218.02 271.71 217.781 271.455 cv
216.88 270.491 214.615 268.133 213.759 267.833 cv
213.64 267.791 213.518 267.749 213.396 267.707 cv
210.394 275.537 li
214.671 280.337 li
cp
.45098 .25098 .141176 rgb
f
215.088 279.75 mo
216.539 272.289 217.344 271.806 213.284 267.984 cv
210.394 275.537 li
214.671 280.337 li
214.682 280.352 214.698 280.36 214.71 280.374 cv
214.893 280.225 215.036 280.019 215.088 279.75 cv
cp
.827451 .509804 .227451 rgb
f
253.326 160.6 mo
250.124 160.605 246.596 161.389 243.714 162.895 cv
234.983 167.459 229.946 173.919 217.133 173.27 cv
215.84 174.434 217.102 179.643 219.222 181.01 cv
223.464 183.745 228.687 184.426 233.368 184.861 cv
237.036 186.626 235.633 189.529 235.015 191.763 cv
232.205 201.912 221.321 208.365 217.905 221.332 cv
216.392 227.079 217.105 232.125 216.974 235.385 cv
216.896 237.341 216.762 236.9 215.066 236.697 cv
206.997 235.73 191.585 232.872 188.623 237.431 cv
187.642 238.941 188.15 242.226 189.765 245.633 cv
192.536 251.478 193.974 253.154 197.224 259.041 cv
198.552 261.446 199.818 263.966 200.911 266.248 cv
203.414 269.806 208.655 273.585 208.655 273.585 cv
210.394 275.537 li
213.396 267.707 li
210.442 266.688 206.812 265.548 205.935 261.792 cv
205.67 260.658 203.255 252.099 198.805 244.894 cv
215.314 250.34 213.73 252.084 222.414 254.217 cv
236.218 271.288 263.086 273.149 283.244 265.832 cv
289.42 274.485 298.946 278.477 309.334 279.377 cv
318.259 280.149 328.71 278.132 331.368 280.657 cv
334.024 283.179 337.214 292.209 341.414 298.281 cv
343.712 301.602 348.475 305.274 348.475 305.274 cv
350.417 307.353 li
352.548 299.956 li
352.235 300.034 351.979 300.104 350.629 299.057 cv
349.949 298.529 346.988 296.371 346.397 295.512 cv
344.143 292.234 343.967 288.35 342.396 283.33 cv
340.885 278.503 341.153 274.598 339.239 272.402 cv
335.912 268.585 319.777 265.55 321.102 260.664 cv
324.107 249.583 322.281 241.204 317.502 236.007 cv
323.12 233.711 324.3 224.673 322.256 220.926 cv
319.894 224.069 314.449 230.56 312.271 232.108 cv
312.02 231.983 311.765 231.863 311.506 231.749 cv
305.116 228.929 296.676 229.487 287.568 233.12 cv
278.204 236.855 262.447 239.11 256.167 232.927 cv
249.684 226.544 253.17 215.052 254.428 204.77 cv
255.597 195.206 253.834 187.136 257.382 183.38 cv
257.382 183.38 257.38 183.378 257.38 183.378 cv
261.004 181.073 263.451 175.057 263.256 171.04 cv
263.256 171.04 271.808 168.665 271.29 160.113 cv
265.978 159.076 262.22 160.091 259.609 162.028 cv
257.469 160.544 253.326 160.6 253.326 160.6 cv
cp
.607843 .392157 .239216 rgb
f
240.444 164.767 mo
233.671 168.936 228.472 173.614 217.815 173.282 cv
216.816 173.765 li
216.748 173.933 216.693 174.119 216.66 174.331 cv
218.18 174.279 228.401 174.323 236.737 169.356 cv
239.133 167.928 241.488 164.124 240.444 164.767 cv
cp
.827451 .619608 .462745 rgb
f
257.037 162.877 mo
257.452 161.556 260.597 159.315 261.277 158.736 cv
270.369 155.88 274.263 151.243 280.281 149.343 cv
280.283 149.342 280.28 149.343 280.28 149.343 cv
294.868 146.029 299.306 149.416 308.546 141.905 cv
308.655 141.807 308.842 141.635 308.963 141.524 cv
315.979 135.32 318.106 122.835 307.794 116.222 cv
307.678 116.347 li
307.678 116.347 307.867 116.626 308.229 117.126 cv
311.642 121.947 312.907 126.808 310.683 132.31 cv
309.947 128.038 307.862 125.083 304.426 122.621 cv
304.233 122.846 li
305.914 124.574 307.391 126.649 307.933 129.009 cv
308.788 131.75 308.355 135.509 307.186 137.71 cv
305.577 139.371 303.279 140.822 301.726 141.456 cv
302.444 139.531 302.444 137.503 301.493 135.372 cv
301.264 134.886 301.463 135.224 300.764 134.129 cv
300.595 134.212 li
300.924 135.117 301.269 135.847 301.179 137.585 cv
301.181 138.363 300.734 140.817 298.34 142.512 cv
295.608 143.079 292.51 143.18 289.222 143.444 cv
293.059 139.877 295.262 133.269 293.721 125.772 cv
293.523 125.778 li
293.489 126.656 293.531 130.727 291.643 134.821 cv
290.904 132.026 289.856 130.159 288.51 128.315 cv
288.356 128.395 li
289.348 131.299 290.222 132.906 290.103 135.775 cv
290.02 137.653 289.623 138.277 288.934 139.493 cv
287.85 141.408 286.2 142.736 284.371 144.009 cv
282.033 144.347 278.597 145.052 276.304 146.098 cv
277.265 142.511 277.162 139.477 276.247 136.094 cv
275.955 136.141 li
276.217 140.659 275.107 144.694 272.069 148.485 cv
257.82 157.494 255.102 156.815 248.917 155.219 cv
243.649 153.856 237.794 151.399 234.75 149.876 cv
234.603 150.116 li
237.394 152.18 242.824 155.654 247.939 157.974 cv
250.153 158.977 252.405 159.775 253.459 160.05 cv
252.955 162.877 li
254.013 163.654 256.043 163.697 257.037 162.877 cv
cp
.388235 .203922 .113725 rgb
f
356.943 302.373 mo
356.943 302.373 353.825 300.145 353.184 299.966 cv
352.867 299.878 352.701 299.918 352.548 299.956 cv
350.417 307.353 li
353.855 311.129 li
354.493 311.839 355.669 311.469 355.787 310.523 cv
357.385 303.404 li
357.434 303.006 357.265 302.612 356.943 302.373 cv
cp
.45098 .25098 .141176 rgb
f
233.648 256.884 mo
233.648 256.884 222.358 252.408 218.812 250.47 cv
215.787 248.816 212.074 245.934 206.503 244.25 cv
203.729 243.411 197.886 241.982 195.359 242.306 cv
195.359 242.306 203.198 260.512 204.257 264.982 cv
204.815 267.34 212.466 270.133 212.466 270.133 cv
213.396 267.707 li
210.442 266.688 206.812 265.548 205.935 261.792 cv
205.67 260.658 203.255 252.099 198.805 244.894 cv
215.314 250.34 213.73 252.084 222.414 254.217 cv
225.414 255.283 228.695 256.015 233.648 256.884 cv
cp
.521569 .321569 .176471 rgb
f
229.621 239.25 mo
229.621 239.25 229.525 225.248 230.344 220.063 cv
233.123 202.476 244.857 187.151 240.015 184.367 cv
236.427 185.181 233.349 184.858 233.349 184.858 cv
236.264 186.68 235.593 189.674 235.015 191.763 cv
232.205 201.912 221.283 207.595 217.776 220.538 cv
215.832 227.712 216.279 233.618 216.668 236.987 cv
229.621 239.25 li
cp
.909804 .784314 .690196 rgb
f
233.584 257.013 mo
233.584 257.013 226.975 255.847 222.414 254.217 cv
235.441 270.943 266.625 275.953 286.407 269.301 cv
286.484 269.409 282.255 264.362 280.985 262.516 cv
277.682 263.082 248.637 268.12 233.584 257.013 cv
cp
.709804 .545098 .411765 rgb
f
319.687 224.152 mo
317.187 227.179 313.957 230.91 312.271 232.108 cv
314.741 233.798 li
318 231.139 319.913 227.25 319.687 224.152 cv
cp
.909804 .784314 .690196 rgb
f
221.937 173.63 mo
222.112 174.68 216.828 175.556 216.654 174.506 cv
216.48 173.456 217.521 172.408 218.98 172.166 cv
220.439 171.924 221.763 172.579 221.937 173.63 cv
cp
.909804 .160784 .141176 rgb
f
262.992 169.262 mo
261.415 168.52 259.754 168.258 259.336 167.554 cv
258.859 166.749 259.795 165.436 260.727 163.381 cv
261.921 161.46 266.233 161.643 268.18 162.359 cv
268.737 164.465 265.567 169.706 262.992 169.262 cv
cp
.909804 .784314 .690196 rgb
f
245.529 154.969 mo
247.329 155.55 253.102 157.166 256.25 157.055 cv
260.286 156.873 273.88 148.198 279.313 146.365 cv
284.321 144.681 296.134 144.867 299.823 143.279 cv
299.856 143.343 li
296.052 145.196 284.434 145.367 279.599 147.171 cv
274.043 149.259 263.853 155.988 258.207 157.494 cv
257.487 157.687 255.981 160.09 255.428 160.092 cv
254.652 160.097 254.811 157.715 254.134 157.605 cv
251.4 157.159 247.886 156.057 245.48 155.106 cv
245.529 154.969 li
cp
.6 .4 .301961 rgb
f
219.003 174.916 mo
218.732 174.336 217.672 173.885 216.658 174.351 cv
216.594 174.782 216.6 175.291 216.666 175.835 cv
216.683 175.972 218.287 175.347 219.003 174.916 cv
cp
.286275 .27451 .266667 rgb
f
210.811 274.433 mo
216.091 279.84 li
211.913 271.583 li
210.811 274.433 li
cp
.960784 .647059 .466667 rgb
f
354.653 310.555 mo
356.312 303.163 356.178 303.077 352.55 299.967 cv
350.417 307.353 li
353.855 311.129 li
353.942 311.226 354.04 311.299 354.144 311.357 cv
354.408 311.191 354.608 310.916 354.653 310.555 cv
cp
.827451 .509804 .227451 rgb
f
350.791 306.019 mo
351.497 303.595 li
355.773 310.398 li
350.791 306.019 li
cp
.960784 .647059 .466667 rgb
f
246.164 169.727 mo
246.262 170.417 244.513 172.42 242.595 172.601 cv
240.678 172.781 238.986 171.558 238.911 170.442 cv
238.869 169.828 240.38 167.967 242.282 167.663 cv
244.424 167.32 246.044 168.877 246.164 169.727 cv
cp
.909804 .784314 .690196 rgb
f
243.041 170.074 mo
243.107 170.775 242.419 171.413 241.505 171.5 cv
240.59 171.586 239.796 171.087 239.73 170.386 cv
239.664 169.685 240.351 169.047 241.266 168.961 cv
242.18 168.875 242.975 169.373 243.041 170.074 cv
cp
.2 .2 .2 rgb
f
229.674 239.279 mo
229.674 239.279 246.972 238.214 253.469 233.812 cv
252.538 231.76 252.087 229.542 251.977 227.352 cv
229.674 239.279 li
cp
.501961 .286275 .129412 rgb
f
259.11 240.104 mo
271.08 247.197 291.774 235.407 296.169 233.884 cv
300.261 232.466 305.044 230.709 312.271 232.108 cv
312.02 231.983 311.765 231.863 311.506 231.749 cv
305.116 228.929 296.676 229.487 287.568 233.12 cv
278.204 236.855 262.447 239.11 256.167 232.927 cv
253.264 230.069 252.36 226.186 252.36 221.847 cv
251.206 227.924 252.113 235.957 259.11 240.104 cv
cp
.701961 .47451 .317647 rgb
f
219.222 181.01 mo
223.47 183.727 228.675 184.424 233.353 184.86 cv
233.351 184.859 233.35 184.858 233.349 184.858 cv
233.349 184.858 238.734 185.099 239.998 184.354 cv
232.612 183.868 218.488 182.702 216.661 175.802 cv
216.994 179.103 218.661 180.651 219.222 181.01 cv
cp
.521569 .321569 .176471 rgb
f
216.609 236.994 mo
223.316 236.968 li
221.101 235.934 217.493 236.346 216.476 228.682 cv
216.021 232.881 216.347 234.719 216.609 236.994 cv
cp
.780392 .6 .454902 rgb
f
260.665 171.299 mo
259.564 177.324 253.705 179.866 253.668 183.35 cv
253.603 189.44 254.186 205.377 254.186 205.377 cv
254.407 204.927 li
254.413 204.875 254.421 204.822 254.428 204.77 cv
255.597 195.206 253.834 187.136 257.382 183.38 cv
257.382 183.38 257.38 183.378 257.38 183.378 cv
261.004 181.073 263.451 175.057 263.256 171.04 cv
260.665 171.299 li
cp
.521569 .321569 .176471 rgb
f
283.244 265.832 mo
289.42 274.485 298.946 278.477 309.334 279.377 cv
318.259 280.149 328.71 278.132 331.368 280.657 cv
334.024 283.179 337.214 292.209 341.414 298.281 cv
343.712 301.602 348.475 305.274 348.475 305.274 cv
350.417 307.353 li
351.205 304.619 li
351.205 304.619 343.988 298.799 342.427 296.21 cv
340.149 292.432 338.357 282.222 335.3 279.041 cv
333.511 277.178 330.204 275.823 327.612 275.521 cv
323.619 275.055 316.317 275.607 311.545 274.83 cv
292.927 271.797 288.598 266.764 275.436 254.962 cv
283.244 265.832 li
cp
f
240.913 235.149 mo
238.495 235.655 li
239.015 236.428 239.613 237.216 240.267 238.009 cv
241.082 237.869 241.911 237.714 242.74 237.546 cv
242.063 236.745 241.447 235.942 240.913 235.149 cv
cp
.580392 .372549 .0431373 rgb
f
255.344 232.018 mo
254.273 230.708 253.545 229.223 253.078 227.604 cv
252.674 227.314 252.386 227.133 252.386 227.133 cv
251.977 227.352 li
252.087 229.542 252.538 231.76 253.469 233.812 cv
254.275 233.266 254.925 232.671 255.344 232.018 cv
cp
.580392 .341176 .176471 rgb
f
215.842 229.198 mo
215.842 229.198 216.439 229.012 217.483 228.687 cv
217.999 228.515 218.626 228.306 219.345 228.066 cv
220.063 227.82 220.873 227.542 221.757 227.239 cv
223.523 226.624 225.569 225.865 227.768 225.068 cv
229.962 224.257 232.301 223.389 234.632 222.497 cv
239.295 220.718 243.926 218.849 247.359 217.36 cv
249.081 216.627 250.504 215.99 251.481 215.509 cv
251.978 215.281 252.348 215.071 252.603 214.932 cv
252.858 214.793 252.995 214.719 252.995 214.719 cv
253.099 214.887 li
253.099 214.887 252.963 214.965 252.708 215.112 cv
252.453 215.259 252.081 215.483 251.59 215.723 cv
250.618 216.231 249.208 216.906 247.501 217.682 cv
244.083 219.225 239.477 221.164 234.835 223.016 cv
232.517 223.95 230.184 224.846 227.985 225.656 cv
225.791 226.483 223.712 227.167 221.933 227.761 cv
220.149 228.338 218.636 228.76 217.571 229.027 cv
216.501 229.253 215.89 229.382 215.89 229.382 cv
215.842 229.198 li
cp
1 1 1 rgb
f
253.063 214.188 mo
245.638 217.51 238.066 220.671 230.365 223.676 cv
225.572 225.546 220.28 227.971 215.23 229.329 cv
215.118 229.359 214.67 230.085 214.669 231.603 cv
214.668 233.182 214.867 235.184 215.559 236.814 cv
225.964 238.639 li
226.505 238.734 li
226.505 238.734 246.43 232.918 254.375 228.737 cv
254.459 228.692 255.253 227.709 255.13 226.533 cv
254.989 225.187 254.651 223.375 254.512 221.441 cv
254.383 219.637 254.458 217.71 254.457 216.271 cv
254.456 214.963 253.42 214.029 253.063 214.188 cv
cp
.909804 .160784 .141176 rgb
f
238.496 232.771 mo
231.41 235.802 224.598 238.387 224.598 238.387 cv
226.53 238.727 li
227.056 238.573 246.538 232.861 254.375 228.737 cv
254.426 228.71 254.739 228.332 254.95 227.776 cv
254.96 227.747 254.97 227.718 254.981 227.688 cv
255.098 227.35 255.163 226.857 255.119 226.435 cv
254.979 225.089 254.651 223.375 254.512 221.441 cv
254.407 219.964 254.436 218.42 254.451 217.114 cv
253.514 218.482 246.027 229.548 238.496 232.771 cv
cp
.74902 .12549 .12549 rgb
f
253.94 217.102 mo
254.119 217.025 254.287 216.988 254.452 216.966 cv
254.46 216.094 254.458 215.347 254.398 214.82 cv
254.368 214.796 254.335 214.778 254.298 214.774 cv
253.992 214.739 253.654 214.783 253.29 214.943 cv
245.721 218.267 238.003 221.43 230.154 224.437 cv
225.372 226.269 219.85 228.245 214.79 229.602 cv
214.717 230.127 214.66 230.912 214.671 231.826 cv
219.796 230.458 225.358 228.501 230.188 226.683 cv
238.246 223.649 246.169 220.457 253.94 217.102 cv
cp
.709804 .117647 .117647 rgb
f
226.125 238.656 mo
229.674 239.279 li
229.764 239.248 229.854 239.217 229.944 239.186 cv
238.381 236.257 246.58 233.066 254.525 228.884 cv
254.609 228.84 254.694 228.799 254.778 228.754 cv
255.276 228.491 255.249 227.486 255.076 226.081 cv
247.054 230.199 234.18 235.843 226.125 238.656 cv
cp
.984314 .690196 .231373 rgb
f
230.396 225.911 mo
238.302 222.879 246.075 219.689 253.699 216.337 cv
253.968 216.219 254.217 216.18 254.455 216.173 cv
254.45 214.915 254.382 214.047 254.051 214.009 cv
253.751 213.974 253.419 214.018 253.062 214.177 cv
245.636 217.5 238.065 220.661 230.364 223.665 cv
225.571 225.535 220.017 227.56 214.967 228.918 cv
214.865 228.945 214.703 229.88 214.674 231.188 cv
219.836 229.819 225.502 227.788 230.396 225.911 cv
cp
f
242.835 229.039 mo
243.945 229.579 245.282 229.117 245.822 228.007 cv
246.362 226.897 245.9 225.56 244.79 225.02 cv
243.68 224.48 242.343 224.942 241.803 226.052 cv
241.263 227.162 241.725 228.499 242.835 229.039 cv
cp
.709804 .117647 .117647 rgb
f
249.873 225.828 mo
250.983 226.368 252.32 225.906 252.86 224.796 cv
253.4 223.687 252.938 222.349 251.828 221.809 cv
250.719 221.269 249.381 221.731 248.841 222.841 cv
248.301 223.951 248.763 225.289 249.873 225.828 cv
cp
f
235.576 232.376 mo
236.755 232.74 238.007 232.079 238.371 230.9 cv
238.735 229.72 238.074 228.469 236.894 228.105 cv
235.715 227.741 234.464 228.402 234.1 229.581 cv
233.736 230.761 234.397 232.012 235.576 232.376 cv
cp
f
218.841 237.366 mo
221.502 237.831 li
222.166 237.486 222.645 236.822 222.705 236.021 cv
222.798 234.79 221.875 233.717 220.645 233.625 cv
219.414 233.532 218.341 234.454 218.248 235.685 cv
218.2 236.329 218.434 236.926 218.841 237.366 cv
cp
f
227.894 235.348 mo
229.098 235.621 230.295 234.866 230.568 233.663 cv
230.84 232.459 230.086 231.262 228.882 230.989 cv
227.678 230.717 226.481 231.471 226.209 232.675 cv
225.936 233.879 226.691 235.076 227.894 235.348 cv
cp
f
248.687 221.878 mo
248.147 222.988 248.609 224.325 249.719 224.865 cv
250.829 225.405 252.166 224.943 252.706 223.833 cv
253.246 222.723 252.784 221.386 251.674 220.846 cv
250.564 220.306 249.227 220.768 248.687 221.878 cv
cp
.839216 .466667 .0941176 rgb
f
248.954 221.622 mo
248.529 222.496 248.893 223.549 249.767 223.974 cv
250.641 224.399 251.694 224.036 252.119 223.162 cv
252.544 222.288 252.18 221.235 251.306 220.81 cv
250.432 220.385 249.379 220.749 248.954 221.622 cv
cp
.984314 .690196 .231373 rgb
f
249.613 221.443 mo
249.334 222.017 249.573 222.709 250.147 222.988 cv
250.721 223.267 251.413 223.028 251.692 222.454 cv
251.971 221.88 251.732 221.188 251.158 220.909 cv
250.584 220.63 249.892 220.869 249.613 221.443 cv
cp
1 1 1 rgb
f
241.649 225.089 mo
241.109 226.199 241.571 227.536 242.681 228.076 cv
243.791 228.616 245.128 228.154 245.668 227.044 cv
246.208 225.934 245.746 224.597 244.636 224.057 cv
243.526 223.517 242.189 223.979 241.649 225.089 cv
cp
.839216 .466667 .0941176 rgb
f
241.916 224.833 mo
241.491 225.707 241.855 226.76 242.729 227.185 cv
243.603 227.61 244.656 227.247 245.081 226.373 cv
245.506 225.499 245.142 224.446 244.268 224.021 cv
243.394 223.596 242.341 223.959 241.916 224.833 cv
cp
.984314 .690196 .231373 rgb
f
242.575 224.654 mo
242.296 225.228 242.535 225.92 243.109 226.199 cv
243.683 226.478 244.374 226.239 244.654 225.665 cv
244.933 225.091 244.694 224.399 244.12 224.12 cv
243.546 223.841 242.854 224.08 242.575 224.654 cv
cp
1 1 1 rgb
f
233.946 228.618 mo
233.582 229.797 234.243 231.049 235.422 231.413 cv
236.601 231.777 237.852 231.116 238.216 229.936 cv
238.58 228.757 237.92 227.506 236.74 227.142 cv
235.561 226.778 234.31 227.439 233.946 228.618 cv
cp
.839216 .466667 .0941176 rgb
f
234.171 228.325 mo
233.884 229.253 234.405 230.238 235.333 230.525 cv
236.262 230.812 237.247 230.291 237.533 229.363 cv
237.82 228.434 237.3 227.449 236.371 227.162 cv
235.442 226.876 234.457 227.396 234.171 228.325 cv
cp
.984314 .690196 .231373 rgb
f
234.794 228.047 mo
234.606 228.657 234.948 229.304 235.558 229.492 cv
236.168 229.68 236.815 229.339 237.003 228.729 cv
237.191 228.119 236.85 227.471 236.24 227.283 cv
235.63 227.095 234.983 227.437 234.794 228.047 cv
cp
1 1 1 rgb
f
226.054 231.712 mo
225.782 232.915 226.536 234.112 227.74 234.385 cv
228.944 234.658 230.141 233.903 230.413 232.699 cv
230.686 231.496 229.931 230.299 228.728 230.026 cv
227.524 229.753 226.327 230.508 226.054 231.712 cv
cp
.839216 .466667 .0941176 rgb
f
226.256 231.402 mo
226.042 232.35 226.636 233.292 227.584 233.507 cv
228.531 233.721 229.474 233.127 229.688 232.18 cv
229.903 231.232 229.309 230.289 228.361 230.075 cv
227.413 229.86 226.471 230.454 226.256 231.402 cv
cp
.984314 .690196 .231373 rgb
f
226.857 231.077 mo
226.716 231.7 227.106 232.319 227.729 232.46 cv
228.351 232.601 228.97 232.21 229.111 231.588 cv
229.252 230.965 228.862 230.346 228.239 230.205 cv
227.617 230.064 226.998 230.454 226.857 231.077 cv
cp
1 1 1 rgb
f
218.094 234.722 mo
218.001 235.952 218.924 237.025 220.154 237.118 cv
221.385 237.211 222.458 236.289 222.551 235.058 cv
222.644 233.827 221.721 232.754 220.491 232.661 cv
219.26 232.569 218.187 233.491 218.094 234.722 cv
cp
.839216 .466667 .0941176 rgb
f
218.248 234.386 mo
218.175 235.355 218.901 236.199 219.87 236.272 cv
220.839 236.346 221.684 235.619 221.757 234.65 cv
221.83 233.681 221.104 232.836 220.135 232.763 cv
219.166 232.69 218.321 233.417 218.248 234.386 cv
cp
.984314 .690196 .231373 rgb
f
218.794 233.976 mo
218.746 234.613 219.223 235.168 219.86 235.216 cv
220.497 235.264 221.052 234.786 221.1 234.15 cv
221.148 233.513 220.67 232.958 220.034 232.91 cv
219.397 232.862 218.842 233.339 218.794 233.976 cv
cp
1 1 1 rgb
f
236.62 235.502 mo
241.205 233.519 245.752 231.448 249.123 229.81 cv
250.807 228.987 252.197 228.274 253.155 227.741 cv
253.639 227.487 254.005 227.256 254.257 227.103 cv
254.508 226.95 254.642 226.868 254.642 226.868 cv
254.534 226.703 li
254.534 226.703 254.4 226.78 254.148 226.925 cv
253.896 227.07 253.531 227.288 253.041 227.53 cv
252.077 228.036 250.672 228.712 248.972 229.493 cv
245.583 231.077 241.011 233.078 236.402 234.99 cv
234.092 235.931 231.783 236.872 229.617 237.754 cv
228.695 238.115 227.808 238.464 226.949 238.801 cv
228.15 239.012 li
228.708 238.796 229.274 238.572 229.85 238.336 cv
232.025 237.465 234.331 236.503 236.62 235.502 cv
cp
f
215.842 229.198 mo
215.842 229.198 216.439 229.012 217.483 228.687 cv
217.999 228.515 218.626 228.306 219.345 228.066 cv
220.063 227.82 220.873 227.542 221.757 227.239 cv
223.523 226.624 225.569 225.865 227.768 225.068 cv
229.962 224.257 232.301 223.389 234.632 222.497 cv
239.295 220.718 243.926 218.849 247.359 217.36 cv
249.081 216.627 250.504 215.99 251.481 215.509 cv
251.978 215.281 252.348 215.071 252.603 214.932 cv
252.858 214.793 252.995 214.719 252.995 214.719 cv
253.099 214.887 li
253.099 214.887 252.963 214.965 252.708 215.112 cv
252.453 215.259 252.081 215.483 251.59 215.723 cv
250.618 216.231 249.208 216.906 247.501 217.682 cv
244.083 219.225 239.477 221.164 234.835 223.016 cv
232.517 223.95 230.184 224.846 227.985 225.656 cv
225.791 226.483 223.712 227.167 221.933 227.761 cv
220.149 228.338 218.636 228.76 217.571 229.027 cv
216.501 229.253 215.89 229.382 215.89 229.382 cv
215.842 229.198 li
cp
f
259.11 240.104 mo
259.029 240.055 258.959 240 258.879 239.951 cv
257.474 248.203 255.799 255.848 253.779 263.725 cv
259.032 264.265 264.244 264.214 268.699 263.939 cv
269.812 256.421 270.263 249.092 270.576 242.265 cv
266.439 242.585 262.437 242.075 259.11 240.104 cv
cp
.52549 .266667 .0823529 rgb
f
407.676 281.216 mo
397.229 265.751 375.108 258.837 349.424 258.953 cv
323.741 259.291 294.305 257.779 269.987 252.173 cv
269.929 252.924 269.866 253.674 269.8 254.424 cv
296.947 260.834 325.002 261.198 349.229 261.228 cv
373.456 260.848 393.856 267.823 405.695 281.97 cv
406.355 281.705 407.016 281.453 407.676 281.216 cv
cp
.984314 .690196 .231373 rgb
f
242.74 237.546 mo
241.911 237.714 241.082 237.869 240.267 238.009 cv
244.593 243.25 251.513 248.677 256.7 251.313 cv
256.861 250.557 257.021 249.802 257.177 249.042 cv
252.549 246.651 246.618 242.131 242.74 237.546 cv
cp
f
260.666 249.543 mo
259.759 249.244 258.279 249.612 257.177 249.042 cv
257.021 249.802 256.861 250.557 256.7 251.313 cv
257.715 251.828 258.635 252.356 259.514 252.52 cv
262.607 253.095 266.056 253.291 269.8 254.424 cv
269.866 253.67 269.93 252.92 269.987 252.173 cv
266.574 251.17 263.594 250.505 260.666 249.543 cv
cp
.580392 .372549 .0431373 rgb
f
253.779 263.725 mo
253.297 265.605 252.797 267.5 252.273 269.418 cv
252.17 269.794 252.074 270.163 251.97 270.54 cv
253.105 270.779 254.249 270.986 255.397 271.171 cv
255.554 271.197 255.711 271.224 255.868 271.248 cv
256.359 271.324 256.851 271.393 257.343 271.459 cv
257.528 271.484 257.712 271.509 257.896 271.532 cv
258.392 271.595 258.887 271.654 259.383 271.707 cv
259.547 271.724 259.711 271.74 259.875 271.757 cv
260.398 271.809 260.922 271.859 261.444 271.901 cv
261.523 271.907 261.601 271.911 261.68 271.918 cv
263.532 272.059 265.381 272.134 267.212 272.139 cv
267.41 271.236 267.592 270.334 267.766 269.434 cv
268.121 267.594 268.429 265.761 268.699 263.939 cv
264.244 264.214 259.032 264.265 253.779 263.725 cv
cp
.619608 .431373 .27451 rgb
f
259.11 240.104 mo
262.437 242.075 266.439 242.585 270.576 242.265 cv
270.651 240.634 270.72 239.028 270.787 237.46 cv
270.796 237.25 270.783 237.004 270.759 236.74 cv
270.758 236.74 li
270.285 236.761 269.816 236.772 269.349 236.777 cv
269.249 236.778 269.149 236.778 269.048 236.778 cv
268.659 236.779 268.272 236.774 267.888 236.763 cv
267.807 236.761 267.726 236.76 267.645 236.757 cv
267.184 236.74 266.727 236.715 266.275 236.679 cv
266.238 236.676 266.201 236.672 266.163 236.669 cv
265.753 236.635 265.348 236.592 264.948 236.542 cv
264.866 236.531 264.784 236.521 264.703 236.51 cv
263.827 236.392 262.98 236.233 262.17 236.028 cv
262.113 236.014 262.058 235.999 262.003 235.984 cv
261.638 235.889 261.282 235.784 260.934 235.67 cv
260.888 235.655 260.842 235.641 260.797 235.626 cv
260.404 235.493 260.02 235.349 259.651 235.191 cv
259.403 236.804 259.145 238.388 258.879 239.951 cv
258.959 240 259.029 240.055 259.11 240.104 cv
cp
.639216 .364706 .176471 rgb
f
250.21 269.975 mo
253.656 257.589 256.206 246.409 258.195 233.394 cv
258.41 231.976 262.005 233.568 265.18 233.991 cv
268.141 234.384 271.417 234.166 271.116 236.203 cv
269.139 249.436 266.698 259.372 263.702 272.116 cv
263.168 274.389 259.483 272.854 256.352 272.567 cv
253.342 272.291 249.628 271.833 250.21 269.975 cv
cp
.909804 .160784 .141176 rgb
f
262.877 272.396 mo
265.875 259.348 268.319 249.176 270.299 235.628 cv
270.354 235.247 270.284 234.947 270.124 234.702 cv
269.661 234.518 269.069 234.406 268.405 234.322 cv
267.117 243.174 265.661 250.667 264.005 258.364 cv
262.992 263.068 258.12 265.264 253.034 268.655 cv
253.003 268.675 252.453 270.706 252.363 271.983 cv
253.539 272.285 255.014 272.444 256.352 272.567 cv
258.465 272.761 260.828 273.519 262.307 273.295 cv
262.583 273.099 262.782 272.811 262.877 272.396 cv
cp
.74902 .12549 .12549 rgb
f
255.296 268.259 mo
254.853 269.411 255.428 270.704 256.58 271.147 cv
257.732 271.589 259.025 271.014 259.468 269.862 cv
259.91 268.71 259.335 267.417 258.183 266.975 cv
257.031 266.532 255.738 267.107 255.296 268.259 cv
cp
257.131 261.058 mo
257.038 262.289 257.961 263.362 259.191 263.455 cv
260.422 263.547 261.495 262.625 261.588 261.394 cv
261.681 260.164 260.758 259.091 259.527 258.998 cv
258.297 258.905 257.224 259.827 257.131 261.058 cv
cp
259.028 253.082 mo
258.758 254.286 259.515 255.482 260.719 255.752 cv
261.924 256.022 263.119 255.265 263.389 254.061 cv
263.66 252.857 262.903 251.662 261.698 251.391 cv
260.494 251.121 259.299 251.878 259.028 253.082 cv
cp
260.419 245.698 mo
260.326 246.928 261.249 248.001 262.479 248.094 cv
263.71 248.187 264.783 247.265 264.876 246.034 cv
264.968 244.803 264.046 243.73 262.815 243.637 cv
261.585 243.545 260.512 244.467 260.419 245.698 cv
cp
264.254 235.957 mo
265.484 236.05 266.407 237.123 266.314 238.354 cv
266.221 239.584 265.148 240.507 263.918 240.414 cv
262.687 240.321 261.764 239.248 261.857 238.017 cv
261.95 236.787 263.023 235.864 264.254 235.957 cv
cp
.709804 .117647 .117647 rgb
f
261.896 237.016 mo
261.803 238.246 262.725 239.319 263.956 239.412 cv
265.187 239.505 266.26 238.582 266.353 237.352 cv
266.445 236.121 265.523 235.048 264.292 234.955 cv
263.062 234.863 261.989 235.785 261.896 237.016 cv
cp
.839216 .466667 .0941176 rgb
f
262.05 236.68 mo
261.977 237.649 262.703 238.493 263.672 238.566 cv
264.641 238.639 265.486 237.913 265.559 236.944 cv
265.632 235.975 264.906 235.13 263.937 235.057 cv
262.968 234.984 262.123 235.711 262.05 236.68 cv
cp
.984314 .690196 .231373 rgb
f
262.596 236.27 mo
262.548 236.907 263.025 237.461 263.662 237.509 cv
264.298 237.557 264.853 237.08 264.901 236.444 cv
264.949 235.807 264.472 235.252 263.836 235.204 cv
263.199 235.156 262.644 235.633 262.596 236.27 cv
cp
1 1 1 rgb
f
260.457 244.696 mo
260.365 245.927 261.287 247 262.518 247.092 cv
263.748 247.185 264.821 246.263 264.914 245.032 cv
265.007 243.801 264.085 242.728 262.854 242.636 cv
261.623 242.543 260.55 243.465 260.457 244.696 cv
cp
.839216 .466667 .0941176 rgb
f
260.612 244.36 mo
260.538 245.329 261.265 246.174 262.234 246.247 cv
263.203 246.32 264.048 245.593 264.121 244.624 cv
264.194 243.655 263.467 242.811 262.498 242.738 cv
261.529 242.665 260.685 243.391 260.612 244.36 cv
cp
.984314 .690196 .231373 rgb
f
261.158 243.95 mo
261.11 244.587 261.587 245.142 262.223 245.19 cv
262.86 245.238 263.415 244.761 263.463 244.124 cv
263.511 243.487 263.034 242.933 262.397 242.885 cv
261.761 242.837 261.206 243.314 261.158 243.95 cv
cp
1 1 1 rgb
f
259.067 252.08 mo
258.797 253.285 259.554 254.48 260.758 254.75 cv
261.962 255.021 263.158 254.264 263.428 253.059 cv
263.698 251.855 262.941 250.66 261.737 250.389 cv
260.533 250.119 259.337 250.876 259.067 252.08 cv
cp
.839216 .466667 .0941176 rgb
f
259.268 251.77 mo
259.055 252.718 259.651 253.66 260.6 253.872 cv
261.548 254.085 262.489 253.489 262.702 252.541 cv
262.915 251.593 262.319 250.652 261.37 250.439 cv
260.422 250.226 259.481 250.822 259.268 251.77 cv
cp
.984314 .690196 .231373 rgb
f
259.868 251.444 mo
259.728 252.067 260.12 252.685 260.743 252.825 cv
261.365 252.965 261.984 252.573 262.124 251.951 cv
262.263 251.328 261.872 250.709 261.249 250.57 cv
260.626 250.43 260.008 250.821 259.868 251.444 cv
cp
1 1 1 rgb
f
257.17 260.056 mo
257.077 261.287 257.999 262.36 259.23 262.453 cv
260.461 262.546 261.534 261.623 261.626 260.393 cv
261.719 259.162 260.797 258.089 259.566 257.996 cv
258.335 257.903 257.262 258.826 257.17 260.056 cv
cp
.839216 .466667 .0941176 rgb
f
257.324 259.72 mo
257.251 260.689 257.977 261.534 258.946 261.607 cv
259.915 261.68 260.76 260.954 260.833 259.985 cv
260.906 259.016 260.18 258.171 259.211 258.098 cv
258.242 258.025 257.397 258.751 257.324 259.72 cv
cp
.984314 .690196 .231373 rgb
f
257.87 259.311 mo
257.822 259.947 258.299 260.502 258.935 260.55 cv
259.572 260.598 260.127 260.121 260.175 259.485 cv
260.223 258.848 259.746 258.293 259.109 258.245 cv
258.473 258.197 257.918 258.674 257.87 259.311 cv
cp
1 1 1 rgb
f
255.334 267.257 mo
254.891 268.409 255.466 269.702 256.618 270.145 cv
257.771 270.588 259.063 270.012 259.506 268.86 cv
259.949 267.708 259.374 266.416 258.222 265.973 cv
257.07 265.53 255.777 266.105 255.334 267.257 cv
cp
.839216 .466667 .0941176 rgb
f
255.578 266.98 mo
255.23 267.887 255.683 268.905 256.59 269.253 cv
257.497 269.602 258.515 269.149 258.863 268.242 cv
259.212 267.335 258.759 266.317 257.852 265.968 cv
256.945 265.62 255.927 266.073 255.578 266.98 cv
cp
.984314 .690196 .231373 rgb
f
256.219 266.744 mo
255.99 267.34 256.288 268.009 256.883 268.238 cv
257.479 268.467 258.148 268.169 258.377 267.574 cv
258.606 266.978 258.309 266.309 257.713 266.08 cv
257.117 265.851 256.448 266.148 256.219 266.744 cv
cp
1 1 1 rgb
f
259.216 232.821 mo
259.104 232.912 259.031 233.039 259.006 233.207 cv
257.006 246.442 254.441 257.81 250.977 270.405 cv
250.817 270.921 250.986 271.328 251.369 271.656 cv
251.804 271.84 252.326 271.989 252.903 272.109 cv
256.4 258.912 259.013 246.962 261.086 233.114 cv
260.356 232.946 259.713 232.826 259.216 232.821 cv
cp
.74902 .12549 .12549 rgb
f
269.259 234.459 mo
269.263 234.564 269.261 234.673 269.243 234.792 cv
267.167 248.791 264.651 259.295 261.56 272.769 cv
261.509 272.99 261.424 273.167 261.323 273.323 cv
262.541 273.397 263.457 273.161 263.702 272.116 cv
266.698 259.372 269.139 249.436 271.116 236.203 cv
271.271 235.153 270.472 234.703 269.259 234.459 cv
cp
.984314 .690196 .231373 rgb
f
252.089 271.792 mo
255.617 258.645 258.243 246.773 260.32 232.953 cv
259.135 232.729 258.295 232.733 258.195 233.394 cv
256.206 246.409 253.656 257.589 250.21 269.975 cv
249.909 270.937 250.762 271.522 252.07 271.902 cv
252.078 271.865 252.077 271.83 252.089 271.792 cv
cp
f
261.845 272.95 mo
261.845 272.95 262.007 272.367 262.29 271.348 cv
262.42 270.838 262.578 270.22 262.759 269.51 cv
262.934 268.797 263.131 267.993 263.346 267.115 cv
263.769 265.357 264.219 263.296 264.717 261.09 cv
265.202 258.882 265.716 256.524 266.205 254.161 cv
267.187 249.437 268.077 244.691 268.65 241.119 cv
268.949 239.334 269.169 237.842 269.284 236.796 cv
269.356 236.273 269.376 235.862 269.395 235.582 cv
269.414 235.301 269.424 235.152 269.424 235.152 cv
269.618 235.153 li
269.618 235.153 269.612 235.305 269.6 235.589 cv
269.587 235.874 269.577 236.294 269.518 236.819 cv
269.429 237.875 269.247 239.376 268.991 241.171 cv
268.471 244.759 267.653 249.522 266.741 254.268 cv
266.294 256.643 265.807 259.01 265.319 261.223 cv
264.848 263.44 264.317 265.489 263.871 267.248 cv
263.408 269 262.959 270.451 262.617 271.457 cv
262.239 272.444 262.023 273.009 262.023 273.009 cv
261.845 272.95 li
cp
1 1 1 rgb
f
250.423 270.61 mo
250.423 270.61 250.597 270.036 250.9 269.033 cv
251.038 268.53 251.207 267.92 251.4 267.221 cv
251.585 266.517 251.795 265.724 252.023 264.858 cv
252.47 263.122 252.946 261.086 253.471 258.907 cv
253.982 256.724 254.522 254.394 255.036 252.058 cv
256.07 247.387 257.009 242.694 257.624 239.16 cv
257.944 237.395 258.183 235.919 258.315 234.883 cv
258.394 234.366 258.422 233.959 258.448 233.681 cv
258.472 233.404 258.486 233.256 258.486 233.256 cv
258.679 233.262 li
258.679 233.262 258.67 233.412 258.652 233.694 cv
258.634 233.975 258.615 234.391 258.549 234.911 cv
258.442 235.956 258.242 237.441 257.965 239.217 cv
257.402 242.767 256.535 247.479 255.571 252.172 cv
255.099 254.52 254.585 256.861 254.07 259.048 cv
253.573 261.239 253.016 263.263 252.545 264.999 cv
252.057 266.729 251.584 268.159 251.225 269.149 cv
250.827 270.119 250.599 270.673 250.599 270.673 cv
250.423 270.61 li
cp
f
41.5466 221.396 mo
42.1187 222.137 43.2973 221.857 43.4761 220.939 cv
44.9297 213.464 li
44.9963 213.122 44.8958 212.769 44.6575 212.514 cv
43.7564 211.551 41.4913 209.192 40.6348 208.892 cv
40.516 208.85 40.3937 208.808 40.2724 208.766 cv
37.2699 216.596 li
41.5466 221.396 li
cp
.45098 .25098 .141176 rgb
f
41.9644 220.809 mo
43.4153 213.348 44.2197 212.865 40.1597 209.043 cv
37.2699 216.596 li
41.5466 221.396 li
41.5583 221.411 41.5736 221.419 41.5859 221.434 cv
41.769 221.284 41.9121 221.078 41.9644 220.809 cv
cp
.827451 .509804 .227451 rgb
f
80.2023 101.659 mo
77.0001 101.664 73.4723 102.448 70.5901 103.954 cv
61.8596 108.518 56.8225 114.978 44.0087 114.33 cv
42.7158 115.493 43.9779 120.702 46.0984 122.069 cv
50.3404 124.804 55.5628 125.485 60.2439 125.921 cv
63.9125 127.685 62.5095 130.588 61.8909 132.822 cv
59.0812 142.971 48.1975 149.425 44.7815 162.392 cv
43.2677 168.138 43.981 173.184 43.8503 176.444 cv
43.7719 178.4 43.6377 177.959 41.9417 177.756 cv
33.873 176.789 18.4614 173.931 15.4992 178.491 cv
14.5184 180 15.0264 183.285 16.6415 186.692 cv
19.4123 192.537 20.8497 194.213 24.1004 200.1 cv
25.4286 202.505 26.6941 205.025 27.7871 207.307 cv
30.2897 210.865 35.5306 214.644 35.5306 214.644 cv
37.2699 216.596 li
40.2724 208.766 li
37.3185 207.747 33.6877 206.607 32.8108 202.852 cv
32.5458 201.717 30.1306 193.158 25.6807 185.954 cv
42.1897 191.399 40.6059 193.143 49.2905 195.276 cv
63.0945 212.347 89.9617 214.208 110.12 206.892 cv
116.296 215.544 125.822 219.536 136.21 220.436 cv
145.135 221.209 155.586 219.191 158.244 221.716 cv
160.9 224.238 164.09 233.268 168.29 239.34 cv
170.588 242.661 175.351 246.333 175.351 246.333 cv
177.293 248.412 li
179.424 241.015 li
179.111 241.093 178.855 241.163 177.505 240.116 cv
176.825 239.589 173.864 237.43 173.273 236.571 cv
171.019 233.293 170.843 229.409 169.272 224.39 cv
167.761 219.563 168.029 215.658 166.115 213.461 cv
162.788 209.644 146.653 206.61 147.978 201.723 cv
150.983 190.642 149.157 182.263 144.378 177.066 cv
149.996 174.77 151.176 165.733 149.132 161.986 cv
146.77 165.128 141.325 171.619 139.147 173.167 cv
138.896 173.042 138.641 172.922 138.382 172.808 cv
131.992 169.988 123.552 170.546 114.444 174.179 cv
105.08 177.914 89.3229 180.169 83.0426 173.986 cv
76.5604 167.603 80.0462 156.112 81.3037 145.829 cv
82.4734 136.265 80.7102 128.195 84.2578 124.439 cv
84.2578 124.439 84.2564 124.438 84.2558 124.437 cv
87.8804 122.133 90.3269 116.116 90.1325 112.099 cv
90.1325 112.099 98.6845 109.724 98.1662 101.172 cv
92.8536 100.135 89.0959 101.15 86.4849 103.087 cv
84.3448 101.604 80.2023 101.659 80.2023 101.659 cv
cp
.607843 .392157 .239216 rgb
f
67.3204 105.826 mo
60.5474 109.995 55.3485 114.673 44.6906 114.342 cv
43.6923 114.824 li
43.624 114.992 43.5695 115.178 43.5366 115.39 cv
45.0557 115.338 55.2768 115.382 63.6128 110.415 cv
66.0086 108.987 68.3643 105.183 67.3204 105.826 cv
cp
.827451 .619608 .462745 rgb
f
83.9129 103.936 mo
84.3278 102.615 87.4726 100.375 88.1526 99.7954 cv
97.2453 96.9388 101.139 92.3018 107.157 90.4021 cv
107.159 90.4016 107.156 90.4023 107.156 90.4023 cv
121.744 87.0884 126.182 90.4749 135.422 82.9641 cv
135.531 82.8661 135.718 82.6938 135.839 82.5829 cv
142.855 76.3788 144.982 63.8944 134.671 57.281 cv
134.554 57.4064 li
134.554 57.4064 134.744 57.6855 135.105 58.1849 cv
138.518 63.0066 139.783 67.8668 137.559 73.369 cv
136.823 69.0967 134.738 66.1418 131.302 63.6799 cv
131.109 63.9049 li
132.791 65.6331 134.267 67.7079 134.809 70.0679 cv
135.664 72.8093 135.232 76.5677 134.062 78.7694 cv
132.454 80.4305 130.155 81.8813 128.602 82.5152 cv
129.32 80.5904 129.32 78.562 128.369 76.4307 cv
128.14 75.9456 128.339 76.283 127.64 75.1881 cv
127.471 75.2713 li
127.8 76.1758 128.145 76.9063 128.055 78.644 cv
128.057 79.4219 127.61 81.8756 125.216 83.5711 cv
122.484 84.1381 119.386 84.2388 116.098 84.5033 cv
119.935 80.9363 122.138 74.328 120.597 66.8311 cv
120.399 66.8375 li
120.365 67.7155 120.407 71.7859 118.519 75.8799 cv
117.78 73.0848 116.732 71.2179 115.387 69.3741 cv
115.233 69.4543 li
116.224 72.3585 117.098 73.9647 116.979 76.8338 cv
116.896 78.7125 116.499 79.3362 115.81 80.5524 cv
114.726 82.467 113.076 83.7956 111.247 85.0681 cv
108.909 85.4061 105.473 86.1107 103.18 87.1574 cv
104.141 83.5706 104.038 80.5357 103.123 77.1528 cv
102.831 77.2002 li
103.093 81.718 101.983 85.7528 98.9456 89.5438 cv
84.6962 98.5535 81.9776 97.8743 75.7931 96.2784 cv
70.5255 94.9155 64.6697 92.4584 61.6262 90.9348 cv
61.4794 91.1752 li
64.2701 93.2388 69.6999 96.7136 74.8153 99.0336 cv
77.0289 100.036 79.281 100.834 80.335 101.109 cv
79.8313 103.936 li
80.8895 104.713 82.9195 104.757 83.9129 103.936 cv
cp
.388235 .203922 .113725 rgb
f
183.819 243.432 mo
183.819 243.432 180.701 241.204 180.06 241.025 cv
179.743 240.937 179.577 240.977 179.424 241.015 cv
177.293 248.412 li
180.731 252.188 li
181.369 252.898 182.545 252.528 182.663 251.582 cv
184.261 244.463 li
184.31 244.065 184.141 243.671 183.819 243.432 cv
cp
.45098 .25098 .141176 rgb
f
60.5246 197.943 mo
60.5246 197.943 49.234 193.467 45.6882 191.529 cv
42.6628 189.875 38.9503 186.994 33.3786 185.309 cv
30.605 184.471 24.7618 183.042 22.2351 183.366 cv
22.2351 183.366 30.0744 201.571 31.1326 206.041 cv
31.6907 208.399 39.3421 211.192 39.3421 211.192 cv
40.2724 208.766 li
37.3185 207.747 33.6877 206.607 32.8108 202.852 cv
32.5458 201.717 30.1306 193.158 25.6807 185.954 cv
42.1897 191.399 40.6059 193.143 49.2905 195.276 cv
52.2902 196.342 55.571 197.074 60.5246 197.943 cv
cp
.521569 .321569 .176471 rgb
f
56.4971 180.309 mo
56.4971 180.309 56.4012 166.307 57.2204 161.122 cv
59.9991 143.535 71.7328 128.21 66.8912 125.426 cv
63.3034 126.24 60.2253 125.917 60.2253 125.917 cv
63.1401 127.74 62.4693 130.733 61.8909 132.822 cv
59.0812 142.971 48.1586 148.654 44.6516 161.597 cv
42.7077 168.771 43.1556 174.677 43.5443 178.046 cv
56.4971 180.309 li
cp
.909804 .784314 .690196 rgb
f
60.4598 198.072 mo
60.4598 198.072 53.8515 196.906 49.2905 195.276 cv
62.317 212.002 93.5015 217.012 113.283 210.36 cv
113.361 210.469 109.131 205.421 107.861 203.575 cv
104.559 204.141 75.5126 209.179 60.4598 198.072 cv
cp
.709804 .545098 .411765 rgb
f
146.563 165.211 mo
144.063 168.239 140.833 171.969 139.147 173.167 cv
141.617 174.857 li
144.876 172.198 146.789 168.309 146.563 165.211 cv
cp
.909804 .784314 .690196 rgb
f
48.8135 114.689 mo
48.9878 115.739 43.7042 116.616 43.53 115.565 cv
43.3557 114.515 44.3972 113.467 45.8562 113.225 cv
47.3152 112.983 48.6393 113.638 48.8135 114.689 cv
cp
.909804 .160784 .141176 rgb
f
89.868 110.321 mo
88.2914 109.579 86.6304 109.317 86.2123 108.613 cv
85.7347 107.808 86.6708 106.496 87.6031 104.44 cv
88.7973 102.519 93.1093 102.702 95.0564 103.418 cv
95.6127 105.524 92.4428 110.765 89.868 110.321 cv
cp
.909804 .784314 .690196 rgb
f
72.405 96.0277 mo
74.2046 96.6096 79.9782 98.2254 83.1265 98.1142 cv
87.1625 97.9325 100.756 89.2569 106.189 87.4238 cv
111.197 85.7399 123.01 85.9264 126.699 84.3381 cv
126.732 84.402 li
122.928 86.2549 111.31 86.4262 106.475 88.2301 cv
100.919 90.3182 90.7293 97.0474 85.0832 98.5535 cv
84.3628 98.7457 82.8573 101.15 82.3038 101.151 cv
81.5286 101.156 81.6874 98.7742 81.0097 98.6637 cv
78.2762 98.2183 74.7623 97.1166 72.3564 96.1656 cv
72.405 96.0277 li
cp
.6 .4 .301961 rgb
f
45.8788 115.975 mo
45.6079 115.395 44.548 114.945 43.5345 115.411 cv
43.4701 115.842 43.4764 116.35 43.5425 116.894 cv
43.5592 117.031 45.1633 116.406 45.8788 115.975 cv
cp
.286275 .27451 .266667 rgb
f
37.6873 215.493 mo
42.9671 220.899 li
38.7887 212.642 li
37.6873 215.493 li
cp
.960784 .647059 .466667 rgb
f
181.529 251.614 mo
183.188 244.222 183.054 244.136 179.426 241.026 cv
177.293 248.412 li
180.731 252.188 li
180.818 252.285 180.917 252.358 181.02 252.416 cv
181.284 252.251 181.484 251.975 181.529 251.614 cv
cp
.827451 .509804 .227451 rgb
f
177.667 247.078 mo
178.373 244.655 li
182.649 251.457 li
177.667 247.078 li
cp
.960784 .647059 .466667 rgb
f
73.0402 110.786 mo
73.1378 111.476 71.3893 113.479 69.4716 113.66 cv
67.5538 113.841 65.8623 112.617 65.7868 111.502 cv
65.7452 110.887 67.2563 109.026 69.1583 108.722 cv
71.3006 108.379 72.9201 109.936 73.0402 110.786 cv
cp
.909804 .784314 .690196 rgb
f
69.9169 111.133 mo
69.9829 111.834 69.2952 112.473 68.3809 112.559 cv
67.4666 112.645 66.6718 112.146 66.6058 111.445 cv
66.5397 110.744 67.2274 110.106 68.1417 110.02 cv
69.0561 109.934 69.8508 110.432 69.9169 111.133 cv
cp
.2 .2 .2 rgb
f
56.5499 180.338 mo
56.5499 180.338 73.8482 179.274 80.3449 174.871 cv
79.4137 172.82 78.9626 170.601 78.8526 168.411 cv
56.5499 180.338 li
cp
.501961 .286275 .129412 rgb
f
85.9861 181.163 mo
97.9558 188.256 118.651 176.466 123.045 174.943 cv
127.137 173.525 131.921 171.769 139.147 173.167 cv
138.896 173.042 138.641 172.922 138.382 172.808 cv
131.992 169.988 123.552 170.546 114.444 174.179 cv
105.08 177.914 89.3229 180.169 83.0426 173.986 cv
80.14 171.128 79.2365 167.245 79.2365 162.906 cv
78.082 168.983 78.989 177.016 85.9861 181.163 cv
cp
.701961 .47451 .317647 rgb
f
46.0984 122.069 mo
50.3457 124.786 55.5514 125.483 60.2286 125.919 cv
60.2274 125.918 60.2265 125.917 60.2253 125.917 cv
60.2253 125.917 65.6104 126.158 66.8738 125.413 cv
59.488 124.927 45.3643 123.761 43.5373 116.861 cv
43.87 120.162 45.5373 121.711 46.0984 122.069 cv
cp
.521569 .321569 .176471 rgb
f
43.4855 178.053 mo
50.1925 178.027 li
47.9774 176.993 44.3695 177.406 43.3525 169.741 cv
42.8972 173.94 43.223 175.778 43.4855 178.053 cv
cp
.780392 .6 .454902 rgb
f
87.541 112.358 mo
86.4396 118.384 80.581 120.925 80.5439 124.409 cv
80.4792 130.499 81.0622 146.437 81.0622 146.437 cv
81.2827 145.986 li
81.2892 145.934 81.2974 145.881 81.3037 145.829 cv
82.4734 136.265 80.7102 128.195 84.2578 124.439 cv
84.2578 124.439 84.2564 124.438 84.2558 124.437 cv
87.8804 122.133 90.3269 116.116 90.1325 112.099 cv
87.541 112.358 li
cp
.521569 .321569 .176471 rgb
f
110.12 206.892 mo
116.296 215.544 125.822 219.536 136.21 220.436 cv
145.135 221.209 155.586 219.191 158.244 221.716 cv
160.9 224.238 164.09 233.268 168.29 239.34 cv
170.588 242.661 175.351 246.333 175.351 246.333 cv
177.293 248.412 li
178.081 245.678 li
178.081 245.678 170.864 239.858 169.303 237.269 cv
167.025 233.491 165.233 223.282 162.176 220.1 cv
160.387 218.237 157.08 216.882 154.488 216.58 cv
150.495 216.114 143.194 216.666 138.421 215.889 cv
119.803 212.856 115.475 207.823 102.313 196.021 cv
110.12 206.892 li
cp
f
67.7895 176.208 mo
65.3707 176.714 li
65.8909 177.487 66.4888 178.275 67.1429 179.068 cv
67.9585 178.928 68.7868 178.774 69.6161 178.605 cv
68.9387 177.804 68.3231 177.001 67.7895 176.208 cv
cp
.580392 .372549 .0431373 rgb
f
82.2203 173.077 mo
81.1486 171.767 80.421 170.282 79.954 168.663 cv
79.5498 168.373 79.262 168.192 79.262 168.192 cv
78.8526 168.411 li
78.9626 170.601 79.4137 172.82 80.3449 174.871 cv
81.1512 174.325 81.8008 173.73 82.2203 173.077 cv
cp
.580392 .341176 .176471 rgb
f
42.7182 170.257 mo
42.7182 170.257 43.315 170.071 44.3595 169.746 cv
44.8755 169.574 45.5021 169.365 46.2209 169.125 cv
46.939 168.879 47.7493 168.601 48.6331 168.298 cv
50.3995 167.683 52.4451 166.924 54.6441 166.127 cv
56.8377 165.316 59.1774 164.448 61.5081 163.556 cv
66.1713 161.777 70.8018 159.908 74.2353 158.42 cv
75.9568 157.686 77.3805 157.049 78.3575 156.568 cv
78.8539 156.34 79.2237 156.13 79.4791 155.991 cv
79.7346 155.852 79.8708 155.778 79.8708 155.778 cv
79.9754 155.946 li
79.9754 155.946 79.8393 156.024 79.5841 156.171 cv
79.3288 156.318 78.9568 156.542 78.4657 156.782 cv
77.4943 157.29 76.0843 157.966 74.3773 158.741 cv
70.9595 160.284 66.3532 162.223 61.7108 164.075 cv
59.3931 165.009 57.0598 165.906 54.8606 166.715 cv
52.6676 167.542 50.5879 168.226 48.8088 168.82 cv
47.0249 169.397 45.5119 169.819 44.447 170.086 cv
43.3771 170.312 42.7657 170.441 42.7657 170.441 cv
42.7182 170.257 li
cp
1 1 1 rgb
f
79.9395 155.247 mo
72.5136 158.57 64.9419 161.731 57.241 164.735 cv
52.4481 166.605 47.1563 169.03 42.1062 170.388 cv
41.9946 170.418 41.5464 171.144 41.5452 172.662 cv
41.544 174.241 41.7431 176.244 42.4349 177.873 cv
52.8399 179.698 li
53.3816 179.793 li
53.3816 179.793 73.3063 173.977 81.2508 169.796 cv
81.3349 169.751 82.1287 168.768 82.006 167.592 cv
81.8654 166.246 81.5268 164.434 81.3884 162.5 cv
81.2594 160.696 81.3345 158.769 81.3331 157.33 cv
81.3318 156.022 80.2964 155.088 79.9395 155.247 cv
cp
.909804 .160784 .141176 rgb
f
65.3717 173.83 mo
58.2858 176.861 51.4741 179.446 51.4741 179.446 cv
53.4064 179.786 li
53.9325 179.632 73.4138 173.921 81.2508 169.796 cv
81.302 169.769 81.6155 169.391 81.8258 168.835 cv
81.8363 168.806 81.8466 168.777 81.8571 168.747 cv
81.974 168.409 82.0394 167.916 81.9954 167.494 cv
81.8549 166.148 81.5267 164.434 81.3884 162.5 cv
81.2828 161.023 81.3126 159.479 81.3266 158.173 cv
80.3905 159.541 72.9035 170.607 65.3717 173.83 cv
cp
.74902 .12549 .12549 rgb
f
80.8156 158.161 mo
80.9949 158.084 81.1633 158.048 81.3279 158.025 cv
81.3366 157.153 81.3336 156.406 81.2746 155.879 cv
81.2436 155.855 81.211 155.837 81.1739 155.833 cv
80.868 155.798 80.5297 155.842 80.1659 156.002 cv
72.5971 159.326 64.8795 162.489 57.0303 165.496 cv
52.2482 167.328 46.7259 169.304 41.6663 170.662 cv
41.5928 171.187 41.5364 171.971 41.547 172.885 cv
46.6716 171.517 52.2346 169.56 57.0641 167.742 cv
65.1224 164.708 73.0453 161.516 80.8156 158.161 cv
cp
.709804 .117647 .117647 rgb
f
53.0009 179.715 mo
56.5499 180.338 li
56.6398 180.307 56.73 180.276 56.8199 180.245 cv
65.2575 177.316 73.4562 174.125 81.4007 169.943 cv
81.4847 169.899 81.5697 169.858 81.6538 169.813 cv
82.1518 169.55 82.1252 168.545 81.9521 167.14 cv
73.93 171.258 61.0559 176.902 53.0009 179.715 cv
cp
.984314 .690196 .231373 rgb
f
57.2724 166.97 mo
65.1783 163.938 72.9516 160.748 80.5751 157.396 cv
80.8437 157.278 81.0927 157.239 81.3308 157.232 cv
81.3264 155.974 81.2579 155.106 80.9271 155.068 cv
80.6271 155.033 80.2952 155.077 79.9383 155.237 cv
72.5125 158.559 64.9407 161.72 57.2398 164.724 cv
52.4468 166.594 46.893 168.619 41.8429 169.977 cv
41.7415 170.004 41.5795 170.939 41.5497 172.248 cv
46.7119 170.878 52.3781 168.847 57.2724 166.97 cv
cp
f
69.7112 170.098 mo
70.8211 170.638 72.1585 170.176 72.6984 169.066 cv
73.2383 167.957 72.7762 166.619 71.6664 166.079 cv
70.5565 165.539 69.2191 166.001 68.6793 167.111 cv
68.1393 168.221 68.6014 169.558 69.7112 170.098 cv
cp
.709804 .117647 .117647 rgb
f
76.7493 166.888 mo
77.8592 167.427 79.1965 166.965 79.7365 165.856 cv
80.2763 164.746 79.8144 163.408 78.7045 162.868 cv
77.5946 162.329 76.2573 162.791 75.7173 163.9 cv
75.1775 165.01 75.6395 166.348 76.7493 166.888 cv
cp
f
62.4522 173.435 mo
63.6315 173.799 64.8826 173.138 65.2466 171.959 cv
65.6106 170.779 64.9497 169.528 63.7704 169.164 cv
62.5911 168.8 61.34 169.461 60.976 170.641 cv
60.612 171.82 61.2729 173.071 62.4522 173.435 cv
cp
f
45.7167 178.425 mo
48.3781 178.89 li
49.042 178.545 49.5207 177.881 49.5811 177.08 cv
49.6739 175.849 48.7515 174.777 47.5207 174.684 cv
46.29 174.591 45.2171 175.513 45.1243 176.744 cv
45.0756 177.389 45.31 177.985 45.7167 178.425 cv
cp
f
54.7703 176.407 mo
55.974 176.68 57.1709 175.925 57.4436 174.722 cv
57.7163 173.518 56.9616 172.321 55.7579 172.048 cv
54.5542 171.776 53.3573 172.53 53.0846 173.734 cv
52.8119 174.938 53.5666 176.135 54.7703 176.407 cv
cp
f
75.5632 162.937 mo
75.0233 164.047 75.4854 165.384 76.5952 165.924 cv
77.705 166.464 79.0424 166.002 79.5823 164.892 cv
80.1222 163.783 79.6602 162.445 78.5504 161.905 cv
77.4405 161.365 76.1031 161.827 75.5632 162.937 cv
cp
.839216 .466667 .0941176 rgb
f
75.8304 162.682 mo
75.4053 163.555 75.7691 164.608 76.6429 165.034 cv
77.5168 165.459 78.5698 165.095 78.9949 164.221 cv
79.42 163.347 79.0562 162.294 78.1824 161.869 cv
77.3085 161.444 76.2555 161.808 75.8304 162.682 cv
cp
.984314 .690196 .231373 rgb
f
76.489 162.502 mo
76.2098 163.076 76.4487 163.768 77.0228 164.047 cv
77.5969 164.326 78.2886 164.087 78.5679 163.513 cv
78.8471 162.939 78.6081 162.248 78.0341 161.968 cv
77.46 161.689 76.7683 161.928 76.489 162.502 cv
cp
1 1 1 rgb
f
68.5251 166.148 mo
67.9852 167.258 68.4473 168.595 69.5571 169.135 cv
70.667 169.675 72.0043 169.213 72.5443 168.103 cv
73.0842 166.993 72.6221 165.656 71.5123 165.116 cv
70.4024 164.576 69.065 165.038 68.5251 166.148 cv
cp
.839216 .466667 .0941176 rgb
f
68.7923 165.892 mo
68.3672 166.766 68.731 167.819 69.6049 168.244 cv
70.4787 168.669 71.5317 168.306 71.9568 167.432 cv
72.3819 166.558 72.0181 165.505 71.1443 165.08 cv
70.2704 164.655 69.2174 165.019 68.7923 165.892 cv
cp
.984314 .690196 .231373 rgb
f
69.4509 165.713 mo
69.1717 166.287 69.4107 166.979 69.9847 167.258 cv
70.5588 167.537 71.2505 167.298 71.5298 166.724 cv
71.809 166.15 71.5701 165.458 70.996 165.179 cv
70.4219 164.9 69.7302 165.139 69.4509 165.713 cv
cp
1 1 1 rgb
f
60.8219 169.677 mo
60.4579 170.857 61.1188 172.108 62.2981 172.472 cv
63.4774 172.836 64.7285 172.175 65.0925 170.995 cv
65.4565 169.816 64.7956 168.565 63.6163 168.201 cv
62.437 167.837 61.1859 168.498 60.8219 169.677 cv
cp
.839216 .466667 .0941176 rgb
f
61.0469 169.384 mo
60.7603 170.312 61.2807 171.297 62.2092 171.584 cv
63.1377 171.871 64.1228 171.35 64.4094 170.422 cv
64.696 169.493 64.1756 168.508 63.2471 168.222 cv
62.3185 167.935 61.3335 168.455 61.0469 169.384 cv
cp
.984314 .690196 .231373 rgb
f
61.6703 169.106 mo
61.482 169.716 61.8239 170.363 62.4339 170.551 cv
63.0439 170.74 63.691 170.398 63.8793 169.788 cv
64.0676 169.178 63.7257 168.531 63.1157 168.342 cv
62.5057 168.154 61.8586 168.496 61.6703 169.106 cv
cp
1 1 1 rgb
f
52.9305 172.771 mo
52.6578 173.975 53.4125 175.171 54.6162 175.444 cv
55.8199 175.717 57.0167 174.962 57.2895 173.758 cv
57.5622 172.555 56.8075 171.358 55.6038 171.085 cv
54.4001 170.812 53.2032 171.567 52.9305 172.771 cv
cp
.839216 .466667 .0941176 rgb
f
53.1324 172.461 mo
52.9177 173.409 53.5119 174.351 54.4596 174.566 cv
55.4073 174.781 56.3497 174.186 56.5644 173.239 cv
56.7792 172.291 56.185 171.349 55.2372 171.134 cv
54.2895 170.919 53.3471 171.513 53.1324 172.461 cv
cp
.984314 .690196 .231373 rgb
f
53.7328 172.136 mo
53.5917 172.759 53.982 173.378 54.6046 173.519 cv
55.2272 173.66 55.8463 173.27 55.9874 172.647 cv
56.1285 172.024 55.7381 171.405 55.1155 171.264 cv
54.4929 171.123 53.8738 171.514 53.7328 172.136 cv
cp
1 1 1 rgb
f
44.9702 175.781 mo
44.8774 177.012 45.7998 178.084 47.0305 178.177 cv
48.2612 178.27 49.3341 177.348 49.427 176.117 cv
49.5198 174.886 48.5973 173.813 47.3666 173.72 cv
46.1359 173.628 45.063 174.55 44.9702 175.781 cv
cp
.839216 .466667 .0941176 rgb
f
45.1243 175.445 mo
45.0512 176.414 45.7775 177.258 46.7465 177.332 cv
47.7155 177.405 48.5603 176.678 48.6334 175.709 cv
48.7065 174.74 47.9802 173.896 47.0112 173.822 cv
46.0422 173.749 45.1974 174.476 45.1243 175.445 cv
cp
.984314 .690196 .231373 rgb
f
45.6704 175.035 mo
45.6224 175.672 46.0995 176.227 46.7361 176.275 cv
47.3727 176.323 47.9276 175.846 47.9756 175.209 cv
48.0236 174.572 47.5465 174.017 46.9099 173.969 cv
46.2734 173.921 45.7184 174.399 45.6704 175.035 cv
cp
1 1 1 rgb
f
63.4958 176.561 mo
68.0815 174.578 72.6279 172.507 75.9995 170.869 cv
77.6831 170.046 79.0733 169.333 80.0307 168.8 cv
80.5149 168.547 80.8813 168.315 81.1328 168.162 cv
81.3842 168.009 81.5183 167.927 81.5183 167.927 cv
81.4102 167.762 li
81.4102 167.762 81.2758 167.84 81.0237 167.984 cv
80.7716 168.129 80.4068 168.348 79.917 168.589 cv
78.9529 169.095 77.548 169.771 75.8484 170.552 cv
72.4594 172.136 67.8869 174.137 63.2784 176.049 cv
60.9685 176.99 58.6586 177.931 56.4931 178.813 cv
55.5715 179.174 54.684 179.523 53.8255 179.86 cv
55.0265 180.071 li
55.5837 179.855 56.1501 179.631 56.7261 179.395 cv
58.9009 178.524 61.2068 177.562 63.4958 176.561 cv
cp
f
42.7182 170.257 mo
42.7182 170.257 43.315 170.071 44.3595 169.746 cv
44.8755 169.574 45.5021 169.365 46.2209 169.125 cv
46.939 168.879 47.7493 168.601 48.6331 168.298 cv
50.3995 167.683 52.4451 166.924 54.6441 166.127 cv
56.8377 165.316 59.1774 164.448 61.5081 163.556 cv
66.1713 161.777 70.8018 159.908 74.2353 158.42 cv
75.9568 157.686 77.3805 157.049 78.3575 156.568 cv
78.8539 156.34 79.2237 156.13 79.4791 155.991 cv
79.7346 155.852 79.8708 155.778 79.8708 155.778 cv
79.9754 155.946 li
79.9754 155.946 79.8393 156.024 79.5841 156.171 cv
79.3288 156.318 78.9568 156.542 78.4657 156.782 cv
77.4943 157.29 76.0843 157.966 74.3773 158.741 cv
70.9595 160.284 66.3532 162.223 61.7108 164.075 cv
59.3931 165.009 57.0598 165.906 54.8606 166.715 cv
52.6676 167.542 50.5879 168.226 48.8088 168.82 cv
47.0249 169.397 45.5119 169.819 44.447 170.086 cv
43.3771 170.312 42.7657 170.441 42.7657 170.441 cv
42.7182 170.257 li
cp
f
85.9861 181.163 mo
85.9047 181.114 85.8348 181.059 85.7551 181.01 cv
84.35 189.262 82.6755 196.907 80.6552 204.784 cv
85.9083 205.324 91.1203 205.273 95.575 204.998 cv
96.6881 197.48 97.1386 190.151 97.4524 183.324 cv
93.3147 183.644 89.3131 183.134 85.9861 181.163 cv
cp
.52549 .266667 .0823529 rgb
f
234.552 222.275 mo
224.105 206.811 201.984 199.896 176.3 200.012 cv
150.617 200.35 121.181 198.838 96.8631 193.233 cv
96.8056 193.983 96.7422 194.733 96.6759 195.483 cv
123.824 201.893 151.878 202.257 176.105 202.287 cv
200.332 201.907 220.732 208.882 232.571 223.029 cv
233.232 222.764 233.892 222.512 234.552 222.275 cv
cp
.984314 .690196 .231373 rgb
f
69.6161 178.605 mo
68.7868 178.774 67.9585 178.928 67.1429 179.068 cv
71.4688 184.309 78.3889 189.737 83.5757 192.372 cv
83.7367 191.617 83.8972 190.861 84.0526 190.101 cv
79.425 187.71 73.4937 183.19 69.6161 178.605 cv
cp
f
87.5425 190.602 mo
86.6346 190.303 85.1549 190.671 84.0526 190.101 cv
83.8972 190.861 83.7367 191.617 83.5757 192.372 cv
84.5907 192.888 85.5116 193.415 86.3905 193.579 cv
89.4827 194.154 92.9326 194.35 96.6759 195.483 cv
96.7422 194.729 96.8056 193.979 96.8631 193.233 cv
93.4503 192.229 90.4696 191.564 87.5425 190.602 cv
cp
.580392 .372549 .0431373 rgb
f
80.6552 204.784 mo
80.1731 206.664 79.6726 208.559 79.149 210.477 cv
79.0464 210.853 78.9502 211.222 78.846 211.6 cv
79.9815 211.838 81.1253 212.045 82.2727 212.23 cv
82.4299 212.256 82.5869 212.283 82.7443 212.307 cv
83.2353 212.383 83.7271 212.452 84.2192 212.518 cv
84.4036 212.543 84.588 212.568 84.7725 212.592 cv
85.2676 212.654 85.7632 212.713 86.2588 212.766 cv
86.4229 212.783 86.5869 212.799 86.7511 212.816 cv
87.2743 212.868 87.7976 212.918 88.3206 212.96 cv
88.3991 212.966 88.4775 212.971 88.5561 212.977 cv
90.4082 213.118 92.2569 213.193 94.0886 213.198 cv
94.286 212.295 94.4677 211.393 94.6418 210.493 cv
94.9975 208.653 95.3052 206.82 95.575 204.998 cv
91.1203 205.273 85.9083 205.324 80.6552 204.784 cv
cp
.619608 .431373 .27451 rgb
f
85.9861 181.163 mo
89.3131 183.134 93.3147 183.644 97.4524 183.324 cv
97.5274 181.693 97.5957 180.088 97.6628 178.519 cv
97.6717 178.309 97.6594 178.063 97.6349 177.799 cv
97.6345 177.799 li
97.1615 177.821 96.6921 177.832 96.2251 177.836 cv
96.1246 177.837 96.0248 177.837 95.9246 177.837 cv
95.5349 177.838 95.1481 177.833 94.7642 177.822 cv
94.6833 177.82 94.602 177.819 94.5214 177.816 cv
94.0597 177.799 93.6026 177.774 93.1516 177.738 cv
93.1138 177.735 93.0769 177.731 93.0393 177.728 cv
92.6286 177.694 92.224 177.651 91.824 177.601 cv
91.7421 177.591 91.6604 177.58 91.579 177.569 cv
90.7028 177.451 89.8557 177.292 89.0458 177.087 cv
88.9895 177.073 88.9344 177.058 88.8786 177.043 cv
88.5143 176.948 88.1578 176.843 87.8099 176.729 cv
87.7645 176.714 87.7181 176.7 87.6731 176.685 cv
87.2797 176.552 86.8965 176.409 86.5268 176.25 cv
86.2787 177.863 86.0213 179.447 85.7551 181.01 cv
85.8348 181.059 85.9047 181.114 85.9861 181.163 cv
cp
.639216 .364706 .176471 rgb
f
77.086 211.034 mo
80.5319 198.648 83.0824 187.468 85.0709 174.453 cv
85.286 173.036 88.8816 174.627 92.0556 175.05 cv
95.0168 175.443 98.2933 175.225 97.9921 177.262 cv
96.0149 190.496 93.5736 200.431 90.5783 213.175 cv
90.0441 215.448 86.3589 213.913 83.2276 213.626 cv
80.2183 213.35 76.5041 212.892 77.086 211.034 cv
cp
.909804 .160784 .141176 rgb
f
89.7534 213.455 mo
92.7515 200.407 95.1948 190.235 97.1748 176.687 cv
97.2299 176.306 97.1603 176.006 97.0001 175.761 cv
96.5375 175.577 95.9451 175.465 95.2815 175.382 cv
93.9933 184.233 92.5374 191.727 90.8808 199.423 cv
89.8683 204.127 84.9961 206.323 79.9102 209.714 cv
79.8791 209.734 79.3287 211.765 79.2387 213.043 cv
80.4155 213.344 81.8902 213.503 83.2276 213.626 cv
85.3416 213.82 87.7044 214.578 89.1834 214.354 cv
89.4593 214.158 89.658 213.87 89.7534 213.455 cv
cp
.74902 .12549 .12549 rgb
f
82.1716 209.318 mo
81.7289 210.47 82.304 211.763 83.4561 212.206 cv
84.6081 212.648 85.901 212.073 86.3437 210.921 cv
86.7863 209.769 86.2113 208.476 85.0592 208.034 cv
83.9071 207.591 82.6143 208.166 82.1716 209.318 cv
cp
84.0071 202.117 mo
83.9143 203.348 84.8367 204.421 86.0674 204.514 cv
87.2981 204.607 88.3711 203.684 88.4639 202.453 cv
88.5567 201.223 87.6342 200.15 86.4035 200.057 cv
85.1728 199.964 84.0999 200.887 84.0071 202.117 cv
cp
85.9044 194.141 mo
85.6341 195.346 86.3912 196.541 87.5955 196.811 cv
88.7997 197.082 89.9951 196.324 90.2654 195.12 cv
90.5357 193.916 89.7786 192.721 88.5744 192.45 cv
87.3701 192.18 86.1748 192.937 85.9044 194.141 cv
cp
87.295 186.757 mo
87.2021 187.988 88.1246 189.06 89.3553 189.153 cv
90.586 189.246 91.6589 188.324 91.7517 187.093 cv
91.8446 185.862 90.9221 184.789 89.6914 184.696 cv
88.4607 184.604 87.3878 185.526 87.295 186.757 cv
cp
91.1298 177.016 mo
92.3605 177.109 93.283 178.182 93.1902 179.413 cv
93.0974 180.643 92.0245 181.566 90.7937 181.473 cv
89.563 181.38 88.6406 180.307 88.7334 179.077 cv
88.8262 177.846 89.8991 176.923 91.1298 177.016 cv
cp
.709804 .117647 .117647 rgb
f
88.7719 178.075 mo
88.6791 179.306 89.6016 180.378 90.8323 180.471 cv
92.063 180.564 93.1359 179.642 93.2287 178.411 cv
93.3215 177.18 92.3991 176.107 91.1684 176.014 cv
89.9377 175.922 88.8647 176.844 88.7719 178.075 cv
cp
.839216 .466667 .0941176 rgb
f
88.9261 177.739 mo
88.853 178.708 89.5793 179.552 90.5483 179.626 cv
91.5173 179.699 92.3621 178.972 92.4352 178.003 cv
92.5082 177.034 91.7819 176.19 90.8129 176.116 cv
89.8439 176.043 88.9991 176.77 88.9261 177.739 cv
cp
.984314 .690196 .231373 rgb
f
89.4722 177.329 mo
89.4241 177.966 89.9013 178.521 90.5378 178.569 cv
91.1744 178.617 91.7294 178.139 91.7774 177.503 cv
91.8254 176.866 91.3483 176.311 90.7117 176.263 cv
90.0751 176.215 89.5202 176.693 89.4722 177.329 cv
cp
1 1 1 rgb
f
87.3335 185.755 mo
87.2407 186.986 88.1631 188.059 89.3938 188.152 cv
90.6245 188.244 91.6975 187.322 91.7903 186.091 cv
91.8831 184.86 90.9606 183.788 89.7299 183.695 cv
88.4992 183.602 87.4263 184.524 87.3335 185.755 cv
cp
.839216 .466667 .0941176 rgb
f
87.4876 185.419 mo
87.4146 186.388 88.1409 187.233 89.1099 187.306 cv
90.0789 187.379 90.9236 186.653 90.9967 185.684 cv
91.0698 184.715 90.3435 183.87 89.3745 183.797 cv
88.4055 183.724 87.5607 184.45 87.4876 185.419 cv
cp
.984314 .690196 .231373 rgb
f
88.0337 185.009 mo
87.9857 185.646 88.4628 186.201 89.0994 186.249 cv
89.736 186.297 90.2909 185.82 90.3389 185.183 cv
90.3869 184.547 89.9098 183.992 89.2732 183.944 cv
88.6367 183.896 88.0817 184.373 88.0337 185.009 cv
cp
1 1 1 rgb
f
85.943 193.14 mo
85.6727 194.344 86.4297 195.539 87.634 195.809 cv
88.8382 196.08 90.0336 195.323 90.3039 194.118 cv
90.5742 192.914 89.8171 191.719 88.6129 191.449 cv
87.4087 191.178 86.2133 191.935 85.943 193.14 cv
cp
.839216 .466667 .0941176 rgb
f
86.1442 192.829 mo
85.9314 193.778 86.5275 194.719 87.4757 194.932 cv
88.4238 195.144 89.365 194.548 89.5778 193.6 cv
89.7907 192.652 89.1946 191.711 88.2464 191.498 cv
87.2983 191.285 86.3571 191.881 86.1442 192.829 cv
cp
.984314 .690196 .231373 rgb
f
86.7439 192.503 mo
86.6041 193.126 86.9957 193.744 87.6186 193.884 cv
88.2415 194.024 88.8598 193.632 88.9996 193.01 cv
89.1394 192.387 88.7478 191.768 88.1249 191.629 cv
87.5021 191.489 86.8838 191.88 86.7439 192.503 cv
cp
1 1 1 rgb
f
84.0456 201.116 mo
83.9528 202.346 84.8753 203.419 86.106 203.512 cv
87.3367 203.605 88.4096 202.682 88.5024 201.452 cv
88.5952 200.221 87.6728 199.148 86.4421 199.055 cv
85.2114 198.962 84.1384 199.885 84.0456 201.116 cv
cp
.839216 .466667 .0941176 rgb
f
84.1998 200.779 mo
84.1267 201.748 84.853 202.593 85.822 202.666 cv
86.791 202.739 87.6358 202.013 87.7088 201.044 cv
87.7819 200.075 87.0556 199.23 86.0866 199.157 cv
85.1176 199.084 84.2728 199.81 84.1998 200.779 cv
cp
.984314 .690196 .231373 rgb
f
84.7458 200.37 mo
84.6978 201.006 85.175 201.561 85.8115 201.609 cv
86.4481 201.657 87.0031 201.18 87.0511 200.544 cv
87.0991 199.907 86.622 199.352 85.9854 199.304 cv
85.3488 199.256 84.7939 199.733 84.7458 200.37 cv
cp
1 1 1 rgb
f
82.2101 208.316 mo
81.7674 209.468 82.3425 210.761 83.4946 211.204 cv
84.6467 211.647 85.9395 211.072 86.3822 209.92 cv
86.8249 208.767 86.2498 207.475 85.0977 207.032 cv
83.9456 206.589 82.6528 207.164 82.2101 208.316 cv
cp
.839216 .466667 .0941176 rgb
f
82.4544 208.039 mo
82.1059 208.946 82.5586 209.964 83.4657 210.312 cv
84.3728 210.661 85.3907 210.208 85.7393 209.301 cv
86.0878 208.394 85.6351 207.376 84.728 207.027 cv
83.8209 206.679 82.803 207.132 82.4544 208.039 cv
cp
.984314 .690196 .231373 rgb
f
83.0952 207.803 mo
82.8662 208.399 83.1637 209.068 83.7596 209.297 cv
84.3555 209.526 85.0242 209.229 85.2531 208.633 cv
85.4821 208.037 85.1847 207.368 84.5888 207.139 cv
83.9929 206.91 83.3242 207.208 83.0952 207.803 cv
cp
1 1 1 rgb
f
86.0926 173.88 mo
85.9798 173.971 85.9072 174.098 85.8818 174.267 cv
83.882 187.501 81.3174 198.87 77.8529 211.464 cv
77.6932 211.98 77.8624 212.387 78.2447 212.715 cv
78.6799 212.899 79.2022 213.048 79.7787 213.168 cv
83.2762 199.971 85.8892 188.021 87.9622 174.173 cv
87.2319 174.005 86.5889 173.885 86.0926 173.88 cv
cp
.74902 .12549 .12549 rgb
f
96.1353 175.518 mo
96.1391 175.623 96.1367 175.732 96.1193 175.851 cv
94.0428 189.85 91.5271 200.354 88.4362 213.828 cv
88.3855 214.049 88.3002 214.226 88.1994 214.383 cv
89.4171 214.456 90.3327 214.22 90.5783 213.175 cv
93.5737 200.431 96.0149 190.496 97.9921 177.262 cv
98.1474 176.212 97.3485 175.763 96.1353 175.518 cv
cp
.984314 .690196 .231373 rgb
f
78.9651 212.851 mo
82.4932 199.704 85.1188 187.832 87.196 174.012 cv
86.0111 173.789 85.1712 173.792 85.0709 174.453 cv
83.0825 187.468 80.5319 198.648 77.0861 211.034 cv
76.7849 211.996 77.6385 212.581 78.9457 212.961 cv
78.954 212.924 78.9536 212.889 78.9651 212.851 cv
cp
f
88.7216 214.009 mo
88.7216 214.009 88.8832 213.426 89.166 212.407 cv
89.2961 211.898 89.4541 211.279 89.6353 210.569 cv
89.8101 209.856 90.0074 209.052 90.2225 208.175 cv
90.6448 206.416 91.0947 204.355 91.5936 202.15 cv
92.0782 199.941 92.5918 197.583 93.0807 195.221 cv
94.0632 190.496 94.9527 185.75 95.526 182.178 cv
95.8248 180.393 96.0448 178.902 96.16 177.855 cv
96.232 177.332 96.2517 176.921 96.2711 176.641 cv
96.2903 176.36 96.3005 176.211 96.3005 176.211 cv
96.4942 176.212 li
96.4942 176.212 96.4877 176.364 96.4756 176.648 cv
96.4632 176.933 96.4533 177.353 96.3944 177.878 cv
96.3047 178.935 96.1232 180.435 95.8672 182.23 cv
95.347 185.818 94.5287 190.581 93.6168 195.327 cv
93.1698 197.702 92.6833 200.07 92.1947 202.282 cv
91.7238 204.499 91.1931 206.549 90.7472 208.307 cv
90.2841 210.06 89.8346 211.51 89.4935 212.516 cv
89.1152 213.504 88.899 214.068 88.899 214.068 cv
88.7216 214.009 li
cp
1 1 1 rgb
f
77.2995 211.669 mo
77.2995 211.669 77.4727 211.096 77.7759 210.092 cv
77.9146 209.589 78.0829 208.98 78.276 208.28 cv
78.4615 207.577 78.6707 206.783 78.899 205.917 cv
79.3459 204.181 79.8222 202.145 80.3472 199.966 cv
80.8578 197.783 81.3982 195.453 81.9125 193.117 cv
82.9465 188.446 83.8848 183.753 84.5003 180.219 cv
84.8204 178.454 85.0586 176.978 85.191 175.943 cv
85.2702 175.425 85.2984 175.018 85.3237 174.741 cv
85.3485 174.463 85.3617 174.315 85.3617 174.315 cv
85.5553 174.321 li
85.5553 174.321 85.5458 174.471 85.5279 174.753 cv
85.5096 175.034 85.4911 175.45 85.425 175.97 cv
85.3179 177.015 85.1182 178.5 84.8407 180.276 cv
84.2782 183.826 83.411 188.538 82.4472 193.231 cv
81.9746 195.58 81.4611 197.92 80.9464 200.107 cv
80.4492 202.298 79.8921 204.322 79.4214 206.058 cv
78.9335 207.788 78.4596 209.218 78.1008 210.208 cv
77.7029 211.178 77.4755 211.732 77.4755 211.732 cv
77.2995 211.669 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (Makkuro) ()
%%Title: (christmas_0003_santa_and_deer_isolated_AM.eps)
%%CreationDate: 10/31/2015 3:11 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj]W+o)Ja[rI"$[89`cSY[gtHJ[P\J-nR"bke>E*(eDd"/3Tp*_=+f3k<"j508?n_#q*4VZlmPTAi0CDj?%QD.a<"J:d3X4
%r4S8t&kgBQ&tYg>KQ$h`5BlNX/KBH:ELkOC>dG-1)uI$80!*Y`/&b,_^67.HR4TdmAC'I22Xrs^(+Xk\2N$2C"hg,REK;o0@[O.E
%9%c[#,qX#AO87nhFaArM^sCg(*Uf5kkqHp1BH8ofc[2n0d5`N(L-H%f&&PY>]hus2$C12FqrjL&;0qHDYaX)QBX!bTTK`hV0Tci@
%ZcurHc^AJ@U)t?K',]_;@]tZT3kqM),/Ja[o1/g-r)Q2WB1_%]m;DkeiFeR_'98YsIm8oQV!^L(G$K>EbmU7a!jjNJ,([S*YZ*2d
%)^4[9m9<.@Z"++7Vt67R1[P3e>dCK-n'g->?;`&]5lW/^4)%:8\%U&FO$`Wn9&aQPc%e0_S#KTOYjam22,K#P/^o*o/;CRaj[+UH
%VRS5))tBYc%uUR&qt3W;b?N^%-3%h.*+`nu@=uY+;J]ea<YE+]4aYj5m:Lj&TK6L.frKkhUWON^k`U%>K]?KfUf%NV%AJ9F+*];?
%RqW)FgNYXqe\f]!'++*W$>5(`b*&QKp!!?jnTM$rD\K#r'>FI(f:V[srX5J#bVBLg7O'HSlPB&9o0inP>KI\:R!Pg'hlN&mrAoD`
%+9F20m2%9ck%X]/IRZ[]Ws0>W3.>#((CF^^r87OeeBe'QrF1s3DV$A_l;%/^o&'HuV"0e70_$L62(CK;c[93jj;\&<5I&!TQoM*W
%F#4+"hWg<K(97,L$qP?g_M!A1n+*[0^N&*XrZk@g*^I2PQ%+J+9!r/:h(R'0qo*A3>>+I<eptAd+7pgOG\RbGNa^sRX>,Q6We;-/
%L&:M$5GCNcUG5]t)pLisR+Zu&9s5R<ZT1?jTie*tLpMsBilT)CX`+m\YIfL/hb(C1>AO.:WEioho3o'ZX5aV7GS)iSkInd%emB;>
%5MJ.F*>4\0obL0mYO1_o(@&=f,Aq*"@qW2cot6AZCt+pHo>FM&;J_=Vi-B+8c=d%\DoMpT&_>*OAIVH8XJSARKHqi94&\7Gl`EH/
%dDK+U,sogV^-Ij!#Y0sBF8/h&BR[F0&rRS;J!NhZ`Bq8f)SNIgT/`a1.u&gDl]!TaLc`iNiWeA?qb[_sVYO+lqW"od]R.8ojk\ZX
%Sp((:OY'S.hr70gm/:Xl9X6BmfISkr2M5('<S4d;_t.\%A2He>&)0I_a/!3,Fm.9%=R@RhrUB=$2G(F`/>_IZc\WD5mG3]VQXg<j
%cfmb+<_^$rF3LE0`5:E.@[S8i&Jb[n64QT)7I$8?eZul:Ep&-c^)!$FLJ08fOD8Po`*\Lr!1P#^#g9f#5I#T,K9jip48m59S#4e_
%=?&B\%-^j=Q?5&h6.BmoWknK='GLWfdr/."_u\ug(h!8)h&uWS!Q*1)JP]cZ\AKC0&()i44*s4I@-d)@.4A+Va/NP@4F8X!K3-.7
%J-qh_j/mR[A7D<:4!>EKS.!Bt6GGAn)m-q(!g"B48%DdVb;HRi_Di7afm-ILPq.WL!ng`:6*#&k6p9PFf%#+V@P_`/irM6`f#(05
%r8&\sN?^i<qG.GXYh+-XC14eYN+6lr*FfGG@;?XRei[9uLI^BX7`Urf@t':oV,/3[9"IDTH;0:.i,">SUJ_P:=n:?W^s_X3.=_mY
%buuaTefff.>81k.-I+:2K@SX*Mnq#qBGG?/NF0JA3]p-<c<[t0"D@/F9bReR=)OI33G7d&S^t+-W"`T>$ME`Ebf/5b\MH0Mc<Q<q
%b1r>Qqf6abDXP]mICZmA#Ns.<?G9YqE+[%T>E[URRu7NiPl#O_l"l#;_W'O"2IH8qT"9dn%(h#(=1q;.X&Erte)?>hfBpRu#WfRn
%$EfS%F-rhn@B4Z8gT9!7g%*.%kbd*PN^7RY3+>$86+J$AL,`'o5=)OqO$0@HH<!^9lX=9+2p<tZmkJW7alPsY_PlV?nH"ffcA29K
%?$bXG0huQ3oUD5A*<VI>QtmJD[EV=ShT2#C&7,;d'8+Vg&)c$reOhj7'S,RP-3[e9ZB'=<G+-[0LUh4`MX9UlQg)6f"peeD3K0d5
%!J*FOdZjZ#qVQOFr%A7(r\m,efSp'RZodq)hIa]MlR-CVlrOPU`brEpfA`E,`hCch]>e`U8YbI3EIiCI?tpG">X_C[*aLDA0l7OG
%L1bH;L[?`AaRq8egVkj+]3l1Km@dh<EF?#KHQRtGU:O`OAjB&7J2YX&$B=XTfSG_iSggf:#P7$jMENilU4Kjqr$CE"Rr5o5Uj#jS
%3aRKIZOiLo8S]\;UKu4EpnOmW=8C(@Hj50IY#CUH)ZuC?NsE\!Y:2-qq:?V?fW8&0)mqBt?]9*fFg#9faV\[ACY=*/)/"`"Ng&2P
%Hi]T*>ta)A\s/Z&JDht1fsJWe]B.'TZSsDBl8``BN1m&EcjcD$Z)JOLf0OZ[Td*[g$Hl\!rBoGZFf6V"%dY2\B/D^J4b6NMIu;'T
%\-hpJ*fQ.K=jt[^1$V!dVu$p>;f]H6L5A-iVu'9LGV:kJG[^Y/.uIuZ0.9B1#YK$,B?TD@GSh4lP65f6e:"MoMUW,FA.C4&?iMX?
%Jo=b>;Pte$HTGTP`tIA;L$:5j\e_0h8IVnn*GlGlQs%fpksE'ebiV6>MWR@93g2%kPbm>JU^h%SdqO:9.ae!ckk]9]_#.[^CHLf@
%eJpI>1+l$iD0BIF">1Ph;_h*tT59aRQu;^8CG2QU45uc:T#pjn@RP?NL[/FMF5>#<:1KUSSFS&]i`%$8-b#f;0^[bckD=8VMs`GO
%0T(R)R#Osn9b(eG+/4\p:V5qgJ1=XC0uto8b;Dr;&]siDTK5/1$ES(6YO'RPA4Nr.OfcTeMRqsbl`S]?V%cE<E4:]"(,<8Z,Wpur
%9:1/A'5TDY]h08WY;/*T@b<c5JfpN[,qjb\/ElLd.3NCL`tr4#Qd6K;Z.(b+[CT,_ZcJF?V-%b`nP?:F)I1LpjNf>RVSYXB?)L;Z
%35Ea1pgRQd1/7;l=Hk]1]H679[<X3YJSe"O;6KFj"*<(n(*sGEZ_Dd.[3u.NAR:;c:Vdjb240M0PZU7\qJ/s2L%1A=::2KiJ=.-h
%1Ts6811+Zf!Qt):7>\u\;_R16;_:T]?tMjIc$Cs6XM(!Em^TF-.(SYCM\68^=lK57RAH=jR[R?*GmUH)ah=53bO]1CGg1GAp+E81
%SW3E>X-hrTY1<K)WL`'+h[+?dJI'0#+X9b#BR\FV`%N[RFrt)*j=N0/\TSk$VWMnN"q'L5D(aH&Ec!/ag/a2:k2tCj1=nj/l<L@6
%V:r[gWm-O2CLsTlV:o1SrMubuB1D*0!r;4t6V.\#r+\iIV@nE#2S)!iH#km$JV#m$c.T%RAm?kF`[Kco5TdqEiTo\h.;S9Wo4aos
%_V\dA^R4tF4Fo;LdmhNgYZ)KdKRD?'D^gqBiG"uJr55"0AR3h?gITArb,(m%Ud,T5Y+h;7MeVHV>YR!qPki9To8@>^!(b`*6C2]S
%`V_'IJY7/BKJFE:Se.sN8dLd_[M&5i.fE'@Y0qs@T/dZB3=k1+2nhtTBlq&&l1Y]J\s',>NV0"8R47-V#L:)hN.3``'N9K*H)RC)
%eLXTlNgY(dS?%mSPrcIYHd,u>l5/R8,R)"r"PlaDJJ`C$M`?ZF0gWO7&[8nb#%n_\@Y1Iu$lF_a13LE@:\R$]bO'Ggi(OW893T>6
%Y7n7M6K>]m2WC\1RF7(];^sT",QH-PMq:9ec=/!WP']8H`Ba$YIe3L+4T@L6q;2K`4?.2b4O=&Qo=t;N*:j])bk&U@r9s(SAY/pm
%c295!O2q;oCGht83R@LrBk2#%j!F;eml]bpchUo$e;d1*LG?!\mclqa,5W5nMj;&sK2sOnSN!Lb;@XL]`dk5dKo((G1&Rf`l"RIF
%DH=njL6gkUL;#SnAi7L<jiuL.R7hP!ZFg!ubJ%]B["_>YO]%&Gd6'bHo#Kl)Z:W4=q58T&&[H\8C`Xbci1q3elo[s"&@@:LagAgg
%H<(Ekng[e!i@=)p_HCIC8"ifh)lpA#^KRUJb<tmToD$uaPcu5SS=0=_U"!leqs7],)+Hb:7>32q3+7quM]"bFkW@`W9tJ+]m4Mr1
%6u,`Lg<nP1_Kn,^4pIG)X'q%4Q.dOY&,i\*cFAlFi7?dcZM#mS@/H52.FDRAm'VY/c,3%M*BoAU@%q9uVG4#7"#'8]b<58L&%p*g
%0D!!&4Rho;C+=m>FPt,+@6"6A&%kTB#<EC.>U&Ym3N77Ol?oHUJ95IpVjWPf?+2&dfC#)a9=a9XJAWWYdqiAL&a+arBtnI.c:&2k
%Ib@,ZI@+A"0hm@8e#sLim6q\<n5CAAZIKokftu)Uem(41Z!s,EjZ(#3Bs&F'jH[q(jRaseRF.#c)jme[%8<,@fD4f,o@oTY7Ag*R
%H\r<ZZh_aNo8hC+[o<)WDOm5gb+BT9@-3NVa7rJAI[CQ2Wm1BeEhjETL)=9%j\F:L*`F`*.]93;YQ8X?L&%)[H.I4hO(%rFq>aUM
%h<X;69\[itf8jLh4g]"fTaBJb1S-qZ_g%G6XcAUnGf#:>c<l9QXNETQDc4A%#r`&BEU:LJRY1-\LgpukclW+o`A-MA/RPhDL76.;
%B#pm<q)F+Y%H84E@$nthVUj4e24gG\1$3J7C"o&$*+L&1R#sAJ^W/]WA7JVE?$H>8[$JroZGi/q6C`@CrSCY(["b1Y8@dV_bqlcZ
%/!ZU#4kdOjZ&TcIG+KCEjiV#,d)ZZS)0U;Qk]]uS`e(=npS<>GOtgho3m#sj9J-2!%*Q1@?;FAsM6U$=8Cl!io,J"&lRqno(Ce>-
%e;7Nh1r![:(d.D:LAh`dfC>H+33)e]<[l!"FkghSOMpq0;54cE7^#JqME"Y`r2uiHTQT+V1qDPjAZcL=;h:R9B'lBs,RU"%T]#bA
%P9I/(rqKYJ2do0B[?iu92%Pq3V[d-@YC`r[i64a.<ub&6]\G"I#kMN/kt!,-%?][ZkPtQNOep&WZY\4@#r)chk(.aZgQVj#Xm6p_
%#CBakWh$[Rf;AZ3^>(ru203\Rm`j"i\[aXXpZD<<pc!M?0s&I^m`f%TnurrI/'Rt&l14"HCt[U7S%E`_GAcioc/#q@41??flfHF2
%!bY!X\Ku5)*4gA[b[%gEE9Z4[.f$DS2NA]gmf)!aqe/8(cX;2F_rQk``&p:L,G0OVq0OFMpLDM;Q'fC7,pioQoatNFkCSZ7"J^lc
%aQX3dYFH<5\Vo!kDQ6[B\O,?>8utQl^%&EG-VA7P9oA@JIRe]rpa@IOZbf0L&Dg*$dFIZAR0PaMQ!rh+_$$T<SM,<E]O%o2g4(bO
%;pA`')p8fVl9-R_qs-Aqnb/^Q+SaA5l-TfBmgG>20?1/_YG,o8b5<"J35/\e)j>k+7O:X>=Zamj_RN"eh0n_,rXp'Q^UH9\H7Ah0
%KWf[:>M(ZT0DiLNW>R43f'58pNE%_$KaNb1>Kh&18)Hmh`%#F%GOkY\o-msQD6k07]=dnd(W&LHf;SK1C<]0hKY<%Id/V8,m%,'l
%*3FDMmqS[=?4+LA.s&UNDVG$s9tO&H/c&8n=\bMaSJt!R@2-t'U>N\H6R*+Rg*iC+-r5-Tr_cp4Y!_Bgm]15"%)mE&L]&kQaSdhu
%]Sg3H\mQ)5K-AN(%(dLV$O1sh@2N$Pd05.Y3>gbr4f;X;Ao!+?Gq"^FR=^jTNn:B=\QEP3B+%)e13;P:`JS6\Q"(f-4RL9Gc9BI;
%j-86eEs4Q3$>$@ZB4!UC@K^uUZ,(-3HN&liR%=3NUT9bRMR\Cbpft#+MU0'12JZA,?0</=a'RUY_`$8.?VFGAdVpqDBp]2E/eXKG
%1[(`;bBR^ra#Ke<l8T0A2>'RWS)1</W+_W..Da&M?B!mOknXrab<!5;=+'rA'605sTp`Y?A*H$ZP-G_=9V)#a1B(OCBd2L%rBoaV
%-cu<CI*'<,[V#eb-.f<<mLo6Ve;FI*&jUG,fCCiXfe+JYgtk^fWJNU,6Cpbq\oXWUS0ja`/t.'<qRR""GGek$;lEDEr\87OgrQ)*
%g"i'P:<Gt`U^RA'->rU`X7q:D8Z#Y9*R(;r\P>PYoFb3a\s(h@SBN<SB&`XpZ]0eWLTl\hF7r,3Cq5!5k=Z.\8Fr1NbF_9fVVCU1
%#s2<hh./,%H0AbbmVp9PW`Yd<3*2s.H&:XT.C&e</%FY1ORAofKQXq-cF5ul`,.,qNaGi0q_SXe;6sfe2o;mf\b!pms7<P=c[>\-
%^Y#?sp\;WW[%LC4EY9]WC<cU#i^L;G4UZ%^]iq#Y3::3A5MaO!MhNshcqW,e8u9$kIlDH3"!0,Q:F+2:#`.p1quP0!X:GjN>N'u_
%*>4P8Dd!!Fa.M8(r]i\@eJa4Q&\Lm:pq0l-X3A>0.2PnD8i\&"l,1Ym8T^\pQ:0/^YgmNWF[<@(DgsZ\@IlTc-ms,'N$1AMZ#'7f
%%Y!fLOj.0:rj=_lD.Msd>h;r_b!e;d--<n9pM-Ss@ZNc$S5^C3@BMr8RHLKZUHqUEg"3j.s8A"DGXaoGUUIpND\Fc:+$Wtdr.!ti
%!?T\(H&N7D9FsuQFH"aZ:RW:$R98=lef"YLg*h^;r"r[tL4MkY#!p60Tk!?S+bm1J1`2^IEkY[i$j34#jkiH=f]un]*!U($DNF:P
%'M:BW8m"YHn:g8Y&$GJONt@be/EqF$rSU>pE='l],m%YOO/('dGaATV00qt"Q\JZoidDqO2Fn*"(1,V1XWLts0;$#QP]_C^U3F'F
%%Wb>q7R)hq=ZB)ibIQ,o9C9:>^:_t(IH<^(H`eZb!$^,uDW!i:qn@1BaJL%qZq/@M,ilKI[O:6)HS2[T9kZV0Tfj4GF.n!cTrhS?
%G9F;iF9C1EIc/nfa2U(:bD*E?"o)/fIt]*MRHJXZ4dXj:,.#g)B$Y&^>\7>LAkV#Z%V3$.GdbI"8m7g),<Xrkf7JS@Of5_XaGluS
%$gkL$4dXm;,dd_/QeHM[4dXlhQeKRoSqjP+)`WDn;VSK>"f^l[=)s[tN$@M+I)H/sV5"!8F.k`5g:no?mCCT8$gkLO^-X0pnV)Q[
%G$W^?&/>L&'%.?9Q>hQCb!`h'bq4(]>\_T]p9.#(G:p;d;L:%(0/'^b+`*JSCLLF>ZM519;NVOKb47OOXW5Z-""kR])qf:PrQF3S
%Ru?UC\=SWE.u7u(`th0,KOeRsqOT&T/Zg7eRekZg`HGXG@%Me:9C#rIf!^qbf5kXhQe#6#es7Ub&DN66po)X74Yj@'ESVk98XA,J
%p?]?"Sr;p8M!L,OSo#5^T0&nB@A-XP[\^C/91)j6s(H-L*MFBOnhC.u:n/_2SgCr>PUKKk&OE9H7@k\I:]@dh(Bf+RBWIZl3$:'W
%UsXY"(cE;+#%RZYrjin0*mjfW7ZD=jqL"ninEteA>k`mNrb"Gcs)#,Ee!flK#G-*Qd&rAm#?c8]iqY'4l%b$Y9.,uKLAHCj8*bJ)
%LWs3BSZ_%BV6J`GB,a5NGE/#b#1*g.m5cXf%3;?;#<X&V-BgL":1aE'_u-B7L)lkuF$0$_l^d'i]B/nZO)1r43qhVbFiK'=2bCAW
%;t'^.k#"QJkP4Ybe?;ur?%c]Pils!1\h6_]J1$%kSeaHfIWk!L1ijKl?8=>l!:B.P4,MtKOYZKTnX\]bW$pThPZXFfB;[+P#aZ>7
%.mN$O"n\>qJd7gVB"_%j9nE*:UEmEKcbeOj%OF;t:T=?sh].Zk<qr:nch1c/qWV?c5i4@?am6o4meV`Z8!;nW&8$hF+?g;DBBQPP
%YLRbF7(9)6_tI.Th\c'hWc$0Wc`)G24BuC2:nVHn&pT_,2'/Quh^dUgr1"C]6km*K$I;;?5t8h2GhUfN(!ag+)8qHtIq`Za#8W9p
%QD=tC1oJ6A+MBZJlR7IHCn<2YhlrL+QPX]nDo*a(BWe*h2n@A!^0*g<-V.c`NKZuCQ;?T2!MtHCS@#1,6i4hCm&Uu2+<T@KeoI"/
%Z@0@82$sS*B$3EEou"ZHqUdX4,=H"U(=pCWO"bPfrnU+]jU7(78YK7"6pa>QY3c^k?ZaLV[VI6qZD1n3=%QH!21,jp3Yh4BH@*24
%8*rQi9;6;<__;U`nYUpCqBVdO/L"OR,U;Wj1stNpp8Am<V/6+I[+QptWg_2qHSJa.<Z8Y)B8_HRdkJ1n82V?O`'Lig#]"9jXffp*
%W%_)I=,P[#8?dggMs0UM,c]O4=<l%TR`5"!oKu-]-s(F*Q"G[<?"m@:pkV#@,)Tq-2lhcDNS=`^1^Ogi,LI+4BOMr4GnJWR>EJAY
%&dKRGd-P(>qh;^qUIn/so87KjAC/*$h/)ngR6:okqitn(So/j6J>(Oc&D`D..b2h"DY.n[=?4J=&&N(f=DojihlQ3^=Kmssm0:#^
%>52H[h!(Ka"^Pq[.o5riZ(k5FZRhc2b8N3:S,8#?m$BA4VS'BnhV4CoS,7+7??ukEI]A%ab2l6JO^$^gGpk9MM2hEL0461R^+1ee
%npDTN6=S]dEZN[4n"h/[h`R/$mCN6_mNSb2IRkI!PKHl.a9Y<B#i"h*\bM6p?Cqm!HTcJ!Nak()?keW'?XWb^E\t"qfB9#_QhLE0
%)G)`'%V;8i'Ctp[KUr+&?mX_$YrW#r&K@,6<AP$5P1U4nKZ*u_a\&)3A.6SW@\FbglC:t;7-B/@P/K*rcs3Ai1<j8_&dN?l)Ru$'
%%N&PqN1V[\$40m2[N9K5%8r:MD"(Z'A"VnaL0S5n9q(Ab8n[JY7Yg4^]IsYgY0Qt[ghk.SL;g(D#/RlTa^pBl^NJruf^<VLVS*7N
%46`o^S^3?.hndeE"lfe+i&uZJgAaoAeQ@8Rr?)YC1R$20ncqEM@Q.@><(W?"$MQL4&n`>o!JX50/(M^OWVd$;<@#W=MKQHcle@'<
%^9$i!k?U[5LuO`Trl-^]$,r!]kYR!GHZXG42i>_i*fHB?&mBq.7<d4a__N7[\!er^q\@<E=&I5'*E<>qgHDY>6WU6Fdr31;k[`h8
%fHP9u[Z'FO[r5p?_08:&(tu;Hr$$*LhQWT*&t'!H,4T<X\)i\=h5F:WD!WF41V.e4@k#,D8;iGpY<CW2Z4WpqR)p^NIO<K#&eVMp
%,_u-;""^W.ZKt$>n6TB+*&1R7I->J'E4u5HBS!e#aZlNK\&o!h9YGCGm^-QeOIjZF-cQ613@=L%S/.!qU245XD#L0V-tW;#j5/YK
%qp>ppZ'HrK[H"JD\Or9u]`IS1'HH>j&q).HD!kb3k?:&PW>.tCoJd!VH_-BW5-NK8f=$58G2o(+#MAVG';$R@;kWCIUW&B`]C?,k
%>,.)EpgX`.oj"nlq`-uRkt\d0I3^CCVZs]TSK?Gq-u$SVfkLq;R#[pAW1K8,P$o53H_b=E[sG)aBc$kl2_Dm.(h5s@UA.3Od:T)J
%F9`.6oHgIIl`!Ai%:8<+XGq4jEj\M^>b<K;f0];?19OudUQ0$S]J+>$ZF0P-%;^Y_@^&e_`9?$UoXV*A4*R]n_&<j?9A/#f]k8WG
%HFHrgUN>Tj#4^)T\WP)Pa%/GNWEMBcPXgTpoW'oH>!-L0g9!Deg\*9)RNqLd8HD<<W(jHCbMcS>`qnn*0ODjFXcK/!F<oC8*]$ts
%@(^:`^qk&O3nDW`q61Wp_A7HO%2dB%>$i3j"39`ljpdLPIohii<]r*S:q'W107)Xgl$Cq4F\##t*]s;(6$qASW'/0U>tO"7SeZ\u
%]89f[ISe?_2)e.eE0'jomH5Pdjp5IPHISEa-F^b8$]VC0W!a\SK_[s@e.FPWk-E>NA'C3A^/g;g?F\a(Z^_t'=h9geh-/;cG\,Yh
%Mh&_?DIZt4>cH35>'QT#9IAVN-]-)?[R!sfVhN$tHi'H'-[s-FY$HmC^eRgJd"Y@E3,+*;.$EYR[*P0kr>]OR[<kpmk@&3q=.#Q4
%3ZZ.'j7Gj.lOcM,GP*%+;S.[%f#)SUa3fOBTJn5<:fa*DhFr$H*EirfgCE`@(]Fo&qdJkKbk5Fj2d:3r9L<,7h&eQ]''2_I9TUZe
%3RhHN;\Oq+&E-6WG/hM84!I@Slm&m%lBW<Y_$hB)'7l3='DOO()Yi7)HR8l<fG+e#L35Rm91Z7W3mi@tN.(M]NmVZb8TW;.GHWs>
%1+lfegd-h'2WXS&NH;cE;opr;or=.7YLUMtIg9LD?(u-5U/3.#WI-FtTD&)<`KAT(45po!*KZ4!0S4a-00H;*m#\L+aU.",;C&^E
%%nDdoGFf>Y8!'7kf6IcZktWt4ac+kF:Al[_:[!]5%HK4P,H%=DGe99d_t?`7bB];:lBRVT#$1BI/lk58L#:msBR_M3CG*<o92DEl
%M_j+a'49e[RQJJtP?f9a\).q\UuaW6l-+,mqF>KYE/h"j[;<63Y,=N\:,-RlrN@@Pi4^d8MpYV(M@8NCC,tRK+`\qLi_:To.q7#'
%F5jf"[MC2\?RJO+1I8*u'-$V_?ftiX;:#4A;R>HfY^W5%Mf94(,*B"fU&Ik"c-sh`-53TK4>?_>fC*hkr3OgF</KcNQ#_K;"eP3=
%oUohV<*(L6pC\Jc^6kRM>6C)rr^<N5JT>1n^fiL_-t`.!5ER1f4Xq4f3\=RVa,4QH468<>kLtRQRE^+Ij(&9<.];Y;($^Wfq#Z>E
%P!^WLU'_f!="@7jR5A2RGVI,JD:=Vjf8/Ntlo7SY(U/I"04Ud+:`A6iBOieAlFKdh]e_^@&Tp7:'hY#I*eF_go3m8^%]Q;WX5.WJ
%&I*T2;=><dE[>p9X-C[6r2ZoWXS]uj.#<itgd/>PR_Ukg<F):r#Y4`kQcMm\_N?HF5Q\(Cf[oNkUu6]U(uf2C2Wu2+?7Eg+C*fk2
%`o6MU\[>X/U2IYtn?t-e5FUsrX>nF.(r*_>;/&fCXtGZlAaeibnJ[+4fu>(r9mCd:/=i$3KjqF^C=Gnam*Eq"E2E_]UR,Ug(]JeB
%g.Q=I.];N]l_CV/eNn,4bWq6+1_[_Q#<(k\fH,aW6(HSYM8<&W+k/HnT'7R!QmFoc\'NP6N,i'*lCV!O)$67[r*P`C`Psn+2-0*q
%1D3bSF;n4A8FWHN.]qXfjVHVpBL`Yg&P,"F*(e7YWjkGfW+Fkn8i<t;dD5jY(sUFi+ANkM?eFA].u9SS".,0n4*d"XL!rB3Qb;+&
%`A]ul1"B"J;@ZQ7"-D&'?qr6r0P$MZB]<!o<]S8[G-aEN>5_&aC>1eE!UZ"1I?;J%fKP!0c0UH:j<K!2YcAs(Y.3\O9TSfioSZ3[
%<Ne,>-1V1@di<M-)b5M_MWo\(SA6/H,Y$L6LWpM!F/@YOJ<V.<RHZQEWG>S+0oGhU)(g"i>7P:aTV/cGlEHfGYb.[5_.!%-pk%;*
%!eHL!$,(F]BD6Z!eSMd]2&bXC%mgQtOMuMjRB&/KNb9'ifdU8RE3d5/`maYU1t]mM<nQZ9pI69t<DF0RqGCm]a7FnC;QT;(*LjdU
%;2>3D*H(<3phlONan(K*GFU%-G<\8rHi*$`CA-KC1]-Usd`-TM]6(c-<ke)TF(94KhI[q#XP['^T5LW4/*jCJ+2;cdXR(DIpL:he
%b^#U.q80lk*9WW!e^NF(B8b@.p!k_;#O?/`ebXUj\Ql"GelR'6e=p9q)B3<b?gY#"3T8q/iR-[j3gmX)ei22ur]O!>V)*<r]FWbV
%oXE-ccA/78<2m0-Vd4215CBPM2)At0p=kRF`HuN;Re3TPlt#$f\%U_LHh6O_Vps++o$-Z,48Z.-?=1=cHsU0Z-VG!!Mg(VXL$ede
%9uHbKHmN3b55kE1gF03@hlWDdS2W@P]aphF,@Bo:F(4n@qV%-[DtQB&kkaG.ZS*'il0e<<:4DBG`fgAhG3X&2<`q*8>rLT9BnC72
%%s(r8pXR.C\T>EpQF^S`ICSffna"*cc$QWMRpkp)j#>;%SZh0rfaI^WGdqn-H`j7^eoK?B'lJM,.=?E,h^I?,Ec7rNn5D-NH[,9H
%!4]eXqX!"7C"2F;cg.QNmU#/:UDKuS?Koq6K'+`;:[M+5[j)r#XGGGh\b*6))oA+h0D+,T<dpmL\X]Kj(,$^\/1lSq7;or:@<fP6
%B74i6mFL$o`PBGm+mGPYlIKH`Zh!5:g7/#\'mXic1QVFCI"st5X<-06[X;%meZ1H%om#NV^038pqBismM9iY;UmJE'G;D0!I]-Zn
%Ka1t0'^e<:==6%O*<,'Yj33tfC$k<=F5;=eEU0YH9tlrU7)A>nLQ<Nq/^!^LZU\W#[u]*@oA<l'iSA=PR)[n8E2.-Gf>b/J&jEdk
%+;Q"=TNC>rRsSWiIE^n%\*&UC5,`D1e5?(s_t<3aoC#o:m(M-mlK%W=[AW9La/Pj*>U-Y+480qA,]/W.b5;,9(;5t4Yk@GMP@b1q
%RWuHCoufdN1r#EZ4cMAeI3j;f\<U]kd^\!-%j0\4IB.Pu,L\JRa5Z'I%HlQRb^-C7rn:M#nb*:XP4'0$MK\L*ikpaJn>-qjh4Std
%5!kOk>RX'MX?M$]>f`_!@`*NSY0^P1<^@8g=IiFB=-"7Y;b,.Pc$jL&lt-LfUYUE$]7IC8aL(EX6E1i%c%@._/DRAah`OsF+1=qG
%[0Ps#<a2rJrC<ojQ"Z,`d':3R3drECk15j4B#(^uPNeWV?IhXJ]rV.kpX8Z_hNs3<REa2n^*TACj>3;$dX.:U"86/MUSo6ID%Ecf
%]8o-l4?^:KW+Q]!%BUl195e1m$#-PDCCiD4Fh7.Pd_FYqIQ@7=Z*@TJGnL5j=.P[@3*G(:=&([^on$Z#\b'lKhS6JiZjkW%\8o&H
%4FM/j7/#X!ULt[?7C/S6,+3&ldlY/P[N!9_;X3c;Zh/:sd6^;5E-guP8fbUDS?9Odg<!s8r)`?#R^Iq%eu'9QW`tCHQSNV`Xh:Eg
%D['FVMskkb)449Y=Y6N>I_<-_ZLZDVe3UA9TX3OVlr+ONpDiY[r'<+2r;C&lVWj3+;2=3),Ob'Wk3hsgdA9/NgeFE<mX==t#mZmB
%nbjEi$j[0tE_*:nT(G.)8,sY_\hm4'lOQOgDHF7^O)g9eOg!USMncn&nF7`7o@)4Jid,mV:jA61E&Z/*./j)>e"t:BQ@#6r1,NVS
%b.@W#MtK.N`Fi3aqt75=W1O$bnA&1VF0b0"5CIMo:;4A9flqAihNIVOJ(YOjS%J"]kqQ&HG[uLU.o4+C_WI%_gLH\Lq^('`g[OM5
%,ig;eahOjn?24h'+7\[!))fmNTnc7B/S.%g.=E>"5?,,=AIT7jrR$dGc*`+/0A?TnBeWui)!e<c5An0>b$D6AI9mR?!mo:Z.D6Q`
%WaWoQJ=n-oXn$/mBm>SC/7HqYB'!AEUg_?^DM7RRX*Dd;4DA;(GK/o),0OW"Y?FIVA<aO"=mLa<]n;A9mVhI:kh-92VIq^W9>FVU
%E!CtmeW#\]$s3=-*i_*jG'afX:%sB+*^k5t[m_s=IqlfrB5RZ`-uC)P`1RQ]hJL*ZVO(W32:)cNf-:_TF&7OP7r>3PH#F7#HWZT2
%Bqb&o&#:eaXE9NnUjG+km<AA?c`GONZl-*#DS!:MELV3`1Q[_;^bVsm-187\LaH+(9nmZ0j2ON3a!*tc%:^D(!*lr:Ilp7?12nfd
%]c8ctSf"9*[:\>s*[kCNhrC@$(:7KBe=5MJM=YYo;1q68S2rVmHVOe.o4j?c80,Bh?I#V[EC&&ihq:1?[($LD_d[>o]!I\_DB(fA
%?a]TG4PY8SmV/KOQ>Up!(`eo/Y8c$F%g3?V5oV\WPok0/D^$<Zk4sbC7lK?)O$h_TDtV"c-=pQ>I`>\\2b4J4I@t<Patq5q>$=%2
%da+P5G<2YT3"Ajljho]L_o>Gclf%:&6MJr<Aj*Y&NI6b=qec($c`m$2k^.&_F(:go)e4#U\o:#S.]fso=?A&FD`.:c+Q\#tG*%/R
%Hgl1)!%I[,kFL,o\$'1,S$frDF0T$.$Z!a/gf5;hb!.1VY!mB<CGFPH@$;gU/MNXV^&B!8:S5A$+"eB'5E\UOomKaXj0lVrEO<23
%e5`5W3k_@JT`R4@LqcUMA^]Jm*cDh.WTD[Zd[`0LI3/_]bN#dtGEB"9F\?SXa]Q'.`R!qF5gX,MlfEAi#HbeXj7M$Qr?loG=8([X
%AAITggH9u\IWN'hpsFuPYAR<^\LJC`rQ.af>D>i;gkYj+]EL-mI1&o,>tt3N7QXX+bicM5=He*$&,)V2iHV`cK5TS>A#[:5pjA8j
%b!4*t4anBH\)2P1jL&nt95ZgEHH1GVj8Pqt+3%.2<]'?u=6\2c&%>,FB@?@"IS7!k]<b<?JJM^%f'ZiQj"E(Wjn"+/RB:N$X1T+1
%r.kL,(2kjUoY'&JZ]/&`lNGK0dRt5ZBYM6FHM-ju9dY9Q+$F;dI-%Nm>r5@NXki.fe[?j])k<!30!I:(kFZXn4FFeiHlUPck9OnS
%o(g;EMhbj<n"7%VG6Lj30,k_ud>djP<kuLSad7l#FNR6!r'NOu!iL"Qm([m^@mI`oAE%@pe\`bQZJVDpNkG&8kO3>PMg9cHHgn_u
%iHG2>mEMDp>^q/Hi-jNXGdPh^+UIP$+$c\d3NkAeVh8%r@VM8a=W6>!^3*Zq-gRh:mj1&IC=4]j>WlrlInLfqcG$1o<f0r?e%/8s
%H+MLge\.Xd`7'U3b3:Uk&Zr3+&K>qS(6aaFXrue=::?rjh+aM$iSdlsmT9eJp^@:r\\DKVc(s/+o&8X'T-*\9)'^'H1%&oa)fP'a
%T/0*E2ilLqAib4!?Wpf^q<aoQZ]<P[9R5)T'8ZjYWo#=\o^]WEoa%Dg_WCCYb?(@DDH=6;IUpC]gIEkQ^YC7)4bd/+1.PY3)gb<V
%"/5Ub^@guH3pfaPD<_3hWS=nrqs,bN^DBpHT:VRTYIr&#%]/9rG4C1u`1`mDf,!8EV`]3Z4uZcL"`icF3SM@]X6Hk"\'$[a]!^kZ
%6CUY55C.=U4hp`g\9gW4n&at!A#oMfI<q,IJ9Yk7ntMOmf2Ed#Er3iQ4][f(AtIhh+R'g"o]jUQhkZ9Uf>3Na;ZH=>(=m7o5r5ou
%Yl&dCnARVg?%;_OHdcErB`7R:RHS8W!LYO3?>#:"c^/ukQ&i\HBW'0oXFG__$el2r?d4gb;E[[1Vf*>F)f7Ct[%lC5QSJr6i-s!.
%EO*2$gLITi/f+D+Bqne9:5NX:5,cLPHgfQfX+BI>cLg/1Trt!eWq'P20CH-/c_#URn+'m9D$;$LAMunuOZH*I`CA7ij]ccqHXV>6
%mo>K/X]*mEd1U(N*p)7,,j%\580&\PJ+"bH>P67XUDNUrQ->f#HD985Dnb"So;#qUW^u#lCPCQaoM4g^J&?O^)h#?ujjjl=-J#6A
%_QtW%_:)2JL,"e77OEuISu^E)[o93hZWj%BDl&oX,U9;XTKSMt#;OqH=97f;>e>L_c7t-&D<ka.6abZ"f5'u=mbU.O*8e>S8.[u_
%[.WNb,KF69I["_/[SA_%/C64(0-8gh;b'?%Dfh,cPF^:7]-aIfBOb,%jQP2k6`B)1XitDB1YIfS4,=AYdYgV5/'OsD)dK2IN`'2&
%E#(E?2bF58L,H=GoKj>-eGZ67i_dm8,<tSZc'+(Y[Du:CM)L6&lgB9X_MsJ#NFs3UqjXd]55O?qMZp/ds11[&8:KQ4/p:QaHa6Z9
%A3dP/JUW!$!%@s8g:,.Up^jgQ=:tOlQ^Ra>pD^*pmmXs#ejn%nk0s-(Yh562TX?A5d,2GpCJ/.hOt0nch%#`fjZ^'HIJC,=/U\O"
%/#H)`'^c+9?YaGF<3^h7A#MOY!tmjcE963Dnu)-OkA/8pL6JeNQSMe)F<RuR3k-'plIuJ?"@pZ#;'ts\6f"`Ql()Y\:7ipamb]DY
%Hp3'g9r=QOgdIg9LQg:)S,;Y1lW3&52SOR%\aa')OIuCg0*RLuaSng0pr)V<f7'rC?TXq;OnU.oJ$%Vm8`:OLXC`5k8u^bHe&ts`
%o_scdbakb$Eoq4`[Vg#2E8"!"X<[S@D0KtD0]a>3g.]nD:Y43aP4o2WK3ic2&S1l/]sd9VB"N2JEY^Q>D_9I75!u3'?@5oK`=KTf
%`5,+8LJN!$]-6X8*Xs)Vgj>?BA,SMi3T#21kus'U=f21a;`Kp@>&jG#S3ar>a`R5qqpY80mE[s.bset6F(70#R7L`a2VTULl=:i;
%XhRCSpWhAOM"e/XXCNC-?W:PV3HrQn=>+^?E]"8GDbM3J4aYukCM0a.M9N%RhJE)brKPm4b,b?ebeiu=TQ@$!A7'brKa5THiCW]A
%4-WY!4PM:?oY5Mc;!UoXhcoI#ei,_9>C.sfXhNND:E;?#bC0WTf$ZXV6Cmc$7Z!F5<10pCmKCG0K"[F,"M-KujEGMOhXeh8n:Sl(
%DX4+hFD4F`UUtG/De6]OgtX;@]\B-d>Em]IP<=-dNjcRH;$YH(=pG0'_$U?eH;#:RoYG`,a*1juPV`csDmar\13]5<E5QC-O=N^/
%H&(_2>tPJgM::NdET>f_rUoeXr`(3ACgeK>I-Qa;4Jdqg&mJ%6NOq82U8ab.]fNs3h&U%])@O#t.hCoL9YGak9KFt2&tQo8=gMQ(
%I,&&o@>bC010\ch.keZ-1c&LRa:]oGDWU"FF;!)uE2,c>JE&L6mT:8I8QWQ/8>"b@hGT?rNCTDs@WK#+R_kE11YRuf")m;E_a@t!
%*qo#]ID9T^Ol0bKcFnRi5eMNZSFX/T%FcP_Tsp56[pHiLmUl=kZd7OXiS'Wfm7l%N_,lEAp1]d;aer^XEjBmJmd#*V+ReX\e')gl
%o293!??jtjd8S7B7bC+X_`hf#oqc`%-=#?_rnnlHg,_5d]hP-0G7-QsX<ke/q:/Bu>%F%<g#DBao`J*[S*(mF^1U@@ld_7:ok($^
%R]+_[&KITfS(W_lK>MZS>I1fUXUh<k>HNu6G<$r*5KlAoAQ/S+ng:(XgFU/tde5nM7phl@B@>$=V`.tF)00XESLLICO@DCE^N$Ni
%[UdUJSfuENfGul2o'Klt/K)g+YAS6fpG8bSfugLocT4Ill#:af@+q:BFm>X*qc,fYIfH.kYm-XUm]Gko/UlQd61;ro4/C'p,&R7W
%!2MdWrnprUjB[!qD"m_hpA<n8<u./T2B%2GecqP`iZf*!9:9"ap?LlU15MN`^jc92K@eT[WQJ9M%8bTDHG,qX-C0(nR(4FWaLcnD
%YaBl_j4*@I6$KI=p#c-cMD[facE=Y)1O,rV-nTN7_c]!J>5A)X"&/k"ha[0TpkUCAD)[[/0<++Vme^i65Y8f*X^(J[(OtnQI2(=l
%cW2jBMf2XBTkOsXZrQ?fjkU#eh)mdFgd;S-mojgKJ?%<u<PI(O;)5GDr`j\tX"3l!('Q57Z>X'V;:+E@^EVG-7HWJ#S]oP\bASR8
%lL!tLqUrbjDWfNg`pKn`a^Ujb'&LbYVR^g?/p@73L>5s6N;U#k^A;E?R6''oNla*%P9[fSPYG.U@A^_!4c6q7>$YM6r-H72mi72V
%kHiJIEIl$eqJnD2M2qNs0k+RN@.(<u[k`0:GH:+/VrWiL_&K5B(!b=VdeaPqlc.Amnp*6f]cEWVXjLUMic;@7Z!"U,nK.JfiIfq[
%Zup_pbUVM`Z2$YHb>>cAcG8b0D1l-^#lFWC\#]A:bO*`*dB+kol`V,kpj,iaLO8IIdm'cqr,9X=K=K')Iu?mc:H.6N01ZB5-_uYR
%P.>8^4o+Pr(:\QTge[:&\_Ji<CCIdrrUioHZ'*JIO/]Sm_`F[_Y?Qd[Z-[!.XGO\1p$OIa,#oZR-*#T>QGVJ=I-Yn]*VlU=r^ln_
%'0ks`g%77`!RjLrGCbZG;6i4iXCh*S9*:HdQ0[oUP<CAN!$A'."4+D=Hil!oIsl]3fsLnZ/'YiG&]3l38n[cB1#)GdT!4a'Ot6H@
%+;@)Kr?*P;l(Tn'.b@>G!Nu#.6FYSgNJ/]je*-_,j8*)6>Tl1j8Lq%@<W;uf"?t0^PU1FPEWek-Nc&5c8jBPZ8L/^5Cu&XTNg%QC
%>oH6(]2k$#4H&'m74[!O-:Q+EJss?J(\gT]3CN+VPo>o(Ge2;r/=ZOIY326#8Vfcu@k0@(oTdUMp^XJ*`.5]r$:1f+K@$H=qt5I=
%'-n@]-f2Pu6K1:%7Iuel8hU]CXDYd&C@V"_OUHE:NaB@]#f2.Ta3A17FmJA=^8#ZW[NOT'"b3K%F^<2\pmZ(V%laY-eLIs$dW8[#
%\Bu+/V/?<,?t2_u8Nin%M5a+9n6@V#R.V2%+Z.o%ZjF20.L+4b[\LZ[Pq=U[4kqH^0TELP]EOno7K)Sgd7mB/9Ts7-DY*C#HFhY9
%llZ=2/C+cIP8fTC(]`FT5cPiX"\g4C`P\O]q,aeohnCR(H:]Zl2.?hT@8eP$o?Rapb@YLp>Sb/moCTMTq().sMdRu=O2&%n57RHC
%Z6KZS$4L>JZk-,s,r?6TM!n'5n#1ma+UOllJYJDCG:,Q*-K.4r-64:<E2!HcQ*uZQ7EeJf3L3Ap6D6ulU_?Q<p.XC+cI@Mo*Wnbq
%6.5KM.i_t2]+CLf&TWPnHt!a%=JT#];Fu_B+R/`UH'Z[mm$<9).1)&;ZR(gFKc!N@SE0n'7/UtcAE,"lQABgk#&;'XV4/`Pia!1S
%*ePX7Up(-@%%6Eh.5nnZ.NJsOaUs;_?D>gQ3!&j;&l'V-*(M:Wa71"*^i@c_')G0!7G<F0M7VarQfOYi%(n]Z7nT&'L70[1!La:V
%Wi_(nQi">'h@g@4`FDbt!u>=nU(uu@$+aV07)R]8hfP$iKoVO+\i^)^,k2'raeVfI@!T,=_U8fm,,ot3*=:O76C'Y>&olF^@g-CH
%fuh;F!1*CS$L-i"M%`$KO@)[K>c8J#e'MK$_AfbF9jl<LUuH6e%98"%&)Qt)EJoLiYio@akdCd65"Pf4d6i]),dnulZae+#[ST.$
%'s5u*=ZfeM_ugQ<^sTlHkFf&8<o+?'PC4?ZfC\`%K<@YA<?A7^i4HkVZO?"0DEQWgcV]#A"I_e([<`Te3O+_m,UBT`aU8/fLq3#X
%`%B^,jV+J:G)J_(#0)49&V8MRSq?arGEiU=,fSt.fDs@6`))#^EgU5cBo%q#U@*\EHaH\;742r&,Q`'m>)LX.+>@3&n[l0)7(Fkl
%Lm>21%P9C(?+(2)g.t.3Zr5TodhK;ED][IP[DE]@Vdr2'b</k\#uKr``.:G<9OD!Gdamkrb:LW5OgIC*G8")XF<R/Z)kVSWJI1Yp
%@_?J,g&t,,0$>Vu%[T.ROBPDh,T:?;!NuUr+[jbu]-QeMC`p`;+gN,)Yq(Z;I1NO9,cbe6NESnTqmr&[S/*Bd+F[^eJ3/^g'SB'r
%VY/]V+:1'l41^\f$6b"oZF'85R<T`eJl(rY$d&0/_a6]2B3dhhqgpd29pVV0/M/*,^7PB\*LjNk`hca"r@X'\SS4cP$4o\6,P6/B
%hEV`G<KEh]P>3NcJ"g>;2'>IciY4?1OSGZMG!tLMM*h?*"I(YUmDqQ]40@159%0d_?D`ae_^q*'_ur9/4uhGB[+o[-iJ(A8b_A%&
%NeLVmGAX3t,":`gNsCl"P$4^qrV64`68FH582,W6P<1rZ#"Oe<,iMEkZj[Kd$X)S<XE2dh/QK1;mX"0^6B^RK#=M>sY/<Sb>"H2>
%$7B57lgj&.KqKt>]`kj]JWNe5Q36*FFUnd='a/?`3\E_^0LnKJgX'.m`3^AXV6#9#K>s%lG5>L-7/SO^'Br>meVA[g"*MoKfsQ\'
%M"[OUBMj#:-luIMlShDIfq<R&GdIuH'><XO5>m'>EZ3+J>p'<O:SK1;>:-qH[uahmW$AfT2\@oePMkif-Dbq:G*A60RZ)Y)Ca*j#
%aXs>h5$Jk;U4$S\,(L$)q-@H(=soV0PXlXd,s/U<4('ju(bZGLiXIrcdO*q]"I"A+#K[7:/A8QgB;*EOF^SP!dbA5]U[;""n<(/G
%kVnU[Zam)qIAKItZCs]L$/a<6^@1#Rba'Qk<ZT1D6)#q(LD?6^pqO`O[.1f&(,j@deel6hBkjK:Lik"J2Pdp[[]#RWfr9"_aJ)SL
%Ged-J9)#ZCqH_q@q%0rIj`.fP[Z--@[##"a__OpeXCL9g9+a.pe`Z=t`=UI'e'S5hP6`?3dFCl:G1:?FZA+?&=QL;4&.'NsC1iB_
%22gPL!$pV03!b.V7I@j?/aZm:iCc+:'k>rJ^+.D.kgcrhkG_W*SuV0F4S%+BK`dBf<%5a-&ZG/^T`DBq+)J<GV&/V+`e>P?TkP=e
%6@@f2qqkE?U+tg9_Cubt,KVbr[\F_g%ifOOENY+dCuK-sEsN!&UXTX19ZkFr8F0O\Sp^]E!nfHLo]SYc:OoX?ZOfPMe>$o8i'W]9
%iLi7n?sEut_")_4>*VPM"H7*4=7e,G#73i[UW(Y`AbCRjG'0PhG6TY502+T%WeE#Iid@SlKOnpf#`6Jt"\*8-4\0[nk>W"W&Gfq'
%P<OZPU6UogD^Hd27pr7B)G%i=.9Zh37@_R#MT9KUK@eRH*`:K!oHV!)LBP($M'auV=nMrYi[,IL@*K1\&JtVY#9jGtbj;_,&f&M@
%mO7i4o4YGg*>%Y3?!''!*7D."MP+#70bOJWAA\^7116Rc0+/RQ9B2.DoCQ33>G%;"j0_.9&p>MLqeRS3XEBAbcpXlR_i`V[JN**O
%q1m`.90I7e@\?(*<uu0URLWNO2Z"'t`<iJY6CMp8]l+Z0>JCP7$sUq&OG&-)U77C=`.BXqG?p\P'`K!7%rDskH7ddFBI/W7\tat@
%)q0@Lj'D#Zbt[,,?fTuFa#LeI%>:K2keR'/qK2tB?;KRm)@I$8:>@+KDGm^kba&7FQ>$dJWMfGPG4GqIKM.q3HMW=%RWodc/DL/W
%5tCO*J<rki#@Gd(bf+0SX;cEGK%W[=!h_8=]4_?deHd91iF+_#'"fASX*"")3:]ULK)?QTqk*q#7ua)eI5FP\U)=oQ3gr0haULV4
%"`tjRL_Gms%21^I8"fEY?8J[`,rhXg>@97uY%;CC-W+Fj!a8O"21Y,OeLm!/3W[^X&"(t*Du`,V8&0\E":Sbr+WGl':+sTG3%:&k
%/JYHX45=N?!BB3N)"3,>bL:>cX@V5]3<Y@oZ/H7898?$4h67L]+lQ"%`U`\>&0GUO>_R0^DC'!`F--2h_O5T\p(tF%\;5%TOc8pk
%C#m^hQ7F05i/Z`@Bq#:Ch8?jNG<j$:e7P<d5d!`8l60mBr1U1W#n;]t_>VlGA>-1C,Omf=.)H=-/Y+HrV2UtBXY^#g,<UZ="Y19r
%$+SCh"0pgqKRaY)N7eDDM]-@S)=0'U^]La.#CZC5cjAcVHAiLKXeY'T2W`Rh[joIj>obsM>EWX($n%,Qk-NA@2(!/u+sGOEAg>Se
%LbNJYC]SGZJlh;)P:Pg8p]m+b%A+C?.!\%k0jY;]iUX7S&uf3=7:I'LWQbKYZgPdk>$=YIecXFqTE+=dmB53IW8Hk$.r0Cb*YhVo
%;qJ'cH$];/HCj!,\u*NdK64eEO/)*ioBQ/nDdQZ-e'!Ac5+8[Xp%;?j<U]7aYH%Egp=4:MhS-Spa4l7=^M^fd"eaIh<>tp#F`f27
%DdV<1cu8Y]!iGd.[K'XJU,@I&#MB2m^Uck,(N`*8!&%^8.Y)3G\m9iqYA>(A,7Ljepo_C_>6e>'?-PQ`^O9)i!PsOW2?Ln2\s5O!
%?enJmb6':!1gf'>k_gq3cD\U`'nd^B*K\Ls6$jda#A/aLi2#?f!#m?i7*.S)At0]'F<7Eh+$)G)E0q?A%X&X_Sn"2P]Ftih%#F7g
%%aP3lUiEp[BcGs:i]UTod4%qO:P3[g8%2Tr-Fh$]]GOHtf`aJI#>7')K^\I4hn,bNZc^e==Upph9'R0(+@FS<RR)\_?ju$^f^Wp:
%Sl`rVIrK`7*mOV2Qpgh:E=$"X@FMSj$(o+m4!=Dk"X'kKg]/RMZ>E=V^?^@2>q(:TQn%5',&>4<<9])RTCRD*dCG&=#J/&F&XNKq
%YTuf!F8:d`Ecs;?.KXFK[ZidOLdHlI;jns<Fcr,FZ\r3Jll"E;S;)_<("bSE#TX:=bZ7eq+r_%7LubK^?@f[sm27#c`*$At01r'5
%Rq(qROQ=V?beAW%`No"`P7UoGQd]c:M_(]2+8li9/?C5+WIB8YX%3^[S8(Q?9G,i91i%.ZT*2e7lX@T+Dmki9.,*VM%4NQ(&<XO,
%Rp'&aA."#efHKa:6I9sR&KTlG$Aeu4*q?\*FK;IP9EA`81,";O>=XWXBJ%&rj`$ZLoDZZUUq'&oU3\-DF;.V?1@R<XN(cIf>-N?^
%o#m'QU_4;=aMMCC>Naj>DLpVgY<1I:Cs_8Z\g%hc[a=+OAB\Dhgd6%3*9Me7QjPXcgYn=*0VlP8-+_e3R7!Ymp,;W4'9.Z@hZWIt
%SW7cV8LjGoFASsm@+=N9369_)M^tMD<^t:Bcs<id"^'lO2aLMg?#^ef@X(.(?JorC,gn&?#*'jJ#uM%=*GIeF5d^l\0]8se^"g[c
%@>i(b3P`&(-Gd*-TG8pb,"o.N%bU:i-lLn*Jg_8+^+R#?'nO:LA-jb2g.?IF'sCE2fmTZd3UR0<in1i-9KQA(5a`C6fQoN]Y)A/S
%*ZsORCId>EZG:;48gk)"i)Q@(7<'f-2r,"u^f\rK%%oa1%aamK=FbI6FZa@3jJnU21Bpfh%/cj(DOCNE4V6(o?g"+=81Qqj_\5)7
%:Yl.^7L32&+g->dNe@fn@Nb('CBf>7:TUq(95lHU"nB//jJ,DcAO/\)O;/HTqU_HU_:5Y%EYZ+;6M6uA!II'aWUFi4>G+$X"*D@:
%Lu#L&A-<c/-9it3g.,ZE#Zg?6FL'6.=]iYr<X0d;?(7nsgXD]E1+o:F3*-50Me^qJ:@,PsT>=MYT#9ZA>b6]J.Vr@=d6WVZDC!Co
%b:d5#DTP"o`Ah85\IlgQ$\4Xu[afBjnA[pIQYVls.UCpADO8dA7J+>fo@r=.gVVP[A=nOE:<9.hau'KF/)Y.T34q:T9O9-i=j^dG
%l9&eo[OL1?a\E1jc94P/_[EB&5,qSJTYi;j/(ipn.qK&R"(e8Ebo:UU#D$@FO.##SA(7f+/Z7W"`2$))!:D!X$m\a0N_X1j>jGg^
%G-Y3XP5Qe+`A[eP_1Cr==@)i7nUe6RNYt"S'lekfajmXP9N.,R7C\L2=NDjt2YSa5C^I]H>h5RHFMY^M#]QG<K7[@)@h<2A31d=s
%M95KYV)F)iFN#(WK*#'aa('oW9o2fad5G`;#`phW+mQ7)X2?5NNX+U7j$;[jH6.qZBpW(=6;usAkp-S'<]9$P%N$@t##Rt3M:>60
%9IF?TI&1=2-joM;]H"[f-E+mdLa$"S\37!Dh=Fkl;WBfH[#db_'>!mp_bWJ7[q4ikI"[G!*NJ[IY+(#5Cn#6sX"^''C+uh9Eg8F\
%8Os)*X5mYD@PsZ#6**R27KXKWau"BII)D1I>WAcg!O%/t-;9Xql;3jD=Q.=BKJ>&R^PdEF+PJ&H0d9RpR2%5O&bD;]9Bn*1^+l#P
%$":=1l/5s*(GMsOW7=95Q0YV*A.GE;I;1&kQA)2`M@cFo^&b-d+Q/B%@,4)6LiK9-,sk&>3&hY',%I<^aX&+RM=c[D8qR2@,tujR
%ic#o-[+QTlPLcDVjEm2&9N5<KN_8!u#pD&_!o<-^/TlSqFO.T=TX8=HRKps;_4^%MU8n?nX-p*tSuIFT,(P+$7s#U5Q692R1a$U-
%8NoHc&@uC0(tfQ*(r?RJFB\;:VUm*\l>m&6FC^+q15@G$p_QBkF^b'4dj!jgl,LF<M?=Bc%%9\]Ujj``+#)<^@>Y/+j8R>&7BRC/
%aop)4QfGS*gcAN*W0i?J&XoNR\p=U,*p&b[?f4Fo6DZa&V'96Y'R%)FXZiIl=HLK;(H6W85g^j)gB@<RgJ$YF-h,B23#'B:[$o'B
%G7t(o)]0M7L]neT]db(,&^MLlN/Djd)&jKIX5[XAWM3a15JZaB9[=1m?,!@Lp.10`ot?%(AKp:s0$a,dWt4gUdB.g!$t?ufo:UNI
%9P>J(f>(faZ_."m1ED7KUuc:U$q\R(DR1p'9XXrc6pu?+f8c@;G"W#7Vm[Q?-)QWeN(Up/j8t&No%K0M13._<U7#DOmrDhoT?,I>
%(L:krkXceZ8?d%l(9bpTO?ef>Bp"E)Y_67[m+.B2lgrOMVi(Un?ojh<l\2ZF\3&2QZ3!p/6!U%]e#XXA;r)aWXQk]&X5Xk4?Oa>d
%o;]<3Rf,sZ*U"39!,6^\$c;)BREuuU)9GM/62SD_c2^V/=Cs3#!p_/g.NG!W7(=6@0fZW$#.c)d@,drs=eC9Zb]c?@pr_/_3n1.P
%qr?G6faJKa]#dl3iCO`VFJOFk\^H'M,X/t2UY.q4.'BetR+Bi><Rd&Hp>pK5b.%=_1MhL3d1Y0`o5s82!467Q"ddu9eq&0g,WO<5
%=b9;Q"-PX,]e[]q#P:6mB,rle8O4>\f$R1.K]#B.,,fD&6aLk_M*.fR*.-$[+ZPL8K!.,Em*(1<UQ</4qh6B5R5n5P$&M1m+,EhW
%=CZm8J^$IoCQAI]]`hUUd8tpQKrD+5I7?;:ffDB65]VgC@rl8,e=kVb;#qag_YG^Q9#KU!TjpIZ_E;*1iX=m)cQ#IZ'[gGDhLj3l
%l[!D3(MWD3"V.W,.Y`3(kB@Zdc26Aj3CMqr8gV]t#Gt=%TT:fUKJ-T>WsLtYMYoj+kg^ie-Ohf?P,"'Dl%1#SG:.%sr>--I"3pq6
%U3"+tfE15d!A8$EKPQ_n(*Al.?6nHN"m8=ufd:SO12?J&dubg:-MZg'3L*=@=Zt(cmjcZ8'#q5j-r5KUX`&:c9C]8TZm$s8rfb>?
%nY,T/0[?$35*h0DG"Zgq<sM$rV8DCSWLl1J-/mhm4s$gD9j.f.>L6/`^^`=5@ZDrBT&ql%_bhc56e8"Y%CT^C"]CPOMeYD-D;/&f
%.oPfI3m`epY9AP^*4Mu0bFjYcR[C6.pg#(gM*R'j]e.bqMAua[4/Bd1`4%M[fPKGS2Lc67EQ$.CI'$7ncSmRXg/<i)'p=FsEmOm9
%F1<Ie\&2J1+_^$&I1/dTPo:C(HZ@.:%f.<]#1FP>ncG.WiHlTDiG]L?\fb3UdAp'&4#h_*68eV&%W3KRmi!5:lc6\>&Hg<(Qi8"<
%P5Dn-Lg46R6=Mf+hDJ%096O;AY;UEjHkI:q)4r+M"`]!Zca?,a/YO0('"#V;!,q0)%`oLm!"ib.3>rJ`N%Cs%7d6>T+p1\:&mNus
%aT[54fKg*.Vq>5dkU*!#NDl4YX1([R6lW)$YVCatKsD6?M*=:]G`cQt8Z3m^^%c%Ic]gXDgUD<>LlG:oPQa,EncfR])Jc+?A0Q)I
%jKQT('1Efs@Ji.CB$2V9IQ6E.BAtHdF5,=b3(L)DjugqRBfcD%!c>uJ?^:tum:q!sEnN]'!CaGMAAaZ,_)-E<f+l0LcoN)="f"V-
%Q<+u7N$O@j99%8KdSRBu5bhXnmUm*@]O=a.We-/n\Ls8o;AWq1Ulbu3_uMc#_G^`6D\2I6@L07l8WIjk5S?C#CMb'Ub[.dR,cO.G
%e!N$G1AN4J`b`K7@d=??)!jnf/US315%<38'+c]Y'h=rtFOG`a7\u)9P3&S9;/3uNJkYC.P('HQ=18Yn:]$+'5&5?u>.1J3Omh3R
%WJ!q')!ahhG[LNi#+L$bI<"A$DtKU`Gqt7TP%E\nZVQoT+Pq%G'VisIo0l80(J/R#2;\go901^H6@gn!D%WEFR9,1gIRg$Ci4Oso
%NN$LpHs[.V!T-`UA4s?k5aEll#n*;B@XC_Pi^T'<cBTU.`5Q.q+?H$C,/3e'cW%Cc3U$'(aFdWS6/l+@,sQ9VEnJ<.aG?6^>31T+
%2d+4<D/'QdD)U,'!6RWT?0'?52WAV0F)FN#"`0+-fQ;P&$nO*KQ0o-SR,G'$_sR\sODA8PgXQ_K9pT]15>4O_@(Sr<+_a>=[T8nh
%mC8H/6)2u0M8[.J^$>o.hh?^t.]Pd;Q;.du[T5EW[8A(5^`:jJY_>O%Wf:hRkr>,24c\n!bfDma08pU4CR0cUP9t>[1!7S"iKq((
%KahH1PJP@n9mu/[0:Lj#?_B`WYf1_u5aI%#5@E$lp)E9JPW=e[4"0aG5-CgP1VtKLJk:\TaWjH2GLQ;r[#T=Y%ALa=-tm3IKVEdL
%o/G#;P'n)oEptjnF\B"k7GYTs&T<2ESY8;A8L,9"29HQI;'oMn3!"^pQ>"[Zmi--MKVrl+b&`R#Z'"V\^F:dn8!?9b_\f+#Qb9VW
%JhZ<ODiIWu;AA9MQsR5h89OlOd0,Yj`PR.q4:`=DP0U6[:Qm&aU*'JmZgAM1#);*s/l6uMTH^I1,eJ+9T1X'7(e5/`9+>E7N?\])
%k1ei'NWS^XWLjj,DZgV#Tcde3c&u8A.U3M$:&9ST2K8<e4l",#9QH>XGjt*&I!l<:+Ym&C;E+*iSOU$oH#n_qMW+gQ#GcNcX/es)
%51=#2'6"M[`co3Q$+>hIVFEb*VMcGAW[ECK7IU=e>Qtf=8-f;]1P!uT^0\]^@t[lUZKn3gDNdptJRqA95iF5^>YZ]_@CD+(`UiZB
%/#8.N:[@<SYr&@uBbNF>SjK$iEa,^OY)7l7cH2d<?Wi+=5WX`&`"MlpJnU`i$`>R=2LA!E6@F4Iiupsh9cj8:[WnT#lt1p6B;)^n
%XCAp4Mut@i-NJQS)o`d&L_*\2@?3NW+SNn)+Wi<Te$_KKP$>)!Rup/U\/2t'ZuHZnP\W6Y_Q60>)+$)fEV")+#DVPYrR&WQ#)P;H
%[S^-rs%/D>\$Xb>(=Z3Mm3Vq^&-4ROPDVi86EioC-K,0+@`pO;;E]eRm]9:.G:lH:g)kF!CU/qlV[Zp5R6WZ/"\48<G,rD:.L`2c
%eo`qe,A\Aseto'V#/LB,hqV8&^`kj:dgEqm9Ip5rekmkFF9&K:6R8]608PqSRrUD4Z<Tj$>$5dZZI0%h(Zh3Z\Ypi_Om[8Z2i(-]
%fB>VDCe/c/ZuI2t"$1Tumfpe&PU6r[['?Yng)`lmXr+u\)JHE$I;^?-@*iiF,3gRY*-f9'dCM6&GU%AY"4PGQ/u'QBluC\bp;uK\
%&<s(Q[Y^VZ()ItM:_2<?$;"V?M.RD!`j50/q-hYG/RnFM^2MB-FYOt9KVEVdU?Ag8J`CP8E4"-FdQ,[0G)a<2[<Qk:4VCP!]>ctr
%L_U\7#Ec*s&AHZjg+ud=<&2TD+j+UX%"&APW!J@@B%bCEI<:V;:m&+QVDd3!E?gNunmL3-M8u30)Qkh@I^B=q^0CFd2m"K94d9,Y
%B@H-915J_67ZFo,Ngg+)<#0f]gStMm8"'[j1Bq<D0/)G9S$k(r,>-3N$K5]r>3-S__,7(gLXWWE&SW5cBAmFVOd,IEm%PM[>&:es
%8ba"-h@@LW$Toj_XXp8.=9t=.0oWc\<:N6/7e'ap;]l/d!cnC8K;.`6W#JtH4:&j9._?53](q4cf(l\RiE77?]-=-Bns+3SQ`lA8
%Scgl%Tp:.?4-#BDYeu06[#$ot%c?u6,M0*%`OlcYRRs<cI!m6,B=!)E;rs`BMO"j6%W-haLNHPG"D+GVXlDlF_Jb92IGlDuQbYN%
%>&%b#O\4)kajTu](Iq35<\W#2=T"iBQ!-*0j<%Q5pLkd@hdV>%SFRl'9(n4KPUq('g>^ZK6[4V%0u2f!d/p+3*4p(XEr6%UYAglG
%CDhm1Fe+)lGqDZ,X,p%0A%H\'=o7BlDG=L5C)^aLE5aTU<SN=+%gjm$XN&l]ENgs$_+Lk1jGEISN;^AX)p!DZLd3c=(!462"2,m%
%kdR`f$@)Hj_uQa>:(A])\iN-EMg_d"'"Xt/W^JR.7U4balcn-6/5O0\K\oDU#JO]dRc',)mKhEQ8p!H,),7ij4Md*NNP^?EAjt:V
%B1bVqj5^S9[.oH@Z"Rqf+?RtN/US[G>=_;bEWq.M9pj%6%nbbd5a/9K[P4oUoaB.R$AYCJI*[F!@\"%mpOT@?%KR.T)?]e[3nkcs
%]YlW2Ni-A>[YjXOUi(:G1b][]S"*e1oc/&L6L&e:GP!j'UN#HX_I,3OYC'h)g:k,$7Y9THF,5^^^uK[!iHI\+iTEkJTHk-N1<St+
%<i?J)^89/gqo3bEE/WD_(Kc:m:<Y,'-jI25Sa!pVjP&0GfZ(a&D;+9NZ=WHXJEl:O[+Xm>Hp9BV4O5aE=NOXKJ7D$DPV%[4$Dm0N
%TcoS(:3<JBk;k1"%\Qqn$u?S/%U`508_AUQ/-JoD]84V>k3.c+]/f!TA416f8G!"bOhdl5:%$lW"jW,<ftp#e`nPWT29;paa+Bej
%FfU5'3LU5,-nT@WCfa&>6em<%=[k^IE<BM[I#GcC[.N$$^&o,D4DM%DE0@Ece*l!;dDUh'306cPmoq-G@_q?g.gUPZ/!n$3b[$6P
%?r@elAW@`$EEJc6[CEHN%gSSY63O_H\sF>#-H=n#%Pss`1[ngC*<X7q*1SLd!5)r>r(4q.[c,qPh_N;\F*BU!W!k9RbfMj7V,`K6
%.W]\"38^=&)^XBP@WAR&7-6'2f&LS#j-pA]krPqs=J.)G<?SeN)BCu18JjCg\;h&=pOM#%VOLipK>Np@kFr.@T!$Z+_k,rLkSr2Z
%Kp8M@EY+MbNjOb*@Nc'H)*aRufCo]?]C=tY+Ia#]aV%^9NokYjOcYT5/nIPpUXD^<=PG10/1i.m;(A>SZSJ:9Xah33/P=?(>=dsM
%m>1&>b`urkF@+Y85+a&od1p-8Q=J,M?OKC=-U[uFgHdhg+06^QVNrbs"eoPo_Ppm]0Y)'g*sbcG@(g4u>SWWcYWQIe\A1H^-AhWt
%og\_rH@U9N\)b*Jgr).^YWR,6XpJsCE(q3EKQ@Zdpm`eIdZ0Krbl-AM6urAaQSr8'>Ak\Sl^RGf,a1B*2M,iY@O7b0gnLQeh"uX#
%bra=>&`Zb,?2;@B0.Ac-3G%[E<gS_(d8<FJ2j54.jijuEEJ*(FQc_(c5$)#^4u_Qd-E`of(`0%c$clS;q9]4.J7_\ISk`"j`eHjE
%#]rZC-SbQXWCu!Q8dbm8TNH';3=]D7e.:s87<";5q@s#V&?#&nI%Kp%`ZR/+R-55G\*0^V%U;6WlI&k>'h'DpBLeqicZah(d0nIB
%_[$t!2t-=nru=#)9Ro]+;iHKNP!5qGpgOV4p[]UI-TnQejO6hXL$U3IL"'ZJS?d5k0Gqfjnke[(on,:o!f/Z4b#lY7P0H2SMIr[+
%I&5<iIc)'ufsW>Mp69J.kFOGt5]A`Ha`@`[XY@JhaOM=,k$Qsb)>Qc'$9F+RmQ0'bEaV3Ah9d#CGntEl(s]PuL0JjS3l\&W!r]nO
%nnm.2pC[QnrSulBFl5S&+kWaLd)]3X4?LPP[W&lUTOK%d9CaB%\r9dIR$\[XgLZKOQ'Ub#lPgfU3@MW2*J8=c]Gl-mBFR(<FL8mi
%N6jt_iO>&*hCRUi&UL5K:JeXk)I:8"c$Wrfl/cZ5GCqraU5.(i8+AMM(upBe["Sg)g[%E#;-,BK_;04]ds"nR8s:JlaWnCY,DW-o
%f6/#PU`BMNl?QCF,`*3aVcRO9(D/pm[4('g,"fp3KM1FN"W!EM_MejM,C`YWO&E5aU$INNPdhB`Mt`bjRVs@;3<7oU>=6[LEQgWk
%IlMag71"(:[26Dt<[Yn0$&@P/^7C>?2-9O!dVOWA*#WUID(7l6@6h72[<"NE]'q>4*hnLL3dHIqM7+#:Es&1*/7IkHYjL"B8/CBS
%\`:uFra)rH>W8j]&Ff16c%0L/'*5"dqOmf344,^4:bAB3$E-U3;AKOF\$DO6^(*XNHnVLcnnmd"&i'k_=C)^:JE7QS8f(LbpeI.@
%R*buoBp<DF*&MN#qK)"U*E<4k%L!3_ga^D/jcT[=TKgg,AYEYX5?B=L<M#u;BB]e4R*mi'h6?lbm/B`l`4t#0@'mY`L.f"ME\N9P
%\`Et'1-RackHGn?lLH2oD(XN$ZMM$"JGHMan8""b/N%6_aNrAt$%.Y"76[t(9k_CQh2-fA-gZXt=GE2Z5;t%7=Bu[N@m3<aRE7B[
%ii9*D)A.#bm6j1?@s8*#[`1P@nk7EOMSAQ]E=R>hA9Q!0-K5a/eKt!FLZb,;4:KOTU%f:?5d1tHPDfrHLBOD:j2#pqknk+,;n,j:
%kq'PlQ4IB5-@Q-*4-;f"L!ZeLg[S"Ra[]JEJ(PpebsmJLq!LQ)Cm`,L4b.R3YCRsuXg:>W_#EJe(a+6'*NtDY<`"5L^Rja0r:2dt
%!.iK0$!.<93Z@"W.$A%+;#jp([<X`4B5%cW_D3h_O6`#A+EF6]N)6+%YU]fiTQ_!W@&C2^+l>Pr\r!5D_5,\?%e9X+ZOKN.Tj^fi
%C>i5MCCdYa(Vd^\rpXPWo`9Jo""b*jBOJ4Y<S6HgRXqb=8[5S2%Z\^>Csupr$,/JgRLl'GN"+[n'^1Dp7n81,da>ic5tGSQNR9IS
%3tbLPR)"EMg?h6A(rXT6=I=?$^pUKu$;HZl2[*>NQSY:.5ab`D`LlD]K6H%a=<?.mih);t->k;:ik0ECK[BqlnP(;^m@VL$H][%`
%50t$6*hW0cTDWd"M8Rn)(rt7lP`FF!&X^1c4DgQQ?_CZPm%SF`WK9WSF@Y;'gu15IX/!W"A!snLg"m(MIuuZ\8!kSTIk]Uo"Kn@6
%!:Fd^MuKGaKU9)fLl_J-7PVKf_cJ2;.K\RuF%s)'^?7N!eA_WB3>pl]qNEq.(6sa4qMs&R[K9m+D#LbG(Wc`R+$?=n\5emlJij/7
%ga%m`>:/Olg7Dn3b='HlX)lWSZ"&..d3[SXULWK8W-!X.>j0iMn*`\bV\n^s=W\bt?c\4apFK[Y!Xd@T;Z^dm"Bg=)-XrcOMp&,#
%PiT4MTG>lH*G+MH?);XT9Lc!!T5Sm?)HUR5UBHS`/LrJ(ca=l#3Eb]:k+up0m\Q'#I$JoV50f/I*OnX.Qe(D>;o6Jn;)E?sb4WuP
%!<1hpFKEWFbZ3C,oXr$d"-N@$;>S0E[$b$HMb(I_q9h3\CBN5<8&6a)kF1E-W+?Z<'LEZg./jbmU6GG6()Zb8H'3OWLlBRQFpXQl
%-NI7MEHK,S7mNa74ImsC*,1'/#GcFpGp((9"H7-T)[&-$/u)>g%PFaDHPBas;HPi[h_k8be*#^R\,cF9<J444;k7FgJK*B6jTeXc
%Vf1u^ZM6MSVQA5Ubjc("kig/aPhd2JeJ;!gOGHrtqpAgfR*iP`OG%*R]iYhdlof\m.a%>,=0m5:\N_T#5BnnIGVMF-nZOrtJZ8u_
%n6l^Nn_nQYN<(:3"^d=$lJ,soo#=2flqqs5fJm6\_-XM6j7Ps/kn@RR0[L5AipX['P8t[?Fg\Hk?$5Mrj'!?_BO.'A%`<8t*G82c
%/%YQ%L-?0[e`VhmCd^B+e)[4XRkFm)\h<sjZ7rr0-V9`4@JSiV(\mW_rlu#A&gauQgnaQCCg=.ah4!N2>i^eVK`6?)h^.28&c!!I
%N\fs&s4+5g*,c9SA@_68@(m*cH<+BK%R_Enc<1I^KOMe+"QTk+9/9$,-PiL"+bCsi*tC`d#+pjYPPQsgCg@;D!+b=ib6IlE++jdI
%p9Wp#5c>"'GL06Z3G9m]#:V:uo5k:8e-+$Mpja]X<_"-kd"Od"K)uQlDNfsBRHNo6Y`"I+jdOs7IkTQq!F#F^D%sVf#mE2b&)BT/
%"Bsq<^-"iP#epV7ibWQ6P$oDTq>3NcJu>i\5`cc=+4Z-i;ZkO!aKuZCUj>e2%QLdUn8'W-7iL+PFWT.'m@U<@;S)eV#o$b1X#koD
%oK>Oreo.gKM/u42oQ:N7&U]t@#l7AUjDP\fOiur$6s]kW0>8*0R8RL\m1LLbCfnuE'=GSu@b>k2&D%`@""d!2fK("*O+]KDQ6s&e
%Qh(#-UOlpI$ikPQ?3]C"B@Wb]n@?mRZ[.pI=N3jn1=g&tNo74"^kBF<-sb`7S%rGPrlVBemGY)(o1R!rBFqrOo&O38[A&!WY[Y>M
%"lISU+s.^(JY`B,NWbIrKuLkDo!/>2)2G_\:Y[*-&L9D%afC+lFPGl,_ZbH4\tg9^r^[NKQ/M\KpMRZbA_D4gHNX*TkJ_sZ+Jj4q
%kfqA$YQ1CNl?9W3A0b7\X3esd6W02CJ)C,BA$-r":9ZJk4BYF[AO%YiB#KP>f6(E>*+Mu)TWEI<V8Z[b0.'>)K#5Vn8-N+L;R%?2
%V:smaTnPm$bPl92F-ngHkMp,NHgK;6g(.juin]h&9\H^;\TOBR:U`fF/fnS,B/d>KP1mAr]QC,*e)eC.0Eort*:Q%=A&F%PAI7$?
%'>Y("bl.>K2q:/`<$=)%=:$.a*:jN$qX#a4WtF765o@oleWjPn%ZW/F/Jh*7i.Z=.7&hEZ$C1oto=>M>plXlfgFUcuZi9CJi__2N
%npBi]<]((Ai0]lih,H//iCG62JtL1BK/'CSe5YE.)uVLY7_=)81`N;@?7D@54>ZM=Z#Q-XFrSmZdhDkXJR0l"Qt!glFZ>:j!S"nA
%Wb!t_[#i0j^sIj2.7`G(F.Q_JRcA,&iX/7eD-'np^>Ne^ED#Z/0)&Tj2k++%;7%4=,)`6J]3rhXEqu4#a!+_ki?*He3UdHlqumW!
%V$D(^chW/[e;+*H\S^F-loE<uH/`l,0YL/Ra[3L@j5e,s9m-Zu3r\n^4kqoqq#$W?9HouDb-e[D:TSJOXeeO>pR7H5K=CRd9;oA`
%@Y->57Af$Cc"/KX+-@;i'-<:DqTVuM8tUR4SJ<nD2WmEjJZ64b9r;$[]::7"8+XD1k%[YM$(U"/3Cc;`Xic4<cj/Gl'cipJoI/a5
%&BpA%a,&o2fhA93c_-LDeK.S&cZ-%^;49o#jtUk,2T]1DmhXE-ZjfTVSX`9n3d*d<c1l0WOf>?5)t/]Kptcs!8#hig@;YZ@@PWBW
%F'W:e(4?%f/#]XapTNOUe>Vr+a4i^gUlcO4ak<S%&u$s1l.cfe;VsP%#'Y:u':d6$[9It@0V38Fc%$%_=d=N8i>2(\%fJ+'W.q:Y
%aDt]@k9gV<h3aK_6'sXBA?(E=Un%9l<>$PG`tG_rPjD3SA@m4O%snj5H"Uk>3bl-e7U:$!j:rVQ"#@P3Okg?!mY#dk#]K_3ML#Q(
%"A7,H!1<]lr/Xc2[^HBNghP\s\?1aH*]=LiLr/KBFl,-TE#?Q;eEJTpB?#Use8CR3lTT@]A>!RkP]Hqo^JLnZ*D8OTLm0)b`uV7-
%ER_cS'^84"&a+/c$Kc[nBsmO:m8EXMSn_NWeJ?ha;*bB+'#-MVR<L*nG3e:U-i4tY!iRB`*KC*,c<jOb6l=*%cd`D\m*7<"q5K="
%g/e^[[FC-G[FeQW8)h8?Zc.'@GH4;FoPhTffGYE^-C'gH\-hL^4#2fMPuB9"62<m\QF\j^FM03bF.'2pifL1B#VT?rYGA:7a)-p/
%F#:F.[VKhd;EMDiR?K]+ckW%5&)n!TXX&!$D>55I,-YNrmhWuKBbck/BMi]m[?,I=ZUkTR8dO]]_i$.?iaN(eG'rU"2GkjdRbaV\
%Ga@P$9DFU8B6J?k]9i]-HAm`Ii/q)D.Ns[oBAm-Wf+jHYNPf`:*RuW7Hhm05](PjBRRan,kY$;C#eL+#=Ks6Dbr'`Y;>BeZpR`Ei
%%l`b5YO-CkX&'Q^c5JdU;bGiOXc9jGVC7nCB6uduqGT<1#)tqnI5f]#AHZaWc5bR:gCa15RCAK'C!GYp=H6n%HBurMl5H7&MK1+&
%lKALB7,p6K_nV;7SMbPpN2Jc+qRXYSr:IbB4k:Xe2`qQ\./0UO!3"-^Dc;6#An!4`A!YE3Q&iXQ@n+)>:<J!jL=0@n#N7Lr)W$dN
%O"B0$4k:Us"dPrRH#GCodAN[4B=p(da^Q>'-_5A`WF^j7L`9/AManS9IRG1UTp1m3B(4f&?[#3(3fY2u(e;T#i'N,-.]B,7A;/HJ
%9"d;(E;AUX>HOeB:hhL<4ubO*PXt"1#uO'-c-*""9a-sMQ>TVEJLDlrWhr,JacVo<@OnDjaN0L1R).ImfGW>G[[@tsql*="WnZXt
%I=1n&5E/=HK(Jj1a7D@%9ZaW[#oVbpa[ZSKo$PD^Vj+cR@F-EK[Sh0dfTp9fHrpC/"ER^$j$^QQLi8R.*#ak^mp#`josVf9H*"Ip
%i9a+b@OKP`L^og)aL#tWceG-tX"oR!<Dg5gA4(RsL?q:!l\i6#jlHe5J82r,,!i7NP*<;s4@u,TNds%M4;Ul)0uG/!l'E#;%_7[h
%_e7(9SDH)+I(/QZ,2F:V+DBN9[O"#,irYH!Qm@U$.2)@r^.grqNFZh<rG&X\C*H?F+@%Di3q#G8IG"2YD1?:[Y:3Z8B+O1?s%fP.
%/od2+$YklB?;F6dF<9^KbOn1IZqGY^EuaJD[EmsAK90O11UR#`<T4!q+jq'T-A3:)`NJVBM!Q%n>25[L+$<BJV+tX*KZ>rtY6gM?
%r%\>73-'%#@$RTO?kp8`T5^klU%J08rd%C>HJGp[/KA+F#BS.#1rtPH7T7\SHV[:rlgDqB9Y!S"FX7C<@4`u(aC@7/[OTJCZqo8J
%QfD@<'l\b4(U(mopMc7-g:e-,Q*(:>)n2e;l1F(\HT'n4FQ.BM$i0@9IqdDsgrS1[I#hYt7TfQqHB>Q\'STJ-Z;Sg\0u0)G^pHjo
%T;B'7`QE>U^T]hcTS11FCZ'6#;Q1`O*[\f@+dcBHBqYfGas$qebf9"SWos6Bq-S$Z@=]Y%VH:+t!<\jM]qf:Zqo`EF^(EEOh.Tki
%,5&VhBCKpiRU%9)+?RIrNdiGY$`:,n`a%S7nneh2VrLhMEG9$Zk.u;p4kpt270P@%E`gEnr)-%p-SW0Z^ZagN4q<q>`C7nJh,;nN
%Z&p#+@\9HZlCeS.C3-]Cft76Pc62Tl3^jju\N?F?kjs&>Wc;\rP![UI>^TG$c)E>8pNB8,<'-+?IL>hdN+pPC35Ec`Ktgk8.#8mA
%gu>piDkfG045cM5s1(EG>R==m"TaJe40594;a/)p-i"EeY\10:bF_)cKT2<2Zm79Zgia)kQM5qT.)-5=]],$^(eD04eo=$mjh(1@
%Y&MgYjbF.RPW.0l3=MX,=`7HlY+gs-VJq3YHSL4>0]E^^B:ZM/Dkjq=Hn#,uSb^_1.8oWoc2-d,J%Z'uq&3OL>L9m*U*l9R#r:!b
%MEC&L`%?.t)NM>Xk:=Jo\%K#/$g@IJEn^63Md7jXe+!+;V%:n_V$%Ho:2LJ%[s9Eg#^RILq:;Be9Ch_n:")oR3[NDJBkIQNXnNBm
%q#!Qf2fAK#e#,YK/6(eLhc'a,mLe]K4_H%LF,X^.*JBu"?nu744l;DCIEe^c&)REjeVId8)Nf*09m?KsfT+H6j*iNWkHb8k\Qh!,
%a`GkRjgqm)'5t-^<7`Erk3T2+NN#J%+meB1qoU^7kNq1"Sh^%t!`9Bq*&DO:j!6.\.s6gHBJ)bJo2cLOVfk]GZudXm)f@O'"S?C$
%n3liG0pKB<)a:!b<ep0/%?KYsRY`?,QuUP=e#(o\j4/[C`c*7[XX\o>1oh3`?L6"ppN;8d2%LfB!';D&6&60<L7CbE"4kg*,[@H-
%&A(CTV@6P1l/*r!-.m?.A%fMkO)C:l.Gl^K^-<*c<pHQE3o>sAZ_7A(ClooF_F9Q;*_q*Um\))&"_O@k'`-L_8(&oooG_7).?T0P
%[QJoi?]tkNN1&;$(mi71M.-hGCF4qF%>Dop*mQ=(5eSU\?s;TSCdSSG&LEbrN?*MO]3%F]M]AQFK#Wk:63gdAFi4:]G/ojrBT[W3
%6!npFe!T_b(W@tU=Au#Eg+=7C"mUF0^;%;kPc=2l;lkBOGaV9`f,$`T;HMTKHQ/fa!M1q65dmoo);sJ:3`[[<F+RO^HAg+W`ON<0
%V4/t;&un>DXd/.94kHYZ/gt,%Z5Li3Q$+,)SkIREVPH,MKO3ZgM@2JkhY(%:"Hg*\20)pTmZF:!Oj1fX=f2/c'"RC='?Df7%Pb*m
%L.0cHZ=PPaW%)LFm"!SNE:obH,:rsaZ>m#7H.t1X6h@pU^S#tFO$(O](905UN7B(I;/X.<Fhe8lQ@aU4kpXLr6EiQ?qmoqAD^/,2
%>YVU\V&s36^o9pFRKfStcc%F].XZ*T5D8QLGFLuXE8Y8L"GB>d$7t)kicFD@ec&/ABNc_1E]RLsLtlZ]rp&8C2)S$UCT^)pXdNi-
%?_R4Q@F*[JinGY=8^Wm@FO/h:PpbS:&]@8R@dYag!?Z,Pot9IJ6=uXJaR-tYcota])!,-f(M$f_d6qtsG`8s!8pkT8KFjqF*at5o
%>9"k4ej$>[(l[0L/E#XIV*J;^)7P%kh;$>^^7NR[f]%+3Gc.gKceeA<#P_*(cTPImYD6;7c9S,'n5aTlS`ca12K19;QfcB<[?/m5
%C\qA7p'H@=%nO$?ldaMI'^;K3At,hNjg.gkGi'H`ZMHOg;<=ZDDE7:(G,j4+J(V&$D!+(0'GV_QJQM1N1mi]`iqa(,bBE1<,I$'!
%VXU@lSj\m[]Cj6]op/nJc/l=3NfUbZeVG&'0MD.*bn*f_6mEb#2TTfc!KuuMQKC`kV],K3_!TRlm:WieaHWDj\9(`s6!De5DM@B@
%+P[Bi?^'%@B3p@]EOR4JS>@,/DQn#OXko"D!+3A*"?/&!@%,>+7ocPmb>&(d:nfoQk$ZMsA8;q^j/ZY8]arb@NpM#upeO<J!WRG"
%'8ie\Qc.BPA:"c]m.p9-?K\bjMpFlfbtlCdIl1]u;d/:p'5IE>;p)QkSCHl*O&%95IXGUMlA):'00_S0InIcVX690a'^Fu4>B*9c
%),qekT/Kf!gsR2;W)$NN;XFKWXSpK_oG[:u*8_k8lr./Hoc30qfX!6HoNpPQStl;M4kuK$DeM].9Q"OD[Q_28QE#D(;@'N7,&.7,
%1_Qh)?lm7s>&%n8\9+8<4%&]?Qe[+8B?!(3O3S1RiSiJKbE's[&,u>4`Gdq!8&+[[HKff@a52$/T`a,JguPI3[W!+-)ZbpK#6qGi
%<581j>!EHC/OsYM?BAYO%M#<pFb6QA@0K]''P@P6oU,q(/;rga%^2@#^l+4lMfnI$EM@b*cPL[E;8+U4XJEUWp:tJ<)=dP?d>A#q
%TUgat+\8uh(mP6R],o>0au/f`;1oCkA;LA\Nn,diA^9<MO(S#hN2S<q<&^QuTgV9t^d>1.ns>Fl*2_ZGI8pcFF/;&:(sfe>q5l8H
%8]_lB-KJG*?$G\<.(SK&cW==83)Yl*b;>6X2I0#Fr415<Xf?^WrK#!FBN)^_a`8W!(@^G_pfoh2)*KV/CDfNkGsRTAQ/$h(NhAj\
%*\^]QL20;nT`_R)<B-YdU"[UhlVff2g>.[g@M?ia3YDkgTIWeXAkb[C0pR[Dn;U_JlD*I0o-,gK$=!0pFr;U1h)=4#BKEU.bfFi.
%_CG">L%NhoQGb6V3[#THNg*LPiO1WHr-F@32pC,/dM/Yb`,P?iHDEUefeB.D3`+FY0oQ4H#0$*"mZn>W?9!X/N@)$FU0![6pZOYB
%OBtVOIGtLY;bD<&HNt0t>0%Ggb;LlS5f1ePlj.!&og,94>rb3l-p<1K["glUC5\1Z-;u/0gEc<pghsp!S99AL/'+%4&"n@,KAsf0
%>QUAM`'BMJ,.>Dn6Fk9UPL0>KI0`(X@^NKoc#uFGC^QR6'QH*PSD&ksA=:`PNR7geEe=a4U6>R^m+DI9+)DuB,BY?H\ki`Ckhqr\
%3>XCL/bD5m;$,,%COEOXpV`Rg\$',0>JsEdq<IA/W.cfuL3NXPb_P_HkPR&nd@LEC;"c[UMgOtEf@t`rab!Xt7c&K6eIV9LWsN2r
%Ih9l:]\C06fue;&oGXo6f&>[c-2E[e\R_Kne8HRH3XTWgqFsNY>\/ZNE:1g,Ug$(KnXesJe_rj6FDnWoNmaZJ^8Wt1+rQ`pJ2?c!
%qCYFU6seIrYX$fe&'3gH`=8JgH!scnO6]8oTo,mK*_?mpKA93.R2YW..W:jlfJorGCRbf`9<$X>cL7D>=b7LN`HH_-Jk+p\%cDE3
%0!_qg=T["S$iXuqs5]1XoGj,a=X9^UH.,5Wp8%I*3#;\BRuh>X7_X8c9(m*+gKOb50bF3l;D!2@YPlLcM_cf?g:^L[q<kKNg4Hfq
%)OQY&89_+;)Bf"ZRW$kQ!5;!%l+7hK:2K;iBS@m<Uh*2VUL0m/87@n@)hE.Ue)4I2:ChTST":Qjl.s1JU@'suq,iAl`p4b^kN80O
%l3&9NZ=in"DTf_O:t\PqqHXKo^q@mf1>Jf('JqL<C?,6.<XoA88?@QK,=>LdPH-fQn\r%!'mtYU.Yh#)R`mHCCI%7G.3.VP5!Df;
%G?)sj%b'F7FK5G<8pVtg$RjJ#B>3]*PQ"$3]:*h?T)k,<7)W%u"LnH:<LXD@lGe4anMe(:"iU_>j[,%KJOLG["C)"@fWS*q*Z1E4
%;/?4JHI2h=j2OMT;YJS1L&:#1.OBlgoq1Q>$S@jD#,,p:Fq`V$l,_s-p06.M[M%r^(>XZ1JIET(WUJ;a^m,/7rULY1BOGXI3p^XB
%s+M!C&uiYu1s!'[Y?.VeW"6c+HS)`lo"iL"18(D!6iWTO3-Dl@nYbUA)b<dC#XQ5hF;93p9gV+HVZ,Oi+GH`C`CWQ6V\2c-b0[jE
%%:DS85Os]3XY>N,%UBJ/c:e3--`-pDWV/1TOfG(9k47hWeY":toI?s[$/p0@E10Qa:C'.Wp4JaVbjdXsqc.i%%K/["Df%)/*Z!.^
%hQ5N7!s$SSD]4_%<SaT2\ShULF@:(^(>!P](lpOKJ.dA5%?r3*nm1mW,PK&Z0FMq8]rLMH0m%3'\YD%LXk2/YY)[,OCXii,d1%n.
%f9Z\G4\OB%f!;9Jpk,<-j&^c">j(5'];+uk<AtIFQb`0Sr%3"Z.Zp?fS"aau"VU5Wrgu9Q=Ljk]qV/GRW6Y5-QG"HGNgWXtAZ^^H
%]!QA*.s\kQ>BR*>hYlkd)\htV1[k[42:&Ol%eaUKBPmhmKpbU8#&10%!K2hl)c[EY50.V0oWYrN5VL&5b(Fp`*M&]gh<*PL=8Jod
%rn<p+EJh=?#?&+o0)FY1JuN7iQpNRb"&4/!pMo/[,mIQ4-n`+YKoq]lbA%=pL=g,m[=BOMk3Nb+'\+bOYNK6)1ViIn3#VH<cBGn*
%RH1T<'`M6&qZTV5,=8n.dl=5mIN)^fI:^_F%YT*hQB&3[aO^pVjT[s*)4@*J`II"KaAn(oR'5g&R@IYXF`pWDM2aR+;T;])8\!K"
%`q;YGTj\:K+f:<q>#/)Xj`aEP^Un!#Db"N4p.s7RXBs<Db?F5P1W5`.SVPBt#9,I'7G-[Ef?*s/ZRa*,ELc>oqVH-IN!b:O%A2ZA
%h[ZF[%$J._n,:u35iVB=a.<MsG',EsB:t%+-3N5C3")A^*%D5$Db*%[]F[YtY8U,AhCu@/>tW$lX#]AHMCgl1i4!a\(>n;d*X5/N
%MtX8\X*o3d.:;h*GM00Wi.r&E-^FYU5<cWM5Q>("@0((jK)M2J*lee.[7-O^2gLoY<Du_gCcLWtrb>"PNKNpS<bl`6QW+O",>.@u
%8k$O08/E4TU)'Tk;g>S`YT*ARgY=\DCg=`4V=uCP2`eDBC0USr7%.&D*%!a\EG187h5AASMe><+_.cegM;q>V-N#D]8'uoX>-dpr
%:$qT(ob7YuZ]Y)5=8-KKNfqmKRqUHM>0JlQUiVsAH+CG*^n1SD(C13/_]:RsRkZnoF'roOcplAZ`BDYghd3r`@5U^L,_f7@p?^Cg
%KG4lV^T-NF5g1HNhO>59;!1=VOA]Mql-ZYhG\V)2J.GLQ]>POk*<V2limFOTG[7P'[$TX6UZV(RUH8_]L>PABbh(P;Eo^U)?u0Nc
%AIRi]dS6S:HG,Hd_P@2,'7R.Js6uk-8.lg>knYbWa-=m4[4iS-N[@Buo>Ud0LD"<rpl4ktZ"'SM'tMaaZq7o4=,Z-PVo_i;9!U<p
%/c]n(M7"*i-h=,5f^&W=R]Ysafi$km4%ZEr^1?p(1'1c@8/-"\=O5j"%F%S#QSn$aO[HI'7BBbR,s$=aQa?:p$g9gcSFrM(F$7i>
%N6hOtNM1o<N?`P3ni"jM#cEGc+r,)-@JD&]Is!"Mb*:6"_**YQ27`S$d_!.sOk>O9&dKJX*1NT%MBiT:_02m^.`NV`>#e$F;f7I*
%.WWV\Ih)%E2fThK,9)u*"J)h<U8/@p2[#HCC--R0k$riG3'D0HS'8ALr%jkO6BfH?$Fo!a_'^Q&Ei=FBjLBB]*a]T?4a?cik?X.q
%_QrAU,J8ZA6"Eni*qL-&?fEeikEr<Q)B<4G^!C,s9Ii#tNE.loHQL>48X3-4=jU,3H4J;K&;n[C8u4Ye*VApu?9c'o/Xq9S_i;4Y
%_WrGd:]=3B11aUFhW?fgX9q]'<q_!js2jZ)r4SL.LDhU5en:DK^*n<fJ$II'Zg3Okj>B/JH#IoZFOI'U2%%cofu(suKOsSsA&!2q
%k`H]AWQ#a3-c>/DJZ=U<RLggl)GTM83V_nJcM0I3H?#g@]Ikq/5+'n%9[JLaj^Bh<L@\!ZP#A,>V5FG:acI!=$B1$FmG^$.Y&951
%>55SP7McdeV==Vtl-%]UWA4E/`)!?1XaRduO4-WS-f2-Xp]"\3^:Uu]hqhLg@3tj/6'a^cE2L5d2T>blVoACmSMuUcP&u%b->Kd%
%JM^qI?Te&JSdJ.k.5N5U2Z*0"<sd`LXTQ!p<p)<K$t;LjMQAgj#t>3m^%()e+epX;a/,t?[u01_.%L-4B>XG-B>Q`kr8k.OiA'NM
%F9l44+'p>H`p,\ZdLI;\SQC9rjnTe0pn?^KJQe>U/U1Cl\Z9=,A58t'ojUn#&ga^CCH5_195A/(f.[R0ro1@--gSB3H!iDQrek&"
%RM_YjML%,D1<%j,a[^pe')M!O#SgadGFn`gJ,cW(_S?r=EX/`E_-pjaj;=CEk6;D_V<a_FpCa\B6]9UIW=L1HR=`;D#dS_(C-H%n
%Sd`'dk*Jo<>O]bP0S<jcd7He(g)ARf-Yq[gB8LooK8@Th?H3DO!KX#=UC.6*nXZ$F"oO0rXYEh#qlWROq(%>X=cl["-N,BQYpSJ9
%kPmO+XCb&i"TdeDggY@V\E_`.BB!(d.,3a[B]Yr'F%WgVM@=JIY:'HZ(VM2-RbN?6"_6na!4e4M%.J"a.f$1p#jN0u<Z?rV)iB!q
%aj=[%/<uoIni96>YC2j\!VGom@S-#?<5k$BS-kFu11[!\="H1`WYD#f"1I)IKDMO`CX(Gdd@@ck5'C(G6?gl[nkrPBFP/AO+/BA.
%?Tc[sdcbfD&TKH&F,eE?<p6hW'UNYdg&+HE=-**HFPH^1`ZUD:`3&JDdi(!,oRu+ih4KSr^=MV=Y]75q\s+8GVNMX7&irCJK7$eV
%TDue:OHr%R.C)aLf,ogL*`-QQcUSeoYf=]`n7_bdV<&1dJ4X%%8%/t_7YM7866O#&aFo>G\?)MI<_^B2QuXlu>UD9-A/[6PiD\8)
%?`_#O^[h'lmMja7)pcp9+"=2$i?HKh6H$mGPkR?CB:;J)aIZ2rl^i^S\f,MRZ&cq,5XLBm.^ZQeP]ms%fNf8.B*_[]<n\Z&(8\,2
%`agj\\bPmdhu-Icq-X/t!SGhCci!InrUu!gTDnD:hu1gWr7u;Ks76c9s0"Zdp2Brm5O^ll;LeMO^]3=)5Q:(0T+'tj:VZ^\J,K7`
%s7--cQiHgVGE-UlVn`5chuE;+O8eP8J+q:(qr,Tqit"BPjr]*JrBL>KTD6$JpquQMF8^m?IjDo@IlXq2?fF<Lp36Q0n'=e*07:je
%rc^U)k')=MVn`%sHN*E_?iSIPn.0_,rSp,Ts*t%&n,DRVYpg3tDL1f!oqA;]q;;&Hf?.0SFT/:9s83K(oM*b8rPj,3q"-6.k5JH]
%n)+*+TE"m1+o\Z`J+q"@rh"]?"$cRqs6u(6I/'W2XIjq6fb8l+V>p>.msjrhDu]?WrSbY4^[R$)+67`RnF-DDW";*=*ST>S><c84
%.h?.780k5[X*f-LgWDM>((t4FPgOM>bV0"_\"6$BI)Ndj7K7NHrS(KI5Km8`J6u'4njh?]HI9&%Nb>d&IbR[Zkf<f80#S;@5:IQ-
%1B`T%Ps1??MG9TS!^9L!,]u3t:(LQ@kZ8,:3/'2ec'^129QMWn<fo?e/AFkr=:reJF)@^GG]/8Cmj<9c.QJQ]%cG2WhrAiB=0RKt
%$L0u>>W):?dZh$<N%7oif92]'HN&t$`k%aS>W8&1ZR>e#1Jk@qIs>`IU,3G),7EfOYleL'""os-2%=&$+rbS*H$;0^8\WnQKE'63
%S.1Ytn_9X2G96;O?S9HEB/QEr;r\=&<")9?2U5@-)43llAf8$/)A"V\'6I8He2d7W"Imu0d=+BCh05M-DG;IQdncmk-DjV/a',Uo
%!Cm6'!^NEj#kJ)1%VcTC6Gj]GM/7/?=Uk5)e"=i+IkJc(;bT]nXs8UtSgrAKG5F7K>G5pHr6=]BN;hh_'t+WEaJNc"h&ahR6MMJP
%m%\0bQj3PMF9Vqa3l+ik=t](TJ!9/4NU>A\LVb;h+e)ZbC-S>`=5INT(t@-e%ro:/c-JoeDFlQ/IO"<>C9RNX`4YJK6^[;qc5'n?
%f`p/-NiCIi,ugh:>Y&)N82_#0f.]gT"k.Fkb[qHi/^k2Yp#8HE2pRK0]VFY`Tg:cihGck-N\'<(<VK'j9Sg+O=ia'1NC\.YDhDcj
%,7%D@$E+Lo.^cP^5-3L_MeAHbku*[CP+RlW;`fPT:g0[gK\;0j*Aa)S$f%f#!nG]tf6&bIShPr+3W`*RI2q+C-"37E&!h<N5SNF^
%WYQP"0"o<1cZc]qR<TQ]'Labt0@@Sq@]F<0me"JgAFSA75.4k]eskbAr==>&-l,HT9g`"I4tg.;Ti8%SHh^ZdQpgkj!:4fP*Ckp4
%%4QD.:r06u&<O,6%aE2AEn(/7n7^ii\HO=Rjq@Vj8t2!Fg>hgPUdQ7qWN$T<qn7qm!\:)^,`#Zmm\0e,j9=jI%3_2P9.$X,`HMhq
%=L2Oho"3;r`@*8$raH,G0#6P;n:tb?ojJAedKn,AJR>f@cj!EdO]$?)Y'^R$mu-qLLcO;bTZb3c!Qk_2Z#'*?\2;=7>t^U#i@`cc
%o'[%NZ!=f(2>MlOh*.c+ob*\`hH?]<&=/YBQfiT1B+B]3MaF-N"?'c<niE&cWk'Q(79:TBcrUCOD3[7gm4XS^*2-gnh$0:eq.fHQ
%%VRU8f5Y(s*U&[u9@b@3a3!;]T(BA:J9%0`5+f=9DHllO0]WV_aTkUY1jX>S"mT2Q*9mgu\.CNmeN,u2I1SoO0iB%.Vg*Q-80JEt
%d>\qNacta\*uhDuWK97L+d3N.Hln\G:kgV+ieuAig-&Wnf@$t:LRWQpi-TC)EE/K$P%3VD?.Yt.mERpQ^)a+O8_""g@C</jTa>jO
%bdph#eSp2)`&YkI8mHL`VN(Lj8=_]\]dY?4]lqGmX1u5o67#`8Qe]Sq7(L97]#8][G0Y-WX>]tO@a?X;]',i7CZDi=!o<h_X#.dV
%@l/A\ZiF$!Y2(rB!`<DDgj=pZH?'E[UOdZYrTC-9hO1$<#OB^D-+n=O);(6TK,.0)HSKc]56'LR!t;6X1g2GWFQ_%dVfZ(:G8D)D
%3;l_VZ/6\H)Juuo6BaW$,$(!)UoFt67892@nrW.Y*TdYJq:AtKP;6@'[3PC'Z)G9LA^dmg29-87cH$eE\T,eDA>F<l+@DFsQ@WA?
%C[Gt@%hhWXmcW[IP,GC>3To'Z.m+nOMpjg33+dh11s?m*GRa=f[.%PsIskG\0-8uNNB!u<[&^,ib=r`Ta$:,W3hL.55e&jnpAo$s
%Ckpo$TBMh^mXk",mm5c=iB8jc!ZDEV_quL5PfggD]XqG]`u(0U4Ca;')'!H;9F<R@PJ*bCpGTTP-G<@[/H!A?s6"?k8)PWDg,!`Z
%e14077qlQT_0[r#Y#HP"]'H(>oA)_"b[<:VphF^V8J0:)kD<emclFX]&G=+DfWT-Z_=blgp@-olh^\jU$j8pP5'KCf+IkhFZsGrh
%YK.C&PeP[Rh>tP"+pXA-cs%na7uWfMnHPJ9:sS"3;E83if=>TcK-nBBnd'3^I()f@NI5Ae\`Jobc4ghi>u$X.$8et:R?'`j\$[k\
%W<e;(l0T1_j[;*,KWFDYX18VW#7<e1>L-mh\b!P=NJI95(R"PNQueG43hmisZ6AKagI6AhA8HCVP<Mm4rViH<TqF1`?RY4gJ]mb[
%jm-$o=;:KMFWurnMt=B@K*/iVi]&U(R3B9mLQ01qPV_2"3OB(7#j\Y8JBkg0Le2BV\06AT*$"mSoDpCc9B]\hV@Vn,4UHg&==s#u
%-,i?s_<3"9d5jrQF1LW(cFCT3h!j\i:n\O\<-V?KX-\ma\\t#FD.L4Hc:IT44ZL!rTOM+e1)^SS#e4KojCn[Ub"ou@pa();_>[l;
%8Mfp"`SeZ8=H<26"&QDO1(IMWd7[MiE'cgb"m<8*(6("*cN`[bqc5m4EdT*4J!P*,nBk&5^@hSCEZ<UZEV(VP>C(id?!X)bFlH//
%I>[fB['O?skf(]EB!D1i+f&h`h6S)PCN@Kl3b9YOe6mf/1\uV@@,(pg*F,VP7;*Op9%_UZ`l#(4bc_,iBUENIkCfX1FC@sDDDb"u
%gS<O29bdoKT5CTtR50Vm(#C=h8V]W2nk2$<\QpOZk%MD8i3Q<$n%<SXR62@j9F3(]),M)DY)X>t#^4FiHY<7`\+0H(S'rHsSPB\<
%Ni0rUr#TsC3B)(d+/FNb?00dKf*Fc7oQTH`^4M7lhASDP9)]&d(23t-gi4@7:MEBL6aJ3O]qpgaph.]^2bPpR2jOo*V`:@aod3(I
%3<0:K$/<P6D%R)C@TeX5bgEfM3[+dX[BBQ,Wtc:s/QVDhn]'7@1b=:FlF\nWs72(,VgY)C#96[hF7.2N$IFa[fX*K+)N`YZ%%4.n
%-;i_iH`4o@+1)TopWfdVBp5n=8)]cjeMnKr3<o8(S#q(oB!]i!e0Q*mP:"K<a__<t:X*B-)0VS%/7>s7826CiV>pV%J'oL(gKB^#
%q!JRA0Ah*NLJK;m)mFn>cc4$FmsU.K?<i*V8.f4@FMf9#'T_LCBQ`!*A'kOh7J+FX>el7^pZtu]/E?C4])f`Ao?b;AT@V[)c.<h6
%mWhKKmpe]O?Dbe8Td?5g#eRftqinkJ>gN'"nr<D17t9p$6u8i,]:iPumIG,8>YX_;b_Dd#UssYBl\b;Wc@'kagMpE_KC/@mg5YdW
%g?l)oV`R-?.j([U)s9RjLVcBZZTD[JPoRb0l5[udRmn1\f%G)9I]Ps2<HXbVrmm"`qJ..KNK\d&qDt]rX%DPd>?/@Gr[gWsM1Fsl
%P)'X/gBZoj(]N3rhu0qne;FDU%]AUoN728bf=p2M=Rg"knpbr<^@rATl`-S*YT#69rnRFg_=fB$W+Ta:%+Hi;,<KPQfat?o9P&V9
%0TH[ho0K\Jr4+;9JcFO%_V+Wq)lQ8q"9l<>b;>pSoLMiqFE=5L2(8%rI5od#XLA-^\D?O;i/"u[p#<8mN/P1f>Tk,fns4/)QZE#F
%`[E3.h&l"r$9qOL)u0F:Q#!l1Y4mc/:`@Ml,U!-r@ogJR8N>$I3>l'J9W]aRO9YrcIEE1J-p6S&W&oiFDOgl5L!QB4)V:l?Sa9_Q
%SXqiE5OCQ2<&?[c:,I=<)39N>CecNj:c-2\XGp:O^V0'DJ%6af3"UJOEpkRJ([q2IL:+/aIVuF!/.$e`S!JYX08)Xge@#WPeB:8_
%>Wk>.B*SIe(bSn2G'YO78($6N+HtUP1dDq'!#T@I;Kd6t^"dCI2WVQBqraI$lW:8kp;C8F*F_Mrh"d=0CVUq3`"LAN%eLNqU515T
%]^eru"EL'MT'irEnhI6GCWP#7&84TBKQ\fqUod'dVTT8N3HQH6_Q5CdcLXW?1Y#h@NUJHj4%nr3[J9b##5sF`qQ<J1a)UlP#]hBE
%\J#R'n`"qF_qqqZ^D%AEM]V<)(k9C+I-rNa//N7r,cenR<-</SrgD)JPeA&rKWI)/*\>)T-X+Y_Co>Ci>GkM0PAm59q=F:WbAY04
%&:!@OW:T48]l(R.$(FD`*3>dp';#6ATU,!B9W*\#QjR^V\T!]Y^&#l8#pJdge.iR-n?"*mNU?rI,l;9Y7kdVpER<()2G>SO67BHT
%]i\E#r/S%Wa?T>tD>XuJ1's93`7QP02'CcK[R@$m9,\B!iBq*I,#J+F!`8<"h,$7T*GsYVZlt;HV$b>1."=)U)5,RgcbiM9:t5/g
%.@,@"4HqFR0oOE+*/UgB!(*u-EM5P0hQYYe+uDaL\jcgV5WlPM19#IEk]Q3F5B4nSECK<\QbFN1-$JZGntE'0Nb"IMkPt$7NdGAe
%@.4t`BL%\)+RK/-WQRRZ<TVV*$E)#nKZ_eg.5Y@tRtho!O<4(N+uBGTE"=,gZGq))_]qd_5#sr2G>%ua-pTS./dj8KkbF<>7KG$3
%(RU6cW=&?uW89o#7u2H[CN=+3Ec'k9/A:=,C9Ok$IbA!0SSN4cSP(4i="h]'?aFkMEV#JnU:WmjK0!uC&V6%fF4[gj]3OES(J_f-
%^GaF"fg;uH=1NHs)g%t+<4o!j].KsOn#XMnMmjDVi8./b>bdjg?!GC]8_cYC"0Anq\0])o0G3q6FKY]W-4u9&7BL"@aa!$+9Zt7Y
%>n92k-R@LJ&$+,YMA;;]!)ee-4lccalU9<<WG2KX^IMAFL:Mc=m[F\C`/CNpfrSYM$gYSeRaS(Dm=B&phKd^;lbW<LLgnr)^d/(g
%1p\R/=gZrdWu7VQV)sOhNM^7!MNO*^;Y>.R(&3;'*D,j"E>?d5GVrhUkuPp+bSoT`$GlB3.-A(Z!P]N)cn#OEUF;EocVFV,AnlQ)
%RH?]><)#_Mok\;EZ*AX8lO<oO4)b#ZS>HNg8'FHW+,dQ(9Ml+d?oE(mp<bpDXF(0YR\F@U4sF8ebk'm#)XtDV$rJA=i@b]7^m*-f
%WA=ll)3\9?^.C!%U93-IO8YcP-W:_`5BqXg)/Q1W@n1oc;NTf_Aj%ll!ke'oAcGF[o]ab)kELA2[0EhNGZ%0K[jjNnf0."m_C;Vc
%c9LYjeDhi[Rihmr2/P_;;l#ti$+oL`7lo#_+]bihD438QehD@AiX4R2AF^]K7L/<WRN7"HVDY*$EDs.+%f_p,(+kG5e/TrN='M,O
%e:8eS,SR8DQ&'BSP\f^8JX9::6FHbBng/V<!VkM5b&&Z+WscR/5WepTn4[%X)#n&J_Of,6(,0<H'O$*MDP6?g08TX7_:Jc</r-Dl
%M6I'k:>G1'=GX%\<XOjW=:4tXhoFp"#SsM%Juq_4bJG.F^rk`@.qH-&rbSr9$IO0_>,)OBNp/bT)D1Ve%60sPeS@chNLm0\MH/J$
%dsnN)q&,AW4!^PgG!02,h,4^"D8@F`8g?1"nurfKf%I1=-i\WYRBf<RNeuhKqMjj`@;=1(b5i0cD"L9dTQRuJ60-o#h<:!T6u2bp
%?.3$LJ4&,r123_N^7\?jqt%WE,X_eh7=R#pNjsURK]E01@'2]%&^"(caW/]2H0kmPgpJYbY=Z+M>V[nnERB(Lj&]7gL,2D,@(ItH
%gWH0F;S?BXH8XO&oA/B?a@[u^l;3,2e?CJ6VV*gK0K`!%QBo@HgM;o,&=Hpc%gbGn51XaL_=+d&grOSjYEl'Pq0INr=>u$2>Wie$
%7$.DaekjT%7_E>%G\#QAXR/Cin@e?*b+H2)&OB-ZG!:n@4nABaXpEEV-t]K!,)("<4jiF$94X0p2d)[h_*Bli[4Gl@m^"0i-0bL`
%L_2_F*_Y1kg,%OsDu=?cjcGqFQ>Y.V@gY./@k7q@`V=gk;gPZg%_hHY%PAD1%LHPI/_@d.I2<]1XB-0pg9ZnRkjcJ`&l-].#%dD*
%\^'$"/4$]jP.;=Sn$0ajOpZ&9lc?4%FDFTRh1spC(=XFrgUdU4f#XF=OLpBKp50nf9XUHXaa1?\a3<oVLs@o[`[8"K5qHC^Hc<g$
%P$/XsD@._qGn)X3--&uN]])G=&'X0cq<8#dj&?l%SaW_'H>Q_]]kH2]<P3/Xl**XZf4_=r=\CQk@TN4RVW*X1NQt&dA8%-0*:b>?
%6(;M2F:K:mJUEjE#+Hn#D5M?f3d-?+jOZh)I/:J$2VTn:Ui@1ZS+'2C+Iad8@@>CT8Nq'mh\8\^9jBc0f'rP#IppB'%Q"5uC>T"s
%AmX<MiuSkcXbAlb#On*ri7]FX&(_h>38l\j[k8Jo.t5":%oBa@`Md.?"VC[[VOq(B&\Vi&qb>m3,l9p5E?e,P<!!bSeu]ND&L%qJ
%Ij`*Ok54HnSA!4_i/>=NSa/_'E7^(nI48<7#9)JOR0ZY?6p1SM>7i,c2_&Bl,"c+H/Tbt.Ud4TYM,'-Qh/VjU`B]=4,"n2q+CIp'
%"O6XRK1TT-8Hi.@B3TRgQftmM!?+.r)[&58@nhigpkp-;=Rh+L\*iNt\K7&NP%8;tDiV+k=!*orQG@Vq'36e:X%6qr)3ScIH;jZ[
%q1XN!jASdN6'k'4CXKH]*:G(J\4iJo>$a5T0m.Wq98J-%QG/gh0_-Ed<,o,uD5Bi!PFV-Mn2`ZLU*r;+5^`rdQ)pe0c3Q<Zk]<rk
%J:fO[3^F1qHtljI)EeT)_I77ce!KTn@K!tSkGa`6'#R+AUkLG(OXhk%Q\IP8E.bgA@q+Pm2eTN&b!DRFBMm]0217J5_7I3)dd6d6
%+.QR(7<lahaOL'KX6BP[)QC'pUDQ*q$eNjEDh_-bd=pE]UI!\p/9%MN;;L=rAOEYXpQ>[NGKb!!:<[/sQ4Rq3o+"hYmO]FZOq)m*
%@j.o(ejg>H$q>Jc9A%n5ZNZrZ].TtHld3XNPaGnKPM^1+E@PS,Y#^C)I4h;HTbD$AC$3c=oTQ3:UjVnOD*Z_'ObcT3.HP#9=nZ$c
%T4dNFX\eml]9%4Q1CJ,I*<WGNFibJET0\sV=IU(S,jd<iGh7mK92I2H\''YLU:0:<,PJd%)0V)=Ndgr`6CV!`6_k^@VkhhYo`^DT
%H3VER:Gs4.,s"*HX1>.4B&"b-f7%1?+I#O:XA$Oh"YK)^Z',h)-?Unc5i["PX@W?K[22?]VS.ri8E4.W?J_sa."n=c`\/BY91ZaS
%)Lfr7hEgPP4/f](/G@G-$]Wcn6LEkM.X/?uq.'lX(L'E;Cc5T-69@KXnlQ5]'NgZ+&JeS>\WH[unl_eqYVpM6r3\]5#AI4g\P-A^
%&UDL[`;Et<f]0[ub!KO,7EWc<*a0TYjXBt>$s&A\mu>2r=^VF!;Z,@IQoXiMXh_VC<\kIr*otCY=oiosQ#cl\Fcm2^XpIA4>\EV(
%R(CmI;dh5LYKl+a?mTbuZDXf.V+=c+,GfsqaDKF.FU*VCCi'NfTT2VG>.U^f>mhrB--[Q\GL0$RI?dG/>3FkoJ?kPFT:?oNb9nLj
%bU^E>X_t9$,B:>1eg6K1Boj^+$W6!2E'c*s#Bs-GmBe_N!$!+L9B2BD@8I1q-@GpNIbS[S>tq]SGA>2)E_dk:R);fFEp.JWHW`1?
%<A@H7"dc_/6/$oP=coL3.lI\*0lYrIS<Pgbp_$b.;\q<Hd%VSITr[J'-66;IcOHKpNLY)9)E;#M/ARN9LE`:g&uDh-#V"*]-7(6*
%I&%ZIXo([DI^#We`ZZp9D8U-X:Q!jnJcg%2=OCp0K3/a,[27UR`hPIW7X%^VU3#FkSX#;\`(ZMc)ZOn>-I*)N:=n;=pZ9<u-7'_B
%DjLR&4eP-)p&M5*>S5JJqX?)EbqSdMcV[d4@BCs6roi?4Z*G--0X)hg&M41;Vh'fa)\+'O:Hc5ZCJ4X$EIT?lEhopO8lI\`E_H]P
%$t>jXd(l/8`*jg=UT<m&Kg,#r1!Y]_.pn")Xn6A/ZlQ88TS%rQ@S5?P^^t&[VE@2apKB2Ol_K5cJ^+m"Z0W0g?3H'mok!S_*+Nn'
%11#+BZ;MHsV-JA*V(>XWepLB(=P)Gd/O"<&g6`1<fg)n0-*FqdY*6gd%5<?,]m)0;-&WT7<192&gSZ'?\]@2Y]L`3/RhREQ^7$KE
%a4;h@kLm;TR6qC-bdEc5o!rf:5IWF?_2]/%r2?LAgRD7);087,&`7#3\'n$<ZPKGVeKQ$.9$MNZMs?I>MR]l`o6QaE!2&!]:tkOH
%>MetAU>>#.2,-6Zg,3d*9ei:E\jkR/>H0G>]Ml/K2:8#b_&m63XF6WI![7V)s(02mZUlr^.VkXA-=@B9_-DAVJb-cV_&JQ%*#1sL
%650s0n4js(ZHj8O;&7Kk6><7cFSo8g(5e#&s(L-dOZV$DK1:cR4$Wi$,d/_:,_A1^R:a5#o6^:u4b7NkV?u(bNs/PHViqV`G1KR)
%W9(D2D9mq_(\=mIQ1PdHOqEj+pNU+0&Z.QO*C/[0EUZPC!oRUhqI'9c@:qIWd5g+$e6;p;Pi^AsQQ1"'lpOP:G%-A?8"X,H%$*]`
%GM`1=45N'@VsXFLUhnsm(E)0?leoWXR\S7!=1tsFK`tUn"jN/;=Hr8/q/7Hq\[r$']!AkPj=*qsYl^)JPZ[Ut>/G=Y<GS.&qlsjr
%5U%L`R1\aFWM:N`o^ip^bE52]h?o6rmB,mKNF-m#T9m%&eoCj"4#L!NKoTT@Wcd-eU5@^)711J_2F5'CeFaHUrUfa>rdlYo(aZ_k
%p#P+h!d^kio?E9(nY2,gOrp6ZH$WpXGICO"*QB`)E#Ge2@pg*uOA<[EC8@s%+\=.;VNG]L/&6Jh8c(O'_-c4,,S>)T?NM7oC?ePg
%Yoa_oZ1oTVBSukYiU\PU05;_-'$4tN:8]"bXk/2DHb"$)"Ic#XAFoCp[nO)]FiF@Q6rUno7Nj'=Weac"js^m@=<paaJX&R\>?7jY
%L_>V@G*GRlZ5e6ZSLqpumLn#5$+D)=D+0JHE:-XQ6sWk[IC_4E5Fn:R!n6]T*,O6p8QuR;F`k=c2eEffg'kL2^&HX-MNV5mMNUmE
%_4\M5WofM^-Uq]:%2HDcWU8nos3)ch?7r4+B1]eI/ZJ8[8\P)r-0<]l$*SqN_0qlWStJj_CE71?-'`h3=D<ZG#)M9_p.$!N>Vs$`
%cB`&b4,Jp(W0W@&\M=7!+dj8sSst")jQl-^5Y_SlJEN;?S><-fO1Mj#`4=Pfp2?!/cUOp9l`B<X8D.Nl80t<*1<.cpq%-b&Co>-:
%#6bcYVA87*3omfW$@Ei5VWj^hRLe73CZWo-c2oc:*4+`=Aqf_-pIr<gR;(cJ*pu72F(Ef>$1.PY#&=3b+`%;q.2UZfWQQQ+@UF^=
%<L\/l7>Z/o+FDpPM(iLBOO+&\Hpjj/P.'G&N5``H637N(kh\1Qf42jG8aEL^RsH?U$9cCo=JuFH/<[?qC0P?KkB5Q9DnEN@So/L>
%Kt"*OO_Q-6TP_&AWLi7^lW`^V+[`S4k'?DW>+rKlKP(R6G!%r_A-8Jf1(_d,7"*mG+d!0ZN-1OsIgtp.@1uaE#rs0M`PtS[)U%Bb
%TnKLfL*ifP?//>C?g53TOqQCO`#,_fklfi^P'$Y6N>+7\,%,4\f`5a%^2N7DD^Mj'V)uGWJk'gtdRG+2Cem8.MA^0l5BUo2F)@Fo
%A)4;IrcDcX(``,\=LuN\CJC'dd5$PW1aKHn?^W+LRF5A;XF*Qb7=*giJ!QRQFEXMIclm.i9,A+7%OO<.K.Q4#Ub)&qA2/^Q"Cdd2
%%;jNW;OF7A_m_H^$^I_7WB3q?HnNu<7\^ssCPlZhrT(+!Pa!:jA<h)B&M>rY`(;<E9`$NS15:i'3agY%kT+C2p/-Ujpld?$;fcLD
%aA5OA:!U:8rFOiQF2[Tb//m)J\CV@EB@cT^=`M96=N;Bcc'1c'J(46n1qI]g^WQ5DGAp1mB,L<A%L'3DRGV#]5qb<B.JlUn,pd_W
%feXta:j?I9>##)ABQQj9i@p1.*[100;E5\E/5OXl.lDWc!15S?REChQI6K7*Y(a5W_gTu'&oW;[V]E2;Hs"J.@!Qk@Q^X2\.sIHg
%`<&goB8W0kcbPl7H!3oK\,Jub\K(gUdQ/.bY-Q^B-)4*YjX:;K'kXjP(t=D.kf>M]JGrNp:7/IMq9e\k0!cu503]m&%Y*sTggZUU
%VZWe4)t.oXE%c:jdni\%D,(itSuT`K_f!>:-3&[i"D\"rh=jcsDl2?bedC?J/ska3WWY`"d)5e/6cE`*"DGV-FpBROdCC9NQbGPG
%^7#\#n9@d9WKAM1-`XR7KVY3^-PiI.(e`k,@AT6?d9&"Kdbr*MHS!i]VGOaR0%.q-+FAaH-Ii^H@BKF&L).sd<NMPM28r&F`3,\m
%'6("a+U!toNW=,N9_9e`gf<u6/A&BmYUkg:7&<,D=KhZZ::k:"b8lRr9<$(9UptZt7)9D`ZW_I@rQslh`?#4n0'R\*h(9r=a;0.$
%elA*W3bYmgDIW'O*R%_?_)J^`;='c^R@?';nrOR@+Ymtd:\O=KMP*(;>.tW))X;K7nNhP,*;1RQe5qL#8,-j/jV@)Wf\_BbG"T/]
%PSJmlTjO)OQLIKd-3?A/[-9ZPlFaLVGjX+'7MM$p;#slrG`\+b.>7K+ZZ_idK,Fr1NLRF]9HGP,m@5](/X.J]Mo32'kk1G5JGA&m
%+e0j7AWE\D&mAqKXV.KgU`D.a6cX[2#L0m-jC.F5PS^>6COFZq:kl#N9Q31-f8["aNYKc@<^Rk?qmD1Y>ZachA8de,+u9ifXR2]A
%8OAe).tb7^Xd7N*h-(`dUa4iZl#M3tVeTbmq4PSHXIVNLf%(o!"K^2uOdH`u*;SY1ekHTWph2`'',YR]>2j`)XT;02W[3dn'&-%X
%Ca4F?X?G=Uf^e3EA$!=jREQ&!WM0<<$9N9$EET)fR>;&KU_#"dfpF%Zaos6Zd5Sct=1.$+5_Q#)du$DITJfpuIKca;IJ1[sbK<im
%`@$uC6d=ekWkab;m6.SGZ0>81't/&WW/d3OWGQVG.nO-6O.N,FeK%ac8V-*+F=fRP!@?X(>`$Y%3%E!+7cJA,+cK\'X_a<3J?5W8
%DiWjFQ+'o%UD$D!)@@Q:)a?Uu?lVJi`F?iMbXtLD!l%U3VqZ9gm>gZg5nRBUFPl8tcVbFd.66uX>mG",OsI<9LniID/*eH(K.6U!
%-SJ?YL1Obt1PTGDq!P%WSl2GqE:r@7<X@L;3L%0OrK%-7XIUGMh,_VTh64NXBK>Muq?2'CHTu"A%8]hqB!fa0SVQ0r;XU!/OA533
%HU5Pf[.-K#MQ..'A)Whd>%ETm#[6J-7>Hb4P=fa#l`TfN8TrT#_qA$s,)#281ja^WIOSf/W$]SQAI$P#AQP%L40Ye*MOMHEbq3N<
%&X,g(bN?>4V%<bY^djmrSe21V(*)LR[67u/eL:c/5MuW1#[l,uc7)NNP3P3+Emb:JL$dZlCI1EuBF29mHiQZD(Df8*84hu@la57q
%>8OHX&-Ibo?;@j95d5e3RpfLl:mWB&YThUt&K2KqPW1V\X?P=80a"67gX-Y3iSHO1#&WZm0l=2@H>n8]eWsN77s),[dp&1Bo?#Z2
%ol"]<Oe1Y#JU!]"?m&u^-/1KOf:^HRZ#oAq]<uS7DN_o+#O"/=H1#:'d86%L4L`Y"jqSPlQJZqbDG>We0H$4-5Qc1d'36OA:i:?V
%;#j/1E=%QJ.D/Ri#VQ/[h8tN!"R,=E$RH+2/oQ>$7]9X3Ke;Y.4a?GHHf0RDk\p!R/8GHiQc:=6WP6ObMXN<\&eKC[Ft$-G@RQ;8
%TD_5!KbC^r,@Jl*+_W^K[m#Z-I7\MimnVD_Z@l]*J[WV&0;A7`!YB2$Tq`G[A*IWG6ECcH\9inCneA)8ca<Gq_c)Qu2#3)rgc.,W
%."Ij?$AEaNY]9>/NhR8j=Sc=7SnJAKQ`_f&_Elu]$,A>NFUoMe+cKgtHj*Z\;"o"hQ1`0sLnNhpqp61CIeS&EKW_qhHP^-'SLH'O
%q\*HBA'*)s&2?X%[1JpXVJ`KBXn')k)R)UrS*A4q0oT8_GKK-1Lgq24,E^DnFb".\$\F27[M!"G.D$[tP_qtgW4ILW`EF08OZ7i7
%05CCGC.HVLIK(\SHS<b%o`u.9G?#G$k1[/!gu>n507T?Ela:U*h\,td=iC\e27do0o=t4Bs&?:EIN"bfiO]V&DsGun%q#LBq];3h
%i.IU$NA(fsphRI&?1N$bLcXU!dVj!H-7%ic:5,kQ@<*_9!/o##N('.$A3FTRH-\DqH6^FOh-p7R&"J!Fa^e/rJcfr#JQd;@>9;?m
%9k?(#5%3^dOB\eA9[tV(R-6-PCF!u#Lm,MR#8VO'lKq.]hIc$0rKmCKMZ(@Wjf<T[e`OmVQL@"$[!_c@_<'GGLA1,Wao6Xe>(?>i
%IfBqnJ'(j2cornok-bPD3)r$_1bQ3%oMr;XU=9%))6TT(Calhg6Y7X4SqIL>$G3tPJ3tdKdYgOi)9CNH1fuB[Mg3"r[%s?4cD>p5
%ifR5lWN7p!alF3b9V?>Ybp7KLdraAsF`$Y:%/!`.T(%g%Nrul2+h7,mDsf73Hc+cQo&r>drBu.YE;81K%`n61[d2=+Te3EDLqTNd
%i,u+K8;*Q;L2;IS%*MQ>ZGC]\pt)DKDE8$*)DU__.q"HUYY,#\9q[A`^nsp.@W$ZJ>O/Ip'*q79o?/ji:T$b&f;,IQLf+<C]E3F(
%.OaEe*&^B-mZ#it2-1GANO3j'K0oK9n>+uIMDtp1PfgO*@*S.<2&3d-%Y.M@18TGF5';C^]qX%$TiPDp9Ij:X981\]&#^Hi.gVf2
%@(oXp>HG.L0\5\BC$/kK/2ZOG6DK]e^>b8QZLi=F/DZ>4$TY$?25!(^H7l;\C6p:+,-DZaX'-*a]U-i%U;^7imC_7C<bB_L:]B9O
%dA6"kmcCif;&52^BETfALeTJq=d3=k.BCcg7r8IXEqq8S(p_4eV$n@i,$>XW;a[Po?_>MI#<+,n/>\;Tkr-PU@8r7K,:4:]oY^ma
%P0_W-JcZ#TQHGE4^C2Eoe-u&s=(']%k(:QA,:ZWVbj.*dP>f-2ZG3[h-c&Tb-:pcA8'kC(!.$ZVKojV3EIueJn,;[tkN%O_j/kQ#
%RTXj5KNoZ;UDb>ki"m=s""_pd=^ZtWpZR5s25MaUfZO<W&PK@Z8UB>6ea%pm]-0.meo'kkOQq$%!Jp23F1Um9md#JZfRdY=A-_c2
%J=/JgJH3"(Pb(lkKD#b&r'f.5%031(XAZc)"j.jRCe?IDALlO/,^l5!R.jNR+(]L-JEp493i?!uN#?kc-(oC7WU!</WoPr\e^&KY
%=+O5ZFW&%EUl?lBdbLQL>A3K,DE<$J+P$$dWB-@#)Qa'%TAqq9<6eIC^*^L9V<+J.?b8<].nSh\,Q-9Om1NNZP?1Yc^&DUKdrQcJ
%P:S02es>HeIN%b@F?cO@``;pGRLBo?Y8)tpmN^rJ=[r6?F>&M&H"4k'C9<8[cLn[D'8LN!8MJMDol8'`^%A@R=\"mbb+Tt+`:mgE
%&a2g(MfU>I,.S_A6HbjndU4:ZKpFVCYj6i">X#35=Mq&2bFmu<-ndW,iG.W/-S]]XdejiJR<6`RP["?ja91(=FT2/@)5+[F+Hs=-
%GmXJ=<INNc`@2duDlHa"%jjmSQ1ACJT9(@]If29,eoM+ejQ(n\<J<_u[7$o,DQ5H58f<d%)8(['Rl\1VO3JESROEJ1;A]+]97m.R
%@6.U*j4/;8OCJa5'])]BJ-FGS'6aHe0&R7F50VO"Y7pST;j)@B:V;T7A4i%L]uC'9kOm\:i`Vh)<N/#!DmbnhVc8hb!$_4k-_#(?
%Fi&pLQ)KEQ[T+?B^#[M%`6?\SBq:9NAY&^1S]^R=mblU?D9O8FZns(O.S*]E.km6+(P"W6rZ3@>#n""%<P0g@'@qL1_>noP4[25L
%QU%)FX&M\g1D8jl+&)/V'XaL7AToC7l`K^(9gnAhDnoH3nT`p4"185\4U>SD9(u@qeNObj46\otd[rMg2o`$J)V'3)Cu_8:n-HpL
%IBFb?O'MYKS,,=oMC%0LL^&rLS,kA/fh#@e*ig?b`s4=?SAVr9e\Nm\X&]IC>E5(M2W](D_+7uIKi,e0=^2J>$Y5cRR$>H"X!CKO
%6)LST3705.-@%iQpi/:I6tf;;`Sq]RLV,DGn*bQ"G=Ur(J&>AW=SZF5Ck$E:,0kUU`-@tGa6Z7UR6HHiCToY?/glqE?ZPa0J%CQR
%l**"l5qZ?Q:N2chPU'(Xh"_hU(\WnFESMWVNno;!W;8j6NYP5LLOaIX0,&1c0"YD,I?:XOV^r%R8<cg:NqOM.G\&1:Q$ueK?Z/-+
%AE;mZnTmZoF>io8]#2]l&VrXW<u3HB726&f?p<5!Ik%;.AlD/s7L*+^)q^(Nd.h&^)@jZp/nJ0D2h4T8`''GIO`[VE,MUubAEgT3
%.O@4b0bohQc'g2X^s2DMe't(s<qsYkg:Gd=XrE%#!.MN#SLB#4R)2)YdlGj8Q.?%pD-ULR/a-32aiW!W"6R>X5M!4%V\P"B%#Jl-
%3M-/\RbpLQb$C?;#k:o+b['ML>1<VLpVR)_lPjfdgZ6+n8f%=nEI7"c#*(",/J9.s+JlKkn5$S\\o>c!=-[ELkqfJOKr[i6gGEmj
%X1t\N+^+=o1W)X(WUlbK0h>,1BSm([a_T^\0g'q!"H2_T?6:s<"@(es3@S1i<B]&74MrD=m6]DAYruBAqOA?-q(u@-RV4CS_k5't
%`a8TM[Zt[*paRX\gDoPncFSL6`U>E9g+_VjD%rbklHQ\ua@_h&ieJ8T1'6O1nC2:d8YgO+Fl"r'l>O6t<6XYX9BM,PkqD%n_:0$I
%dT<.#nUlo5]Ul6]0h9&43>XA`Htk-fa=PU#AWQN<535n5Q9A9D:pa?o&G3f=ookT]=UIU\<an<qXN1I)/N#3O6nOS"?<o'?M[#?3
%7\$m29:hT-65l0C36#en$bfp$no?9h"8E%:g[Deon<PJtVO4SJ,8f=dIAia1!BQZ6k3,r6&4Ltqoa1q^8$D=$+"Rd!qlEZ>`tG(?
%os@FI:PIfr9KKu9]jDgZ9%Mj_Q^()T^TpK\WsYMk3H@X>h/u'Pn;C*M+$TRhIF>6>5DVm3cc:%NGDfu5CE>F*q(dNjok%tL_-h[L
%la%m?]pTDn'TY0aL++N5MIqW/Y`[-8-Z,hH6]BW143(4CC?qs$Gc,?T\Gihk%0k!l.?u*k=DCH.I;-j[E:2^j/%,T?8QKU"F*Xj$
%huZrGeS7fJS@iu&W;7$jfF;)A$:ai&AI]&K2a&j@j?;=rYI'_%Qe[4_aLEY*;V%eH?tfkqQP$rIgG&n?@l5FmqW1jn*R&grEN(c"
%"f^<O&9lp?]'nc\n)!QB5C1@WhgYKh^V9Ven+l:Ehf.'E]DqHs?%7:s)fC"Oq;-O<qp2kDH%<s(I"(;L>G#ik]D&QpIe.nI*khIL
%gQ14jI/EI2T5QsZ!V"o,5(Ln=H3&Jf8,N@1eAIjX?[gcHn@)bN"1CGZ&+JsV4T\BQHThK(8%esgc_Gpi^\kTS^pbEZ%62fYpC?ul
%4oYNZ_]FC_WCM@>Opd=t#t4.Squl?sHO@F4_nH1Z^?7(UJ)"CUO^0B-Af&/jjA@(;:s/?4Q5-@O#E72dBhkAN#_sj5Uj8sD>9PX.
%)psnDUZT-*+?)kAourL0^6?$UoApsAFjefF]-M9*KloJ9X01c%n#Fn@-SKZl(2:]+9OHQp<g>?rBe)<LFo1W)2cEluk%!0M9Z<:%
%7;l>k00UJHHbS7j!Q=p-L6,1p5)=U`hCut<^DKN.Nt*Jn]f2=e5<,0?Jo%B*DQ?Z!\gYU%f@?pH6.3o.AIJ@bo8dZaduegOQ<r)r
%E1#FI"]VGAeNQ>bUJZ4XJ[i"9@;<R5RO"n[dn%0X%/_V\A1mis'be4EN884Ke4671a>GIR*LAVG20ID[dSCikoZf7'hC;7h7*.DW
%^7)O-.$IZ)$8.rtASH7t>ZVsVLomZ,+a^2g/f1QU$*o`qfY@;b;_V4pZNf9,#t>Sq1*+qqEiaKIqp!/R!Z2?>0s5L/,R?Bt2$3#@
%%Yje\8b5[\6+Y_%AYIPcU4=Mf5Qqf)/8dn[f:jsbE(Brl"e"ap/?s&56\;Yrfe4]11mDfOl>H\;;+G$>TGiqr?_t5eii:?=9ip!Z
%>$jN`eWt.3#s,8I6mq'g,N&i"okV>VKuJ@@VNiZb(__)uYL]a'MiAH3i!FXOajue-$=EJtbRk//oiGZ9!''rKCdd`Dk$F(ZNB_46
%?+"p!jSAMq*.*2-_9qGh&!+IK=qAoobON8uX5!4Zs+B=FoQRH*"f)Wnp-dP`=-T[T-Xj6dWVZ-QjFBXDUOr-b[0YIkjFMIei0kl6
%aJEt@31pE=^."Z9>A4EfL%NWM];lnVC-#D6,;Bf+<ii!0G<*sUQ5+Q4qj_0MY<\2Na4<f`79!)?j)^8me-fq!4Ea>nmXf6V>NVhF
%Dg"):F*@VOM4Z^0r.Tn2JU$87@;n@"kWlejqo?8E^[Zh<[m'?/:jWH2K1oVec7MSiYgT]bmXt5JDVPslV*BN&BRaT,5I]0dpB:"1
%rVhNoj=65nDHld0'LKc#cf2>DW`J"P&B"Th789]R$Dot6S=FYb5KB"4!9Fg6%ii9c:nGRt/+WfF-(/.4T];uJ''s_Xi'b6P>r@[L
%QHQY+(8Qp8aI,Yo;-p.EE#^@*,n;n_Y!_)ikE4[%.4@>4I]`56F-6):Q#g:!c6(D?.Ct/<bN''W@%6*$'Z*:T!9R^I[0DhN5qpi(
%F9Cn6k4pE%91u4n8iDXTS+#dBX=oRs"S@5YPqo"DF_+V]"p:=spj"l%D#.qJKgFOLKbaiC[tR<:-MbP?@7F3.]*[Br6/Z_C\LeTj
%nm1^U?M?nloAa=I[/BElpno2Q(V]e9aF*6<PXJfB10reSRW9RsDCNZ#&\1p^QQi\n29G<?0Y$,",XC;T@BolR(_u=*V):NH)fd3E
%)U]NAh%;CO7;=ND;Y650HtCDeW?Ig/-8`fhn497Rcp*pkjImhpW1+GGKh_ZS6SN\H.aK<)`jCK+Negt#\Od8jWf=L#?bpY1C:u1`
%HW;+-\nQtRpl0'd\kSLrQLuq[qtW4^j!po`a\R`1!p!i&qeEjGLnGUd?sU+oP#THsp1[QI=be\>>aI'u(r+R3C+,$pa[\8rSKZpl
%Xh6=sEp>%8c\W(;h"ZWs$Rl)O1g$Q;1<XuU\gE`_Kcl*UQPj^JUIZK&n<%(\K=;pi)qt5Pel$9?<.Y]XZpQ-IetkEV%VEZ^Q7CHe
%]%?P[UM7L:@,1`h=OL/eV85*Boo#k05WanHJ?KY%')5GP2iO!tbc8`H93aX*S9C$_QZ,ZY8]-bjf]"^:Uka)FK]Yj`/lbTn28&P%
%G>G?QDe9!sU[Js]&<FMq^\m<m]f:B0Vpp>QFD1p>$<!$&R(RW^&KO[,g=d8-8:'&l"1\Fck[rIs4"W,-BPr-WRPqCK"\NkMFUEmg
%hYmG7G:2G-cZhjLrt*b.5BZ_(r-2jbqJ5d-<?D945Rbr;&'h//W9loM[jq-;Q+S>-7W$!;4Fsu,%%R"VPG/e!^Y&ssNMf@m9MC[=
%.._HXZl5e[S`EBEVN@@jFEHb9;S:$SQ?VNBm\`;<NI]KPO,^t#3R*=L+qgU\NQ%5FJ\H-Qnb1GJ".TJHOqDrd9f4,LYLE@F,M!q7
%iF8(&#N<_8J)T7m]Dk7Nn,3soHTu]Jn,2F0QbV&uVrd0#"Mt1<jmdu*`O0b?+=21^jJHTZTr@#b<Ooh;>`Qh(,SM]MW\2@ZmDg"u
%`sa!q(>$L9Ei)T`?IktF3R>"(Y2c]WJ''`KehoZr7#-M2%'/[_I+PrhQE9B7UF6g?nkq42jicLW\mLD[dY8n7kJg)cJUQtrXmHW/
%XqAS_%PPq``s8!(IX$[VJmW5Fn&>MuEmE;:<f("?OrY8/,q4L_5MZ8,?9EaEXg.fGV2,Yj]$EaUEd!M&1bpo9%CXP+9jZAq[F_On
%>6MMrW*2o.,Z.!A5Aa$&+u5E(do9D%qt/M[=4'_%X?#Q8LXRk6N2A3?LD4-DS@o0B_O1k`AP5S+$D,M!F6@+a,#RiPdrVet<rfRk
%BpgCXO+"u4>V+Bl)@)a2;RS]@Ri?c]7'N4A#=Dh,7]T(JlZOt!o>TY7j\n=N-mh&T+NqMYe>u_1Ul[-)n51`?Tsg3rB0fCEdtmX6
%mJ18[r:?P(>_%<r5fotJU+"_@`0JdBPWlV6f5K3VgSq3L"ob$p(Wn\R;E+lJ[$7N]6R]AFq_>"3P;%d?pIIt;<b.a%'tlQ3[eP/K
%Q)]H`l>4Q(oUAC?s4+IZdIT'Oc-fE0"6!1`pqTV3'V9e2M4/LW+L*1V*Sh"OMnpGe^pcLu5l#56hT).9A,5al/+88Bb,^1<Xh:n(
%X8"T<k><aJFn)Rp10-[dRZq@-ok)J=5llFF,#3Vj9R5Y[G#l(-5r5ok$>iYsW'3T6np=H?<,:(V+fS3>'b)-M2>%^S=,rqgKh@Ms
%H$>6kk"HYZn&>U_s-W["3h3n*8cl.=!Ba\V@m$CWUclE7(@<+igXC'RlAcKG^Z*:9B=)Fqa%B8)XjapCh%mh@`GVOjVK'.86FTO0
%Nn$<[EC^+qnht50<qXVm;!PY9n/;0_T0LSi='ATk>_q.dM.@VkpjB?lMuX'P:i)V8]FC"\)"+15B<%HV!8PNl)G*6dJ<(G@&!"@e
%$`M'We3`9Z/(F_8:Pn)?PX8U`KL_u-B[>-g`Pc<e&(%TUEaX=jhru-[n/)*hll9&]lQNsb&O=gM)g'L9/ol+$[\D"H,4=0n692I7
%2JbNeUTb(Zlj=oT2*l#+Tk3t%Cp!h^[E!4#1L)<%DR)CV(%kV8Gn$,&(0F5XRDYs:(0-/^Ortd>l=udbb?k@[=&$!O"VE?#m@$T7
%83[l*DAJ@l.u&]47<$Z9hI>G+k2;o(O[rP6EK<()?7qZ+8CT+T9p1CO63C<M[\PG#cd>5:R_%:WKa`=0j0`DE8"Ef7=P>>nJ]2CW
%$^*FWnjhD6mj$,IV6bV1i<)_"\HMn>Z#I=4DeAg`^J%:G!1FC?gS4/0TV;akbh7S)H@2SKF%Kh6_SnIA+&ZkhS\^7p[Q3Prp(FiE
%1$<A!O*U+2eaB`#+']2eBuiIJO@sbh+,ih\R7[MsB0*T,*_$lGjVKA,NHA;2QfVCq9;Wu>2>i,i!ae:pAp4e6;4X)a)(XK3of9am
%Qgr:fI-Y^cn2g%5VD"Il2s7/e'M44'l7KqmReU;_K"cWk(sEdAa[.dS-\l?VFS83;dVRaTf9KA_QX=YihN/ehpcZh2:]CGL.:)8.
%C>d#[kD6:TKki*5p,B-^V@b]@`G(0?bo2jWe;IS]'N]oHf;#uZKV8kl:Lm+3NTj]Y][3LT;F(b<foef=8#1$4i.d>"3'&2!>Y:m7
%7F`+!X.Q+G;=hf^VJP3#PPDD<Ju1+Ha9i%X3FJ,1`7/!7BcM,>8/P-b[i-:nVbs(,O:6UtS_ko#L`Zt&:HKXOFZZr8AA1sC1MOY)
%kC%[D$mi`6-lp>8?!X9W[(c';"J0aqDhg.>c?FXK*B_o\/2a3K\t$td*Siq9;`mYV`?-g7P75#DOS$1eG7%7N^/,O6mWdksC-3]2
%jROAV*$Gj3=C(*2Qo8&0#.86((t>gbXfaN`QM#RY`-fd+RlZdJ%2ct^5Xh`UOe<d\m8%+@_RSjH!6l51;;co'";D-+K\HK^([QmX
%[(4-u#V@\%"I<P&SnXX7e:mW0lZS$<+mV3B3jqM;ir8&.Kk\s[+UEU*i`\5dQ62BQ'ZSQi"pAM7@Po,3_Wl>h2tJEIX)H$DYZ-?L
%NZ0Wj\NZ(OAQ;gSSo-:@mRb=4(!!a<;Lk`pZrY5$mld8uY`8)M,t=j^q4tM/KYIfIl?Ret.g?R1;O4W:OqDe:6%4qm%[.2b=IlK;
%7938d*U:S:/,66*607R0>L!cO/o[eYl!$;$?k49;R_7a2[DE%Q/#ErG3OQt&[$otk(-a[3Fe)j$bAHg"$qIk#V(m-JaM7@f:hH4&
%_Yk;HQ!e$Q?:`-:nep3l]lER!`<rfhn*VeFd'aVePFfdr;okg*2"<!=ZT4.g[jfV+1*^V%Z-RJVPjJjZUf\[p](qm3F!A3];XsnD
%_G=<9BlJ.N<0b>Nnc'NOL/6:YWgf)nb1!'@]4:7Eg/^YDRGkq\oMFD`,ai)/8KoUdWM=(o3,l,>SZk5C1$EUDe*$<\DM)m\]A$FZ
%*%EjlI!)oH:4kPj:>7boI'smgD)O9Q$NUNHEcX2^C[MiSV0uU3g/BP^;1fg!objX>_pk?25!M-\\J`@2pGJutJim_Z7uM=]4t`1p
%Zd`.qBm9[?-qrZ'\SH(Up>0Lm5s=T;.6I'/G&Q>hauOgR&ER]882g5VoOE&>mIlT^@VlEMl=#i1C;iRWbLRrI0kh=Pgt]_Dj;1\]
%'[u:;pg;;$(gG6L\,?oJRlVRt>kY^Ve\;dTX`!7MSNPna<M:_9)+R*J^@O)0F[GUM8K(a4\"!#KC^Kk/$9mK+]:C\_=)R`YX,X2Q
%j>R]\XU7Bc;pJeaC,OFT5XY0DQB:t6E9:3UEDdP,3mdrq'UR*9LTUds__D9uGQtA5361V+hhP"omGh>k*H.GhS%FGgh?7EL;7]PM
%Ln4+IZrabg/(d<go5)^r#c'YYr34(_COJ1+n8)7?s5]c!=C(,NJpfn!&uUgrL_!k8,\*+*]<1jPR$KG'=<Q*OU#>`]?N'T?e]acG
%OS]I76@f?Oh\(5_g=#+:V?(o^LlR@tENI-R=$N.72!!S;Us41F^>@!mKM)%%CtiK>:GHFboL+E9&Tq847u;>?HoFgU)L0W1h`qW^
%qS:+)_8COYH?Z&0G6^-Yeh;d2p'1iV`Ni!hg.c=C%6!*lGdsa$4[.fM$I.1VFt5DmV/s\8R\KCF44N>lK-%WF'gVlbj^fj]P/dFn
%+Y)?rF2Z&f.,$j,XX0#^l%+9:[WtQChi?fI$\B(Lb.0M[AnodbX'u$44eq'8m'KWkN73fGCO1A'd@M>G'(JdFmJ6ak^*B/E"ouKB
%Y9uQ&7EM]NN=0nh?"_JB`C5`aP9T!Ki`[_eR?'nFC+;>8po_fR?P<BP4,@!Sgnfp6Rh+'g[@FlRFQW4uV^/T*_E>l`%3]*QEa%AX
%L"5(Kr7E0R9g=R6nHIk<p#$JP:Hu>pfO#.B!tM+3(IA]#5.D:8dX,dbr/!5gEEDOQrOj3H'&qi\DtWk\:>SY]GJqOlPa'lC1JD-*
%d\9==*5RssghL7.Gm=CmV\EuBN,t11'/,h_AUNqg*>[5C2^10Al)Jm@OrUU(K]Ylark;?DhE,@R_Cnt4\NVsSTW*Qk4(\9T?+o9U
%op[-f?6qkYFJ2f3+n8;X8t71r%(K584]bTGj_M;Gf!U_dh\D7..l=@YG-%]rUhc8QH;u[o_)PqAMf*;JgZ]WuWQQQ$"o;/`Q-R=;
%O^n#D(36or]4\UScV`_jMi!^+]Pe2]kj(7'Z?CpMY2DT&f6^K%Vckn<g+'G/%T8I1S4J[?J1r$$L23BcPbnHQI!;1:\..O$LKc6>
%b3;_cGJfIdFN[Dt2J33g/e02)A0D?f5FG$/$LID^bEcYi#Ho]p-$osugj.co#T@BG$6IP9;n;e`U1LfA.[bSWqW(Q&064"SRnDWC
%Z,h*eOs+n^'Vc>lbP2#$[,uLk/\u?V[nDRUPl1]R62WV:93U+HgWJujp6o86[U`=fd9R0oD(E\u#:6\MI_37:4C0Vo<T<-r):_V^
%<50CT4,-/o6&/)0.t9b\m>.)(WT#_9lkXO&ng>pP,,N\fOMH<`#Ntr[aPWB6].1)8I@.kj6](e'.3m3m.lL$\lo1AGEKLqjL+Y'q
%".cJd-*::PA%#T>Cca.<id^6$L8<5Ge:!hCH/"\[oH-7a"QimnlcU0F+9QTg)O*h1k!H<U<\d5Zrd$.tR)o)qeES5MrEsDY1K*==
%^!1pY3U&dBK)ee?WpVhsf8)SC,]&=%I7o]/c==5&VUgrN*cYAc)U5TV\S]:2c4ZQ4Bal_?`oT-%&9RbI<sou_H$@GL-(7,A*g8dZ
%[`kGh`/Bu\PA$o`Otts&,:`\;KINXVhBFa38lV>2"LN)9$e=_XAr<;JE"Zh.`eY&iSgOSM';nBL=8=J-h*0N]KSZn,0b1Y.)s9`t
%JM?es=3Rhlk8XqN7o]MnRLXE/8pd1;D,u="+r4kqU!\%NVBbgO0DimJnZj.c<"7YZOnjkC[qbTbn!SjS`;_5oR7XSWY'eI")qOE%
%/1JT@#YHP5TZW;E,h-;,!I"jDpjdaAC-Q>Kb3bkS>g'*c3(X:cp%"dCZu;G7YBnXcUl9H(mLi*Q-'"]9YPPh_qs5=!VW3HGZ5ns/
%Jg]f8XZ>e<\/a$WBcrrZ@N>Zt=p,OP0L@2W%QhXH4[_9WaK;XbbJ_ITYMLkda:u"INuqNQMJ!NNOV2I^b)1TTMFe7s6on&PP5&1:
%0RHT-e)o_6gQDBtcC=g%cCSjf^/+;<XlNIPG7LNfWZ[-OCk_?](a?3-di@m)2uDfBVc2Xn!r=Wn]n`Sc'\@XF']ni0aRmlZQ$UAC
%D$u@(Eo82t!?^g_9$AG)M1^Y=WhZ,AfQ-r\I8;"g@U41apQn*mB\i?s0arV4"+7dF,Z=>AL4\"mVTi'XS%QaX404LZ98TohatG]=
%1895(lHV-J52c8h6Qrl#'+CF-m<6)jMCdFO-Y[/L<dF#9W0`UG"?=)K$]kj,e?_+4eXes)60B]Bj_ua#FRM#TCc2$*=9D_5$qJ_T
%#'E1flJm$PLKb&dn2Q#`U)/blWuG8q#&JLL^)3IjWUU8P.bY"S,*Jol&+j%N8(gH*)?`Os`::CoU6\!kfp"$3!Y=VkO?fnji6l9,
%qGYj@J2#85bP@p'ANC!:au1sdCUGQT\2Z+38-^L>Kk4PZ>-7&kN&!M4Obi)nTEHATc/NN/mn-HX:01Zm$hY8T"E)1%?Z#dMfk2Xr
%Ni<Z&GWOf54#<Q7%&Y:]pJeNfC)G`@UHI@XgK0u(QcBV!E1nYaBI\f=->ac3n`[k&lS_t5FGaj%XSnO?Nq>i<oQ%$C#o]I?HA'6P
%9TN_?,'>*_c[Nkm#Lm5AI!T(f),T@/=FlL:F'Ykn>O/%(CYG56Ai?Sim-u"??MAS4p_D*tBF9*Eo3oKqnKH7-6GFFGJDu`,gob71
%2NsO1$e8..h_dm4XBUC2o/A(GEl?M[.0/]N;[ZE.+_08%=?P/jV>sV4<A:D_SR'-E/.'oG)[YlQM2V7&f?IVB"4o:Q;?i),k@K-`
%?ERZ4MLLe.3J7[kXi/*",LI6R3lrS5=\5t+fl'`8&K_8UV)=DE4e3e_1)[,+.gTfCROp;'d\s?)%;Y,te9o:fDGQM'&^%MG:_*4n
%!"@g&eFM[g398n,T"-0GgP*G\7EBI>3`5M>F^KDH?CjIe"N*4NkaZ:9BC:o#Q@(hK@-fO6Np*oP\l=<QY6hFN$12deifq)6pH4;'
%P*<pKkAr*H"18^)6&B`t8#WJj&VF4jA:TOl*t3G[\!9-p"n3cs)O*VdCl-.EJ,-CR41qbA"9A\_-]<2Nds9RQd`6fn*n$Cee,TY"
%ja`6H"T]"ViDrK'DY6P)P'RfE;cdp,I8r:9Lff"]oNgauJu1qJNCKZ(<Z)P9B:>_708c4_Ut8)3@)]dd,N%47C4NKu7*a5DR4mFj
%V^<b8b<aC&Q8@`gm&<bP)f\9;r?MMmJ8r&c@N!Ln@Y7d@:VsTbE(Pq!5HM7A^R.U:SeQ#O6D<'9s4=*0DUZ+1MTkQl_5<Ms4.S(\
%7p5sHE\KX%raRSO3/R's6o2sEEmDQlmI/?t^@GgiJONM!Dt+N<;&sD32U;3[cF[ZP#$W1u>tcbVpB:cs(uMdBZ&\,>:#0jmHtSha
%.G943no!Xgb+r2#2X%\t5E2)j2V;d3U1bC#EdWH%U&fVS4_)uob"84lGdCS_GO4KGqms]B--9`mKdn(b#E$l,YWar;kFKdO8$-]Q
%BA1m!i#GcM[nH)#29Fqo=Ga_g'?&QbF24)RnG)X!n<GT_Em)=Ag.V'>W>#"3VBi%lKcUai?V]^;NpDfEJr2E8eYCr8NoV@X=/qb9
%Ps>bu2gV<8LqX=%g&0%(bqNuEdQdR?f00M(1^1E'<VXDPY62FRl-tg<^*RUE4GDiAlrjbm(&?^.pF5Dh9>.n,2\]C2<7D^a1`WE`
%_S\sf/O87Xnp_E+eLOauYS*F9=,!Rj$C<_kY(P%Zn.:A_RRn!AQfpqd^b`<Fgr]0m"BT.nh5kJ6VcLV#MA/,E)g!fFGJN.')C2(h
%h[KQ@'N#._Hlt^5e9Z(7OK6!0KXb3Dd[^VL#jkI'HFB8LQ=^&tl/LTh0)i!;ia7&]"eBF,l;]i[D0t"CP[lKi"h_P(S8D6jlBb'C
%BRD@_&$h/q5/=e=h)A/nrdW,3+rob0VD6St:6hPCH[u<tcOUV[#&nf^PoV94P[L`U#HJS:8Y_J<)5K7H0sPs-kHj0m-;^f`B"<jh
%,#+7E&_H)4c/)/X^<"aY6]JT)==JZ^1JmKQNkYpRYQ8F*'Q,R@MD)?u5OMFMra<YJH9]5J<[Go$63(&^K%8!Q,$S?_[e-tF85QTd
%]=Z+:rmGMD,b8FSnK[#HJuJ?'@A#j?GUQ@^jj*M'a7/K%KB@O0e>j1hUF]\A6H;CKfp(@Q#4R#HKps\NUi<.NgBl8Z>s&dMMHJ9=
%l*sm8*oAgj^n]qZjS&YlXfc#b5`[-X)ft`jW'.7WUV_t`31"cNH^/g7dNi@gn2oGDj?RTFD]8RnW_Lfc9CHtqhJZDj&>ui7DT!;Z
%mI"_e3#*\D0q:gs0R'>u<i[9C/Hp9C(KDTh&T6sU01bLmcW16^3O_@Z.)mit0\Bs3K>e(t`LB0UghW#M[e='NVgBYfS+Ll-9EXGI
%DQ$m!V/_qU+'/h7k6pbKnpTs8b5K`:>_Q0#14JpXDdtY+3RBk!6(2\F87i<K<4UPEgCaI#O9p":FcAP+J(6d<*ZT6nD^*]3^9H8p
%Q)N[ic=:'']Lrl;Djs.8qI5Q4TlUC<8a2Gqq\G%5>ZK$jQh.rbe#.5s5&^ujjIMTfQO!&95eL2)J@>)^d,&k,fn;=B7,nX;[AQ;u
%XlJn`GJo(3J8E(W^nJ*[\;bNRL'\6\Z2+FRH^EU4P3^8/hEZRGS8][&NHd[BG'4fYOFTK5'B"ZXWX7>YWAZ#[L;1F^\(6S/=a=qj
%MRTmEP-';.ACNdBF5jU"CTj9M2*3gdj;P>!MoHK]Lo@Q&Y0tEnW/R<;:&.X,d#C"tP`BKV48'HJ$P8R0(&H5$1)(9H%[IPb7UZMl
%n`r4#m42Q[-luQO+#Wgg^@UUTU6<medQ=>^)Y4gnO0#IcA>DZtUso8ja.p['0WXGA\&s1+RbO\5K,ns/>6`*0(brF$R[I[2Cu_on
%&"'#6R9T^o4#$+j>]2>-5qNu.--$O_\j#0B[M[]>Ki*eP\QTmkrnU->afTY#6gG3bC7XC%^!9b7Ve_(YCO%<9eM)g$8RlNa,jQ=b
%BudlDDY&B4h^aHrA%r3`Qt/Eo&Y<.=(W(2=#r"#T(^F&N54@ZZN*LkRTQmb(?5P%CXVfZN9f4lIf58L'YNN:p-0K8#\9Yq8q?[[N
%qMIVt.s1>4oBb.(H""n/2L8u@]$MN=@LC-60bRAb?OTAW.X_[lBJSjd!&7I+ebYt&FX>UnLMS@#8.EUTB4(%ad8(f8JT(b)O_pnq
%gUM^46?;!jmQ2$ml[bd5pISA\SKVu5g`_ZQ07Qshd27pJgF6\-5[0M$LZ1k-Fi2,+OE)`f;!q`^M*,-js-bM:1N\#oHACM>_BZDP
%SQWoT5+AFt:_.+TTEImUMMrEU0[X4QF[ttjL>%kTL5O;B[V%+",f`de`oISX$oi!E!S`Q/m[CnRXEW_4oHD.f$jpr:RTLP>87?Up
%;RqiTSe9S'PnA@_ADK)kp:Pq1!bhg*fj/4n#[Zo`k+"(0;Td]%AB29DJ&/<*Ef1unm\@.W]MRLlIFBc*"#AU?gm$0d229,,Gh&IX
%pPQc6kU%T_c)7;Ra)$#]DtWQnc4?;:C;a?,>E5CfN4eYcgG1$(?O>TKQA+)B;RqHkWJ/7;H;Mg+;)j$Gg%rEIp;16bl+-`8[qo$j
%0cVcjp[L>K!AV1H0j"W]rGkpjM29gs8V(4sE7"_X4VVCa%-&+oUNZGFR>&qGe!oA;WD#06jLq7`$JSKY1\2n(,/UHs\I%3U*l/dh
%7;b'p9.mTkjVh@7]rLn)mBl+kU[Y8]U#);`;t\JBeo'c]g(^3bnQNPI(-/%tQX--GTbtaW#=_V9*2JM/J3C%'`ug5)VgXNg^Qg>>
%Xn)6Qajl@CW&sQ:UL3)2h$/bC1H"(Oc0E_5Q+)6JU\R_>[GPb&?o#';BT\8,$JS7g+ts6XKbH`cSrmNidq)7Zs,s'5;uKWHdGm_S
%HD*n]X'oI943hF?AIPP/cj'XXA.Y,HiJH.u0IJdi-oM.T#R<bW;Ij=R(T?hm.hVi/p\$!<FDX\Zf"D?rKkVbe@C$9+YS/r*G1asn
%.:>o2<..j:U$SK(>.LQ65>L$\>d2Uce0Q8/3MTGO3%kZ!T]qE/Z>[5U_np">4qkDML]_h@@F'DpX(,SCo64Q_S[U-9Z-47:A.qCi
%1Da>8cke8JCQ%#Ha`"FnX^33ilAbQL[1TPWXW>q=q9l&D8htF=>CKOR#Zhb2>T`N/ghL+#SPk@k5k4*ZXId61OWIPC7ZLj9@`:E,
%WM+.Zd$HjhpY4iQnq[5blH@!$6F\<q&GQT$:+kc@)20;BPH.(q??YOsqc"bp*C=c"DC6qY,qK[WNR1D(fp#SKrI\a^ojMlWo8M+E
%6F\/@SpSa[cBN,S/2\\]B[Cna\gZnDYd\3JY&8U_CSJLeT'Wplda5lEJ94X<_2CkR=/$_jjr-DB&rLN,d9G95_2f`\_:!VPqU>Vd
%mI`/rA.dGnA2f^dGnagF;I+l?rbLT87Z?c>$+agF`bq8?2'_5"D0'nf2/*N'R[*HQ5gV,jG$h4S<NG]L`FOH<;3Ft_5CGD_2j<GN
%JK8E+F]Oci-`6*=2g[Vs"Pe<6J(p)sbsUlU?"R)/\8AoR:VZ:1LGaqoqNA,>ZE`09Zs5%(Q5P9bm8qnp^i[$tVX/&[j%XcA?P8Xa
%?L/9X_i73a]3+CH<MEpgpZMCT:F9?tH8P61@gR=AANG2BEjE5\>+,9Q+iQ=s*O$=%mD^=3XUfF>VoE^iiNK074Od>Ac/2m'PT.LO
%C-\CHF0a>#X/oWZ9R/ZEP$NDaf&cUMDn:SA.</m2`d*s:FSn8O+'ZlK!#bdcV>Rt*HE5j7'(k>eSPTj/8"MYj`JuQMlZ*5e@76!]
%o[#-hgodE`H)ua(^=&`?cpaFCU6T/4&/=dP4lr\\N@_*FFd:ntS)JU'CU>.&*ro/=BJ@FgZL1O;LSRKBDT6CLCUD\Nnsk2SRd@3`
%k9Ll8_f`T3h$5fsed%]&7GPd<]X,&I2e"m/_>=N-quDe?@s$5fp/>hIU@2@SM>+a%%bU0;Q'D&N^N5;Y$,(!VBtQqI:tkq1_E(6d
%`^NGahJ1b]K;M&+9Pm0mj29>VIrU8X[c8DFCc?8DX1'$VfkL(4K'`@9HcR6H,KHMBl,N0PKe).X?2\NW1AqJI$.P\Lb7Umjm0alN
%NKZfi28-XS[STq:hUPX'78]oT39S<?ZOLYh5#gZlK*8UYZ@6_t^Dt,TB>Q4IL9:YUC\Z6_6Xe)F)ek6(;aHYPe[>I_6Rh_?Mb\el
%C\`[@(mS1V('e<"pVQ3u%EQ$;EiP0fT2K4IQAnNK!%gO+dj?JTN792Ibh=/Tl/;_>lr-<Y=FOkK&CGcI9]iCtrgKWYEfs*<=-;(=
%'>8]P4(O#f4#%F.JO4!MDaeY*M\V9#!c^l2&u3u+.IiS>`c`Lp#,P9JhE+>VaKFm(gnJ1OYZHl'_;lmoMt(^(@eQ_F0/<\m7`Pcj
%HortOlHIu2I"-DR7.oi(Y7N0/7!q`k5,=*M?M9uo.imt[`%I+]<b#eHA%>@p%VMNcBeQX"ioL$J#S==_-&2!RMpe0%iI%dGZEN,X
%riX5fYA,=+MiNi;.m.\8('.aD=[cQ_(!b?2p8dHWC;ga-UPm+A00Jo_cfAUYq,fN!`O^6W?kkaq%NF2_hp6oKo^E$n>9DJb;G9[M
%5(b#jfRATC;DJ[TV=2IU%.bV$k4J)7L@NqsI/,rNe&iKTRWZ"NpU*EO3\-F=]2i,A_8@6ff6oO4DsK:Z/4"rQk;4WdadF3_rlOQ=
%c6prNDEL"9mjBbeduQ%C>S?/)?g[tJ>gmhBDCg(lQ.*K@fMti@V!2e?TpT%U+4GEg5c:%f7XL7<iNLNg;aOI8,M@A17kB$:,9jJ!
%MlRP1c<$5.`]N]AL"$7Ak;>>!G6&BfrGj/-:m(?lh1o'kG\d\J_(&=5bj<Tt"S?),_n--FT[0i5EiJ$jn"(RCL`d,CnL'YT'7D?>
%;AG.k2sdk6eApaI542!\Ac%BaJ<a6o**MLo:\NPGn$eNI5l2N*8EOU!TnYQ/c;^+6QpS_\oV%<7?&Q76RprmgHr>li"=LeXUinU^
%jj/oa*?Q9(e#1C;/tYSFGt]\V$TC';L`n$64m9>J4lDe^m>+TW2+CM%I\@1hb^klkEGRa3pK(l6WHX./E:>0m?Bfm@0Ok8?,Q'@=
%(i%uh[O]3t@Z:1S^nKR]To>d,%!4Me,8(2)iO)'MAm_8TZA#I[=$M?*+0$ke$^t^g1QYNDV7dq>;-L]/`DN3L@"K+c\?4rYro1?t
%Y`uD&:).Os<qtJ)49$'NQkBB*K&P&sZbhH![4nm>/B&Xo;$+oKlrFY8b8a2PWl]b)4ffMRI>tSdU-#`+OK.r/.qKCmLiKge1)X[m
%WTnHhdpSN<P#H)/XC'6Df4tM3j&m)8'&D`1cUAP3m$/4*SNibjRTLBhHA7]ZLgf<$&ttdD&k^u:j;erf%&I2Q%\6(bVo7S<08uUK
%D;K^VlJSNK*Adof4rm'mHrHZlon^to[1oCL#%dE`>T\RQe>$m!pZMEjK60=R!l9_jn:Euf473?4(crLE.;M<>Q6e[b,tjD`9!Hfs
%-*Z10.*^b@1p=JlF]DDZ:i9$c0*=2&"NS6';2d`;r1Gr4l>C5g%>mT?PMVQ<?n96s(Z)T+RF/T=7FW(,NH)n%=\S8[eSN"j<kJu/
%E,P(Lj3Ghre>$']1Mm-s/Si?--US-Y=o<T@]6-;4HS_K32e@r`(tdi#4\R,QBLeC#!"5:h+\P.#1]K^F<"ke+_J*:p?^Z,sp>`R6
%#QUeG]>4t/hE%/uHnjAo]>/p0kj?Ut^Q.-H2dBmD_G\Y+6*CEp[a9$iZ4`W=NRlZD8nO.]p#sep*5hsadW3^&RgMY"(TKlu=/.Jb
%!,MGo1-6:gF[6fA]/9YR=N+7W5K8S.q1rJk@3'-Z0:'d_,.6)K7'0o8EruI2\B&Q2d[ZkCBNi8s;l<S`_Skq6K<JZ2+>%e'_LNMM
%'`N!hn-.8llRlk\JmYYMa'X?9I&I<26M@Md^F>qe^9jr.7O'@6p]GoI@<OL.(_bulKsDR%:P"u@U'Z&<0N^bg-t@Is^a.-^7M@C4
%YR>e*>JO+`!!l]g2>B!<[t'VjJU85W$p?$(/%&>4*gfGrs$<$t$Tu`klK9HSkR<c&Mp=-1#7*qkT.qbEoatO_n])a9m/&`:FhT+h
%I^u4.rna7;n@Q<TZg[?5:VXTL4T+p0Sqhg8mf'Vk_LM1>rW)8p.d_D8Wd1'bp05.dS_JHi>F5j,mYVkn`#>T^b-l*!Gf)0aj%H>h
%W-f;cD(RsXc?k-%;g<P:\6-LY`#90Wn$GEUDg-Y]!4,p8]SK+GX3F+BbTB96d1HiHXZBPp?-'TT@8G)=h(O'L?>YR&oAA@>Spl0!
%Gl#[eJPZ42c&&9ADgQrtg[f6&IKcc"da]r_DR]QEeu(>l]Ud#\A?s,^Kpr"3J(C>LA^s=FR?:+"]H*r@Xt5.=1WObfUA4ck:=p0n
%Qo6<&*RK"M?dS)X+s7d8FWVj=jrSp[cA`\I1&$rL!;/h>Z0c+T,6;WOdFkp:f&dkb_?,I)fk;*O[kboB,KF"SbXOf;!S:t585o/t
%Z2kiRZtu,-CV-kY[.NFj?6lJ')MNi))@]Hge].?MF_R0iM7J.Yep_W37=GS2o;6&bNA!7=H=UAEr)E3&b7D0n-PL\\O11cH5Q&3E
%3:b3&n\8'B4n_TFl1*nNXr_Bs]P"ju2kt.p\G>dhqRct573-^lat&Y%/+<'(`,`ZoK$7COcN&&dV$^>?D%JW0:MJ]tD/NlOP,Ts&
%44!38J>HdMX_rpZ/0\4pn-D84&h6ZD5oq02j3_dBK*#<"8-Q7<7EoEm%oTt#L]C?'P##;icte.N[PNW\`(i;cD*AH5]"W5)Na_6(
%Zhk28ZlX2'O_4rketY-,q9AjUg`!Edi`fPkM>@%8=#sOJnq(o"*Ws&PE8,TKj9.h\-$6E#7pT=C#PU<,&BSWg\;tD\Ms_1eiKN_n
%Jp]PL"l'i>-#f*coAGm%AM,.Y,!IbT%AE%^2"f#J=8=^DYMe.dniu2/>a-(CLM6Cph?'%'F[<n!FDVRGQKXskNI;HJHuhSZ14rd_
%#+^J*PK`f"BR)^GK::RjL9.Onq^)X033J[NfLPg`]<sn4e/_DGlki;0J#F)lFZ^GLd#.*ZQ,R%9G9,Mc[W2[bG)p:jK;)tZg[o8E
%X>WhB(7";p%jr'_fAD@eDoer)R[ti%;iF0l$5m*Lg>RPhYMmY%/q-kTXkK@D\MjrXjK%)gB7XlUl)Co^IU^J$*n`]R=5"tLD\980
%UYV5%0G;@)2N)KOmBWPp1V#%DE]$ol'$&+V7EREB'\'s97H1ZNW06H64rZ[Q:o-4,VNRn`c?rqd@]@aJ-0;1FgkS\9NTu_>G6iZJ
%qH4,EqW)+,&S_GhEf\c^V0ijTX-Y[&S<hNuO[N2Yn_W/5$@+"kDY9nTp6-RT!Pc)/!mdcLRR/=,Pcb5+lY,NT['oBp%2Qf1\PmhP
%s">j2^@-?2Q"]U,Mf:AaVMX.l\@XOgAEiM"eDlI06b^-V*NJMb7:CaIRS0W-_n5g,61mo[0Oq.,6%lO*4,/NV5DX=29f#*&3;c1t
%U3hsi9Gi8,0Y+LCV1Y>8rgj0WrmHDVh'bSKq]#Wr&cGef$B:bl\36dSf3Mot%Pqn9=8M-ue#A3&oP/rK\*u>+Ge&cGpt^WdO1ndi
%&&5N>kKu5To/uj2K)XmC0:2=]Ed\:Aqm2hu<r4Xfd2#S-Q'E^s>o`/L_*F1AHlOBSFl[(aU-tc(Xt5>miR-t!-'P44p4DP8RMG6$
%e^Jit@0erpRbX"1E%Fn-gXDdD;AaLY+KY-(nqiRDN]V2*8sB7f`:LB/51(0Z`7Qe-f*Ch1>dF5p:UK:&I=-GuTBE>onCGh`eh);o
%rd+.;(&7VBm2GC.W2&X`kMpZ[WY:T-.gDn2@JN^!*`\pRf-<khjRL)O>EfGfprakG]**qZ=<Rg>1s!^',;T3RCr>kt<'>1"VRiP?
%\RheX_0mnnUs&U"%Y7N8hnkRDpR0UL^_(PnI(g[KWi'N!$:ICGHr).BLUTS``<VP7&.5Qeq8`n9;4QLmSJJd[LnN,>KA^ZB.T]dq
%8:6;HM\2A=kDcJuik)4ZYb#ofB:775'$ApNUk)q'R/^/PA$^UrQkg-+"[.STd$,=-_%OHm/Z0B;kR)D4Q6Y^H6=&[j>XZgn79lQZ
%jDB0M\_!6I)m4WVhMKFXb%f]-fh`pJM@DqkJJ/06:*[*WZ]LhGn].<(&?VC7Z.(2n#Y\7GMI`bXqn_lklM@m3_i\qfQAQq?:e)'P
%TUD'^YDNW)Iq3L\0:Zd(Igg;=H?Jg+[h9M@Ge6Q%[7JFE]W[*G<Ynu5i$Y&e/C!HG2G3;@WKBd<&K,mp>e%B2[(eRY>#cVcQtu"-
%gP5[t>0K-$qG6sa0i,Fc8mN!091uskG<[0G"j1*Lf[V"k'p;23COmin?O&.,+#8DbOesLW.5%fT;//bZXWk,=g$JV"/u<IX+Dt[&
%d1@BWeLkm]nP*beL7##$ZV-O!5tP*bd`XWSO[!3fLd.LZZi"CJ!I?S=iH#Ngdh2g$'mgf&mSN$td(bu<$oWd$ATToS>de3,^0PNF
%ASFZ$0p2A(k`ED(G-2&J>WYF]qS;`B&,9q%"#qg1.#(MfT#o3iJTEup/l0>>.DgM@g.XZH&!'rO'\1GsbQiE6-V]jpXirdu0q,;X
%T6Md1AIP:X!(0-&KcR>_cGof&"8"-F$PnLm.<7UV[Dldp<HE,6b,i(&J#8S@T<Q2a!HQ$C<]$AB6N%209R(#9LPh"7bTbrcGDiEs
%@(B/ih&LS0a"YdM'BIp<YQZt'<q5A\"%fsG6XccEL(F!?_AWC-"F2!H@Z3TRnuq7>dSo@#oSa;(@^TrUgR51T:L'$HU8p%6gp#Y-
%;&Z+!H_3_SURQj.No.$)Vli<#0t*TGj9()Le.4?,a%VUtkn7Bl*;`l%5[-sWf;T:[c:m:n/Z5WT1XFt(MA/]uj4Mg*/Z\9>j:ruK
%_:"j)mC=Gt?dG``WZ8Vl9no!GOqZhXB4?.TV^=cmW:$^Lb>9?63nnH?5ieTDQ9Ju8&73ArT+fc*eaHaRp]p*iUnbM0<QOmmHs(Pr
%P-(b-l;N6`Snc3hV8f!1<&SLEi7EbRAl7<_D,h6_XcUOl]45IS2:<S]3[XiG_AD-g'H/p:=^/kF)a-?Kk1RlVi=$D']&FVI?;#t#
%Oj:mNcHh"E0H]Y<%.<Z`q5kP;fa:"iN.E>'Un:Mn]ANm0gI=XVo&n=X%Ap3?(`/d'R,<Bgn'Z`&M?E">gPR*+a!0/fIOcDm09#>F
%Zqc7I(V]%!d?a=$6A,2r_#tr`"Dpi#pgmP([]k*l&Z%ZABE[!Oc,(;tXr=L<NoJV`C:b8d'+&mj-j:d43!+<C!7>3ae/`@Be0ai+
%K9YW"]C6*$WY2'.ENR1S&[MUXFl]7V&cr0!D51Ws.dsENW62p=3Ige?8:S0*BDB0JO`g]23Z`]ZIEmK6Y0`TR]5.'"%Akek_'=:G
%7r=i]/l9VM%a2jTCeJWoq$Ht]f^Fp@("_nAf#,%'Z=2d6ltUa8b9<rMLAKis0#CX8mTHC!EtK8;aAc)]h(!(M'js'qJd6cN0'o31
%[e^]M.mk!/Y?rT2as?g#7B_"/CnQOh#fI7UUS4@rTb;qK":Io#]EW&Zo>(mX*;t"bA(S#?HB4'nWWn"i/urRHnq]W/N%F(cc(X(^
%F*=H*7cA*Lb_uOTp_4jC<B&90e[:u;_-gO<emf/i=WN,Hfh>rKbT_KckCGR)fa9S-ab[%5=;,iI)=X'tZPY0-MREXKeccI)P;f9c
%ij[ns\Om8dK,51D-[Mr)MOUOMn&0)D-b%mk<WJE]BH<D(Bb[m+?_rg<>n/sESW.F9?S![g-itK"1W&aPr%70LpWMpa"o_P5\4N]e
%8fY\s$BX9"A66]b#b--!57:G[8?RKs^hRmik5]?4?1;f%i,9=%V$l.k'M0o=P.3,i^k2>D7.Bs7PcRUs/&%h00XY:Vcj+c6b/6I8
%fauYmG>@ElVgjq4Cq6:Qfn4l-I.H2.N<g'<K(06&oT7eu16gdk@;gDi)O->W/jcFj\k'nb<Z-G%%UOEd(Fk__Nc1V?_q1`)(!iI[
%)QQklEg"#2Y]6TZ.RQ?ZM8TpKocbpDbkIgNVcF-R_'E,`?0?:+<kY\*=74,mYn'%;kid"gaH\O/P,ANUGK8m.gHW>ul^gYg5*sT>
%_BmN;k0b7t2P&s3+G0Rdai_T1V^Bmt#'KNB`D>I1#kB0u)'O00&W<<:j)+'->L[XZ1'[=RULjk_.4#26O<%b2&TObj1TGKP'oq84
%Wbk.b;b@'u(.l+:)HgQ`=>F/dF=sN!*-%u$XnSB^3#N\ip0n\.\+mm4?=`nOMK2;!i,3T`dtXu-oPlc%d^;N@bb\-!Sh9e[5UGA-
%d'H]Sq'&LWbj6%[iN+qV/qC1)GQ6pc0jE:H\i@H)@MNt9VUpo$IoHh&@PUW2j?+[J=3h(FW/1,E-4+6>L.u_61J"BtGY<rg&B^g]
%^iG9$VuiOGO,>>'DCT0/2;2[E*;uiEKV-40+I0%(+>99"k+276]EBOIWd/7`Cl'AQ?&7T%[q*2OpSp+tQ$8Atb)W$2Qo%gp#$aUo
%8V+4UA9KMc!65LT-$m"6"B<pXL40lmI&Y04n@P.e2h1T?])4L:prV7fr:FiSI\(spUS!>!fBKsDPudYS:X\S,oPMju_f+ja*e'sA
%)1Q#.HSaO/n:(,D3hA_2[[-+82t]:o^<lKnIT+kqF5GI@4T3".5>T%tnTjdXSKHn\Bmm_Z?+nRjY;AK(n*>EerN>kWl$)eb;Y>GG
%J>_;6!I4I+'u9UVG(?sKH^;Hcrp[?JE#eCLf"`/Pf,cmno9MgaSpP#^S7Qut.X6gbPV46b57]<-c[1uD@UML#m`(It(7MY-A-Ef6
%0U,7>6sq"CjhEcY4p,+1crGh3l['J;*r.;4rp^5Go"<YH,lu@(A^r2/,s,Kl$`J>Wb,c9fYp^M/UBEY^?]ik]J2r:0'*DP<5sTK<
%-UD`\M_*\Zk*6cr!\`-eQ&YK`#oWc"Mg0^Ir\F'6X+cN,5:n2Amk6"`^K=5A^U^"%"H-+(c#tDr;>n2lCfd7iL&=S17M"Kgp&<tV
%8\BiT!%[LB50a:%AC)#:-]*gGKRpM[)eXc75$%2\P`$JU*"R,%X7(hlYlcbQ,7/,(e/Zcme`=5i<Q:%R\;`bM5tI0*o;-1E$8&bA
%kD[o!QuQ-\cK9LIV]QJ9?+igt7(VB*(@6T6"\>If+tUT4BBu5L05<cGD`jX@C0p!RjtL)E0m;DElIqhRp>Zr(>Xu9!kcQ(Vc.Q#r
%,CN.b4MRoWH4K=P=`.l\eC-o&#:`JIl:;YIa7'\=@#BnCVNC[._?H=0J0$EcL:mn9M3/'#krHpBP_Lc@9dk`4E?p^-V`V@`!>^Ph
%/a<F&KVnsdY(j[k(+.k"AV)?1Q]V;=NW0H<Ks"oj7$Lo7[1YA)(s@*1&YP))!=Mg:ZM/c,mkq&U(:dqUL(L0C`8C/A^&je;>\jrN
%K]PB^I!<Df\a\(6>X*USdIheR/\CLqmk+I<7=>2.g[bg%ig;`N0*tGc#\E3h&k0s=+Ot2p$aS]>N==JUc9d?T952^DZ%<]8r<u,P
%b^J=b]?f+.GNW+"Acf'!#W-@D.-nDQF!9rbR<!F6!9I'JMWcC=e4:*jFUNP`7']6!RuPH[7m(G/(KPTFPnWT#`F:Wkq>$hX/U=&8
%50NX^X&i?<bIO6Nph@'!cbDPkI$+/)_#D9!C[e.@a&V1b;[?_F:?oTP/Vhi*Tm\`:._)`#?1)*feI/Dr&$X(birPes;=-ad$gY>d
%TDSrG*0L9I>6k<SV6\uU"ibfd(nZG!7dU^(7'8Hd\sCL6R^.m7R&&+K-nm]N..KK?R?Ze)&,ItK&X9qjhupu@X>=f5i\`7'K:IFj
%G^dS%$#UtY!!pUnM_Fh.M+Y,NB;5O0I/;.Wr`X#!PAMnLT3>Ck0;"0d^QC9YE$@^t(U=Su7mS!R84@_B8aN+=@\c>G]7<'_90g=E
%BdFSM+K'ZWT2H_0'?:/D!QTZr]TMUF[:m(WUA@PL>`laQGS\C.,;YmId="o3%/dr]_&scQrGn`u42i]hi8r3X:Q4b?.DC`n^K?7I
%qX-tG8)IS[^%K(hprso;?&p(*IQ7"W8:aASP4%g5C'U-Uo3"[_/2DGk*3rWU#Or-)>pl0$k&^jqW9QPN"g4:nK!#BF'_m@uOW$[%
%-67&pjRT$!>Tkb:>[2ggqXk&"e7^]eip/*=7'/Ei6dR8TnLJKEdi37!.;M;+W(7nt+0)JB4^#H9:Bfj[7j/!1P>dOS.)7E<@pH]@
%7,"mp3^=<+UNbm#GT?3Z9p+d'(Y.K[WIC6=SBqsNNL;*>+<WbrjPUV7qTe"&q-XV+X;Z@11QXbf;R8ggU'CHA+-i[fP92aOi">8T
%JX0+[r$aZ9SWT-VA>0@Or"8;9]O@m.q;B2>/+KSV;fJbS?1WO-TY#I&peRO<O`?EK<;/BIDfq(<6J#%)dn@)iX*u%tD;:mtk_nF9
%6E2Q#_8_K3ZNc3=,oblbN\Bc3(&S4OdqI<gL1l-rC![G2ERYsWg[kfs[rS6H[8\,Pfp2hb@6[!!=LuXkb8)gW7?qD_7Xior`I.[5
%<s%XJHo1cPN*HPUesuBrHaA#2/,9RBqA=*(_l8>Y)Fa<?R<p:rG)ZJ_P4edAVM^pGhJ!1kZb]Q&6DcnX^i@si;Y+-i=O"e\NU8.R
%X$=:Dr(et(i8mVmG!*P%r;+s%?N$!N]i^R!/W3uADgB\L%]_A%:"ep0b)s<OQl/NY\H$TO7#8]pj+cVas4`0inD^MlKe*cH0sjY)
%UE5fCJ4.=<a<Xu5A=(]L>(km'XiF7rU$V?ikK1CI6bZY(7jm2!KQfb@D_HelnE+3X:eAmW]Q-\q"QT';nYp"U+g@sYl;T\cZm,$<
%pWBQeS?<cYrX5p4h<Pk3rp!K7eZ5%Mr&]E,lK+XR=ARqDWJ%+Ugrl%/Sl=40Us)[5`P#.0D9.@*Ogsu$>MQUnE6qcdgu8_pPir\%
%5dgV8<t-B$9K<As*0t->p%XK"n=cC!b$I!,MH$63:o+pclZ='S^+6$FDcXSf@beJ:M4Eh81S1N>h2bC%:r#tQhJY*;]Ne5A^UKqh
%hS-IrkKu4iomH5?lh]3m8cI:PI;.Dr9a_EQ5k@lA/).5)0KSeI56'Mu*!.+W#.YD/YDPQCbA`<S"iCNKq7]V1?o_VH=5"_[IEab=
%#b0HO-mP^Z1<S^;A<JI%Ujb8:fdWhQYu(n1*-F=/99DdRllJHiApcUfPHrltBujnfN],kK\Kj"X\u963n'?(Q&T@YegQ_$H"4L<W
%KG5:CE4d=Y0p5]?X06QQBD$sES<(@M]eKL_g5Z4AjZ+o;<`A\r<jrqa>#s2TSsdPEJ[3J!Qr(s_]W_R'gi+R[+DIaJ+-"'I(^B*n
%90_6mZ_U9Lih3Ep5<Njc67UAic(WRQ:('FdIVu3pkasjLS>F0Faf.uDT5lN.:d*/>UFTG;3*3mDI(@fP!5(muHtQDn#$%I<<sNi?
%qN^&QWB;J#pA^*r)/;R6p*\<HM);nr.95^^a'JILUmOa+ra!rT;+U(*3JV!Z^]2BjqVc^$^:R+TIpQaX\R>*V;6['3:DAWq-b@7b
%mXeFg$*\`@-r;Zcq__:,I?1Mi?YR(iEJj+`,fW>'c&krc3\nCr8;bW;.qHsXpmmR9iXb%LNn^1GH<f?HHu6G;Ccbu[*2>Ab])pDU
%P@<d;+;,9g]E4Au;4[`eCtH.q,`46?'29/Yi]5o-S3;:k(3L-H&CX(BWO7H*hR-_kY0)d4c!*'=$m*N`EZ14N2.*5_dUIe:.eFJ1
%8!dRce[h+=/1r%-17)IJY*[te\J3p)=E`#\T"j:F[lHKbR\pZ*;,P!E/qL\bqQdYr(45=ha6IRC2%2mL1P$MZoWJt2"3FZQF'B@b
%TgRIN.jS`WaY)9.,mql7p\?6BSR^uYE"l>5HFA*05mm4%WA<jT>qO`:<6G49s+clFLe;/@Nm*mLpJ-uS#Q)m-]MY>*UD#M]eOp3O
%.TE/l*R$]4(@p\W5CFkG&rR9p6%ZBp/6G[8@a2!Tg7Y'"!n/hlkI<E&mY6J+:p/YS)!.G4`5#?N[b]quR@^+?FQosa6c\u%;IlmX
%27D&>g<VN#2&R'36kAK'Wr%E&'7+L>8LJYV:nOT%M^*;FKN_#H0OrIE/,Ut3<GYHe1MXF!ns(,0Z;.1sQJA2-ahc-fm.B)#*h<0#
%P6N8nN!*'>)Kh2Ui1)9!c@?E`WE!r#:P7nE:kA-mg3eho4oka!R4D#jWC)e*Rk+ReqA&,*9L5PY3^H>s*p<F<o@H3;@F!Q-'N:A:
%63UicOLf11Wm;(5bh2Zd+\dO3Mbm-'pLf>[X<qjDFJbk+@51R\!X'n90'V.*n*L/;57>4M`HP8a<l51F+`Gi[4e%.t2#+KOpgdes
%)kr?e.nm(]$63luPcVdTeS;L@Gb/BGh@mMqW%qCU>#Addr_h/]9XjKmlLjdGBO1;>8pL%HlnHYYXi5J&#c:N>-</GZ/d<fAeLdWG
%g`7CXYhH[&>uN!VCSXZ4.(50pFS64AC_5hIWLQd]r'`A#]gYRQ7WQ&tO_&\D9TX=t+RHH:Dci7DL)t8&O(!/@M09H;,+&O,0nDk<
%\^]l@<`*cJfe;XC;3;&j1-#o=QZN<Dd6,!Q_Smi8\rs,HEYGIPLgY0AAoH-AdCN:"90,W//tn_N;B_P@@?>8YDr%s65_)k#4J`Kh
%*?[q=4_&$N_"%0qfiET@4j+?7.I'a:o'0%uV".J@jW#qE\V94A*bPC,,'BF3QmBsOQ7p`WO0>+t\buhY^5P7u-,;#Rn^\`6+P3J_
%rF6FP1O^=&DOe1HRN",uP[nWGkp86QBquWGr!9'M\DBD1[&)Ld[#`%eN,5ROY*+>GjQD/kZ_QLAnF>cFN*YhK;b/^m-<@%[d<O-o
%<DkmJgBmDAY:m6'>3VF!\4t/EM]4Qe#a\.]P^DTt6iiElq#-,oq*e3FB-RR>&lji`AHj43T9Y/rTUW>0.YCdR78F1OeCd4i<5)pC
%R@#q2"F!%FMNi&.Beq>.iq.ia9-`Rs5pLbiri+^?#W<E%M_XIBAjDM9d_h%aGQlt.X]2V8jC=VcLN9=$MJd+l;d1ZX29f9`@')Mt
%(_ht%KIs2sW%!PZiGnglTKl3r"R(RX'MGk2]W!_[<XQi]^&,!Dn"O=@4X?6']tiX_P83.:8F0bj1>F<Z&aBtK\IfD4D^u%<Omc`4
%kUUiJbnth^5G?+$iW*X[CB7hL\hB$Io=B.ZLuUac$Z(<e<Q"EZ\?=@DI0a@tj9Q$mi`7%$'2-o#(P?/p!+G*@Bu4M9UuM.&&sZ=>
%9Ao=/5,l/cpC<],ptK%@mqpc%5&X=mh:*PDYs?1=`2u`P;2)Zdp,Q)rPNiFm[$'$eM9a:8]&Ok`n^W>rR]c*\iBl0'%Eoe>T^Er`
%32W5VdgfS+A7W?Vq_4uM7>XAd+,?S>FXZ[7:mi0p1I:iZDerh4D-r9b1?)>I\04)ZOfQK`<K*:iGmUsWg94(7#iKD1+5Z]Gd^"o:
%::8A8L6Lj0G[GWqlL>B&?R1!pr=l!(J(ENn4a'hdXK%P/g/K;e7En-h==oqG_4afpM+)uQ&-),Zf-+USk!MM]I1uOA&tq4qJ!NI4
%Y3HCeV\O4g0[.hGc!+-tCg4Ej-7%YBfS]lu7LqYRU'_O<C)eO5CRSA@aZF]7QPr/8298Mn%;XAS'Hj`7PCT[K"c/PP?^696$m'7f
%<[IWW+"\VENWjHF%IkA1H6qmsR$8/qp*R2'[a)n:@0_!a4+)W3%.$*4AOO[N%=mj.FuM7^/g]j6iCt&fmpSP*GiPASs1<4,2FG^*
%.:g*`qk&?\#YY&k.bd5PeoT5XMQ6\8D=tJrTAup!be9#QC?pi`@!S-`Y$YY4N'0E5;I+8Wd;8L4e@&NhY3gSh<MuW)Jf!F9WU#u`
%EU!lHIggKKd%k6!\/F:G7ABDeH]iC-5>$k$!&PJ4M.q5ZDJfW]W!7ZVXB0,qQV/fMnFNAhpl/ibk30L4rQQG@?J>#7]8N]mgH3UU
%<GM3M`Y"S=0"XqM,84AodEq(un\XD#=9-$3_+P24BBcSEhiAWKC3Ccq]2O#.m;b_^g6S(>h%<`T=C5<O!S;5.'K%'r%[gU7#g>+F
%b$QF7*eT"+AS,U1)3H"pRA&lD,']%s+O-O7h$L/gG,KOf9bjSm:7j$^9Q@75=e<'k@,o-=,^sdi8MG])X^,gj@?,+gcLu3t;[X)\
%*@'<Z[@;)2;V9&Vq$^]N/s_a%dCI*q=A\0DDrPuEmaS;>eg5QZZX#*VeopBY]XQjGl[)ibma&M7ITGp^D)[+43u`[@HunWRb'ecs
%NdAi&c[<Lp4JiDa<'/]N1'P7\aLW*BbsDOuN*q!1h2P.3Tq^-Wp1cNsER#.r1]pY:.AJ,"Rc^c>Q(pEP7cJ#AX.=GoL<#'`K_i^D
%n],^Z%7&p`hVB]0oM@(e5"qdVcZA`dU*)DS7mqO`#fbOD+J'!X'#@C$DLWTG^ms>PomZ;nNgMK!W#FiY5RC;N/75`_(P:X*1UXIC
%((p3-oYtcM(6[7S'^SYG7#e,u'*ZU*hTMJFZZ1$GB7*1C9RK1:YiAZ_aDmj7kd_5sXc9->gtb2qZti)-NZ.J0lS1<Lc%(ZV!*sA9
%#%R.3$^BBRDgVWGepY27[)7>X=o(gs06m[p0BR,c(BLfD3_%)L)K+D.F1=2ec$bQ$9>:07(175*(=*Whk<u5,kP9D[YWZSY7VXd,
%CK*=4Feg*(4Dg]iXJnOA.W0`4TM-Wei:Bhu9jd_9SsT>Kdd5B$57@\86R2F`?%aHrae9QlrC`A/QkKIL4p&0`R(CF&*9eV%</h/8
%m5!q;'bEGk?'%L^E![h:j5HJti:DnEW0n"aP5O=G@I<dX5V^5k[ncbu9JIRLp5&@q!TGaH7oe%gnO>ZnDKub>"!$U49&qJ(([)U\
%>_Cp&J.c(3cLSpCWBU29)P@SUS.0HBB74I^j_,Mk"QHf$GkbYZp2#W<I5SoTFo!cK"/`cfba"WnEMJI3-h,G#P[!N?,>!RADk<8#
%>0pEIKR2"'mc%G*+\@MpgkMT)6:QV^/.lePn[I*Z%OF%COd)6V+l+kNI$]HA!kI247\te:_UeWS2&EHD=&+d2Aq=AT4AYLN,'A?-
%RN+`m^IJ+Og"gmFh_peLVCZoU+Yu3O3`:(d#XFDkW0l]Q<K@Se*s+H`M#904MlDeMN$JH7"L>L(0&U"%X)IZeicS85/c=',4_&5#
%2+EGA?S8Z1b+D_9]u[W.rd0S0lgd0QDnPd>fpt\UDh!QS@ZcYlG9sGEE^Q6J4\jXg!sa[D==hVkilka=2e'%&/lL`&g(F:Bnd$hP
%UZP+/C(2QV.,QiD%*46h93>;,Mee67HMcW@TVJ$"/?S+U.fp%\2kHo@D:eC6Fbr<59J8>+Q((^WP3cVOfRHkUS?RSj:S:78n=od'
%Q*@R6#b=*I"""WB(;Y1:1bl(;btAg-\Wu]L!"Krc6dpYWBCl5D&pUSK(RT:b/`d(LL9:gKFNt8M^hYkT>a2/NrH_u])<lQ^,RO?\
%%B;pg^3@F>bg1#`q!.N@hE&'6re]4@U*.(ar;g7?$g*UVQ$=>b54d$Y@<kmt$_cWojTt6sp6n.f/(S%6i%spE?Iii[jhr-5Z1rrb
%SLj'ZY.9?sr%uB">-*5mmO@5ab_Aakl?00F)[N^IG&A`u2@CnbX5c%,q)cRP="IHD,>CVs0,BVGo]"ERiU3Zqep"u>YB7\DYWGVm
%?f[!\Drba/*c[\P1H:STZpNqnOo*B!+9rFgT<BU:X-G5Vo(J=QDEk<sCE$so*6Q((5#3`a@i8jRp5$/C!E[qSUt]+HgW5U"6]SU.
%`@`B3)u<p743Mc5\,3_Q5o#t5mLhIYRD6n]N,H!H6b`@1r8)B5*4+S_<M1^mX*\)6TG>d/r3<p`)gKK>MKHrOX5@;I/q@#QNYM$Y
%8uleK)j?c`^q6lJBns[_D+1M!jG[FtW*`qL.lW9f\hd>c.[?e^>-Vl&cLOIF02ZMWk@<mV['\P#2c!G2>DS(f@)Y:`GZR8cP9,Y>
%],\AbB)%?es&ljBWddC*jlC.\Lq;0^iR-?_RZ(/)Lf[cKkp5)IhBT6i%cRsnS8(gX^6s1m;Y<3.n\2Qr?.'F3!9$@7j__0/l=PWo
%0]tN<9TY#[SF.L+HF9t[(]6Y)mWjEAG"KH>DumFR;dB;.W8u9Z8f23?e9L<SCs?r^#SB@^i"0N+mQ7NmmHjKbp@!$6pBP3*_h6fR
%8-tpmm#/kg%]u8;DLa1],W2*&&CTq>@N868(Z/3PWha3!$&"rI%S7.N'0C'ulb.M,-U,lH7sC^.#Q**a08e>F&BD/=o^_H5,:0B#
%+7dsc'7K#.=oP;,8I@hD81!7dfd-kQSs5#0&a*uk#hoS=EuJ,R(ndW*oZl*or.UdJY5,Z0&+r,FQZ^<Rk+G3IR^!oR<MG",>cL=I
%<[C;N5JqEPpeT=,_2!%G@?!.H`31BC41j*dYD>8?g6ciRdg][V]^CrKE\ZCMSl2rZ7SjFiR=NJl.Wr,1UA:K^;fS;+=]_\`r*?Ig
%5mlh7#dgkAg[V+VC;sR5qVFlFg\B;-^[7J=47NBiY+)^NrFPLC=J=>>PVla?YIt$;Rcjn&PU[4!Bb$=,`>8!^AbsEDk/@p$X*C$\
%a:d^gS:d/c5/0/d9,7LZH!`?c;40b6mh(gO%6/fnfi`ZT.u/0:,Y$dJFY(u()?/8p*3!!$:Muj(F+h^QECe48b6*h->WRg5AbG62
%aqc6X-?pIg:L!34?96]q\dF&SHHa)B[hJbq^s3^rOnRV>Bl=Whe<1SoY8"H\@7)rDKKDO#2_TYq2`<c5U@"%C"=gJbL4#TQ2dZMs
%4=s\0'QZsPoEDjYYn<o`Ci,HB4Q+IlF'-sR/qOPJMHBJ,eMsf+r(`/K*(fVeR]MC2*[;t61,Ua@2n[m:8I=!nf/_eUifp8[kBGt2
%7f:u*(;a&4LchkCeOi?ck;e"G<W/p0m,QtU"2m^_(IQcKAtA'alUL(7>S5c$Ja.,>WkGSs>#@::"XX]e+gF4aqdp<'9K5'F\Yb;^
%9^*aP7#>GqOAq+9>'%242&hmQ/W$_98%E$7Lr(^3^aLMp53(1?>GHSC\\*WS7H&*JcU>5mS>@f6<%?LJg-h\8U/.85nF5/;Q+Ail
%Z7XVBqVAAE?f;iSlFdMQ7!EeuIViD9UEeZsX`eRJ#Ip`NP:2-;KhH#hKLI)9KE!Z-Ua/k0+XJQo<a:4cdA*-hYK2@_C)`ued7[@b
%8:sUu(f8"!'9io!!!YNM";2D3I^4]rA9p11JX[6L#P#ocC`.C,;PXW%U3OOnNAO<5Y`o_EFZ[H/bsR"CLjrDPYe87:=ks)AX2Fe(
%]_H[VrkChiruH^kD[V.M*i^dDrG2khV;gj:::'.r!Y/KW<q"HsrP>dV#*V5JOh)dbkkaDDdt3jU6O-Iln*sd0L%E\+<t]2H43E**
%L.-^(,$i5G>Y>N7p^1aihWGr??,cCW.,9$gd"50dCbJeG1FO:<2RsV-E,,W<DPLf]K8>`4T!W/jdm#(ZbM%La2&O;GW16#eWr<33
%Kr[LKS:thZ_92$:NSL8b**A%S)_]#;<Ra":"Z>iPo2*Y106Tr1K]<0*3GXcf?6Y%?[m"bA\H8eV&i1FLb7qm\&p5[<f&VL\.3mD]
%V&lGQi)_gkZn,<M_MGh/][QMmjHu_,:-k4\Q[ss6\[!E41O,2nJflSqgLCANo(h"&<'QcKkY=Vq+)MQP'@`m!3Dgo4(:8q8b#I/O
%UJsDt-,e6VERol<V+Q/jFNIi?Y^m*VKn$PZ^+KqDWZZ[hB/h]+UcLW_7%228Ac<CU2[Or*]"I*-i5>>gNcqahi/cHl5pl"LC_`\9
%3M43[>b&k1:$-q(%Tq<i[jDuLlJCs!<j3mR$6+Iq]r$[Dp!T8`fYgeD_n$$:4!Ibu#BZ425Jr5$3J/+]IC0nFekElE(gIW=0?M]2
%F5%i24C8i""-Yt.0[ZWW?bXZCbo&YOqkjbA;))=@Qfn8Cf7;?ErL3jkg?T+M4BNeCU65-S1"RoC74JR8^?7qu1?I;KU_#u`I>^/I
%GR^[A3auj'+o7sXVrc%^epG4BqBTNUe<$5"A/"bU?l[X[\B?lc5\\qF^3n4a5=hr-Jj?58X*Vm],GPW$IjNU"#PrViF3G#=5[os4
%qD4VUJWb/[:Ik]%P8d>J]'/^+iH>V2K7ckHjuXe\jeUA)8IF:;j"7<<gP\AA5u*f@TNeq.XD7XFUEI.C8&*LZCIu5hK2%X.:&sk"
%WF]QSVflnb=_@GVVr;n`2Q6UA+c]cE4g?o=(k)<2.J*#PFC7QL#.]S'jRWM8&eeL6lo@7XjhOZEk.K.Yc4Ae/ID93cs.Lnll&Kje
%aG=#La'[RgIC5Mr-k)3kd0UZa-\5%S'UW20*`JRqD2H#,7He@eUkSHC7P#\HdCnNa$J"I32@Hh$2pD)2oB(MF5&8p,<BX-[j70dl
%6?FF@;5UBnC9Pm4-Y),gTQk0p\9;P/lMV<%XgiKCS3ULhoB=!_^oKr_YRYeApa]&W?5lj>k/EMfo%Hh>e0j.,1^tPGLm`+!)A.dP
%hUW0")AR[u#=k"NJHRqFKotk_(CV0[,EJ;3M:D&7LC<nFi$SurO^i?M^_!'K6ni]@7VuDBrYRA5(X`BZ2:19G0NG[5*Qd[3rpi"Z
%c><+8H:d&0[(g`\Vac(-jtP)!R^g4IBEW7^YS0'F,N\g#=<@gE95\sLhntfWSr\`76R.lkXpP#h,Auj0,Lu$$h2T#6i%]DaJ4t/m
%O"mgMqc/SoaM(T.kYZ5>@Gho@>tTLqOR8M:ds;G\gjc6>520B=%ZY`8ISTF>:98ID6QQ>BTAhcT<8otC-\,%'pR#q\nj>"/h&8Z=
%;qG9S.I^o5;)!lig29_leLYt5G:ppn..L]k/Y]^E$nO@0S%%=]nY`$bfMSGbZu$:EG;_?'0p=i<M")pQ!*+c+H/91g&K*K`a;k:R
%Fg_p2`OK__5iRm6/o;o?M'i*JTj6`4!s0oHPEI,6hj'l##99=:IaPLjo[8ruP.^9sQVXqpTn=#(B<1r:FmoFAWIbf1Q":A+[\^0%
%!QApDEYl<(7=$+Cq]aKOh[U)Ld@eDS%J-H7QnmaR`],H^mIj^pf8+Yb.>JK$+ZG:2OGJR;D90/6KDM\.e[-R8Ybeo=;7LNVO+nFq
%i>l$(#p`seWjs?=gIPT9!_93"cfK_XchEK#@<DdQVlOc>n#$?fpgZU$BPd[&:jmkHhl(+`msJ25>UHB=H^G9IKIa\r/MLJM$>^*W
%*b'N*FmmPaR\H$n",V"if\]@o!^-O1E$VTkEGX(@;H%5(ffNN;i^iSi@b85](.SHag+T]a4q[)TLFE3K><7c[-Nlh+eX45LD'd=7
%7=SXG^iM5UdbZ3B=qS1kNbfe_Rnq$>luJ>,.5[oP=ERV+_UMHV@LAJSG.&G,aiugk:'n-6q7A'aU/$c7Q`$mrbIbbn8V$G*P*]D;
%J:aFW#;AWm23XMebL3452D0p+nW5Ti&!=AKhK_bW^\^?^]N`5t,O0=$-1V.%<Rq&?_!EGJ^nOQe66/]FH:\[3&J/ReSb]"YU7DhO
%O][nTlq@b/'J:popNMP?dK&bA4baj,ABq2uF%Z,L8D7q<'J#V`RN&'s=[T/HS%N%#i:c,THJ^VRPX#(YlQ9i`JH7uW0c>$@>S(,b
%mCGcLTW;^N0b:md(NGT6^a&DNr2K`d5gNZER@m*>s'5Eb^R]PY#/W-bU01C5:VVmj"U7J&)CJ/e&us>_=4+L>,-EY`rDdiIkYH>!
%%SnnY[]=*'.9R4Qf,Tbi:7O]H7CPa3r&G[1_0NJ"'h=d6dE(C\kYC)c>mU%C-(tb'&lD'G8s?2&VS8_mWMISW=%=I],'n.\]V4tV
%.N<1CpGZ$b.=>4fUQUh*[Oj[!jR#oh__hq<SDTC&+jQG+T=fWnLe[Gc.3$RP?`G?G*63aU>6rO9fF,tXNq"7%eND3b!AiGEfj&X:
%9_KFk]^9kHB`T4ljX?F`jL/juFoQ_2"@_M;lsRaa1GDG6@$<[NTAXQRP%P*+^Tm-nc8H+L.Y1B?Rc$+gJA=cuoEeE:#IAEpZ6"RZ
%<8=@E>m4[nUHKU\&h#fCgPWg5AkDkA",XrS-eX2L\tj=bad>U1Eq$<jeZ;0iW-n?u%MLHD>gt6*eZmT.3a;s2hdbuoq$rC328LA=
%^iS%ep%hT'nF-ABXa`r6`1MV$=_\H_$-b;Djt,%uhUH3'P+<iZX!9<q0H\g7K98(*VC_LuYmt%BROdk_Rok?t;\bc*?,UD<F;Z'a
%T`O7[PoEIA1Fl*+Zi6(^`oOTagOZ!9_9J,\CUES+<qH"[C5TbI5RpOq,amc\c<1(r6iDpC_u4_p:$UP>Q+a::)9%-m*UFf]%Aono
%<?*:deslA;7-SFs`)KA%DHh;n8q\HaM`k@Y+Pbk_\X:P\al>#R$E,O*I]aU><Hm=IC^eWgr2&pCR!>sUF=Q^]K0ubG@+_=Y$YLjK
%=Qci3$S#lI+O>id&"G=*69:!tZT.%NGqt`q7NMOf"hMQ=-p8(,JurSl3Z1D:`IPllb;i=5)&DUD95n<*\?&=,XPr4NOSI.Cr8mE-
%57d:>^,E]QKPqt+RZ%/ZN!__47&PZ]&E,74qI>']XgQg5]f)W6C,)GP#D::kbeZoA%q7KkmCJap;;pkr;*RF9BW_5V7N.f+CrX`>
%DNBb4DID)0]er?>CJeD%_Ro)@c(=+n.hXSrpC'^&JR\<K+1l32M(/gUf"WY'!CqMh>6!rf&ITQ3<bHL062i0q>2rBfP#>L!376?#
%XEq'IEZldl1%0j8[s?@Ni%2EJe\nHPKK^ICTDBSh9rQm'$/NZW4jWX7QSDnZk`(GGY?1CejZ@Im8=4;_#YYQ%j+1o;GVBc/./D)l
%KS=_F/8!A;NZJ4%ZA^;'nu=Y(=Imt",RT[B'uKNVm4bRUXnPAef9mR9:.O4oQdBh5hb(oPH&B@?&OTBjg69Sh>_bO"DecSp,-RMu
%HVo["U4gMPJX,s%cW4?1or'-s,B%l_4<lEES]nr^#:$E&RJN0DN??#*d#R5h+QgP?F;)=SOk-UA34oI*W$2+sY'CB3:g$?+m:h=4
%et`%DnqHY\47@l0$uCjurp[b@&h>.W0hoYH0DR+M;UH$VjG/(eC2D>o]*=7RGYU/XX<D<BM*MQ67(E87$CbXn82#%*b^_7lYL#jA
%(4XY#^2L2WC,I25FS"qSUAsZQ%);>t5>)g!7-K=feP"a_*'Kj-r29#;qg-WPpW?Kr]HW3H<kBE!1&K3u_,P4_YNX+9Db0,$[`*kJ
%q1,`'jtKadl]=Z)btG7k&1taMEMA_4nY-43Od1Z#RLDJ)D6eH=T;MC#fCU!h(TQF/KI=;O6tl@G]`]+K;Z3kRb7+EcA\4.<<WR9(
%DsF,f9RrnmF=<Us,4^KnB`f?%f3SObNcs]'?*]<P%.7)0k5+Vt?R+EtZ4_LMjD*1a<m*&^l,Ir0.Q<6Hm;elZWsSc_N0j.DXohfm
%:\/30Q5f[fo(ZF69Y_LR;q&p7VdcC=E;4V[2(%KiikNM\-KQt<+U^pCauX:i(pks'1j+6^Bc2W3P6?&4,=Z^GGO:YUnqJQSe%fEt
%]GVQ]kP>)9L5RI?if+\Rb:>XI]^nmYI,l17ZOWH8.r%H`UjC-iW\_*cC,Y9J_:k9)A7^,Y=tRe$e6?D%RO5Y'7%oF6+PmM4,"u2\
%`A?N],:W><f]7o)/B!.-O+GQmjAs7+^7+#aenur:#t32H"cgNM(icbc'1/M%`%P@)BMt1#2?RXH70=9G9!O.g7(u+iOqQUP%oV.*
%FBdN.OuQn?!;_c_8%]Aul=,Kpl0.^_!b#;QQDGppqZao(Dud&o!Y(,#Mpk?scVsbMOg(H(>_o7L#KbJ$^'_i-Yr&t%_\X!:H-sDq
%ZM[0$n%]N^rMqS14t=fo339P[0^"W5_:&r!XI?@uO<)&^5_uG3)mr1dYti8Jk?ZV;!\aU>1e%"lJKmXV>N9dTk@Ti[IPnlY]_9[g
%Kq+CXPe&ua=OAuq\J*aZ^3Rf+^`+1qd-9Oi]TiIrOgC8/Vs&o^?tjV*$al44[pJ*6NV^^)[T2mh[I6C>!sS!N<e/Na0s-"^^gARr
%TUR`1+?s1'H>0smeG&/#D--A5=$aNfa<h+3M;Zr?kp2uHH>$:l""S%KK6K2H%$nKr7$/anp3Z/e*RQJnR7=fWRfnBg-!'$a1\M:e
%DgN1(m2CLEQ2:$W+Zi1r_W/U17<AU23!#S!<.W&V(TOEU,Eb9V8.[/mdAb>eA<q9:LrgR)^JIoITu,TBL_(56!$(^215A'0h3XF0
%1'=Y@'`CM6XaQP?>N('];*TMV<o^;ke%g+ult2k.g]7BlP[nH<6k"I_5i2%dU(/f;=3Zj5K!n&]+BY&*R,L9M(9JesG*R4?7<LUV
%cX5?$=^^<A+I7i>3Mo*:I2T#Bp9OE#0X3^r;iO0[7!/D.hP@`akmLV91N_^n^kDd>A\]gpfKEN>*f,\/5!6%4`uf$Cq);eY^7]h$
%\UQ@3`X\RfhqZ-,r8I$K4HI4eO6:TAgr]0K]6jA*g4K=K>PX`&<K:%n-mgKLlaUQsL+EDO.dLG&L<<%BAa#RUd#]BI0I.,RM<2e]
%j"&%EeicfrSR/)3">Yn6[m=V%5W#7:nqYQ\Wp`WP\lqYf9q<K&\ZUk'L9kJE(TR_*3NBttZpJ5\&<-lHVL+FMH=!'/I_k@CE[+!?
%rRP#>-f<a=oB<g@EMi9oL3NmYfof_=Q96+@?_Osn!,V-?)YS7'F4H@Wb-)A+)DN+m7DG$a.Jp:,!gYK%=,RZJ^I_EqN<2[b(H*]V
%Rf]1iBFdX52dJ?miG`\>@K\Ak;XC1M9hjgaHsQXd2UBY-CnVaQ]PGH)Nd1/J?k:gG5KKq9Y!KcP#i]S-ZT4a,^eGUZYp?JkY`':)
%>39.%Q]b1#Y5V9O4I>?]Pg5Y7;Y8_/A]`i4Z=Uqo0=#o7!Y[hE]kKm)"pXqK805l(AQ0(/+o0d=/`8)TiYSZDBe#[coEGG'J$5Ib
%AQ/$T=lhknE6ZRF!4%<@i%s:+9AOe0oKr$nPU8370C6?W,eS5+ORtjEq:hpc_-ImmceHnglER8pLLiM3BXqk/?u<0kC/-Db]*%Y>
%PGo!1`ni0[0O'&ZZSPfpIk:^T"?`93&_0I[BoYPJH&X,1o#M/qJe0-H8?R6qqOu1qW,_FAc;PYU:_qXjF,DF"j]'i%Gu-EQX[N=Z
%b&CScbDj[C1Ub`)@p@R0V0B\(FZj"1X.GA2ShNFRR!$#0I1[9jbPn+dpu:V4*;H(R[[hBURp0+(TkTeXBMUQg2U%A@okhCs>S9=n
%=Wl/S!][=/jS=(6YggQKlCr%"%hHdEqs:G*"+lrl;QAfJpO9uGA2NR,FIl(*BWP]E+KF&/?;X[9jt#H\i%7,bs)0]1LsU4aa&R63
%BhS@I]ZuaZ:CPZ;+6DUail5pSU$TQ7XgeaC3*%`Q@5%$aeho<EQXtp0&-HNen)B/QA(@FBAm)[j>s!paU#IK>aRM&dbPY[2lc)Ps
%iS]i)J+?t]0#4lXorU@_2]@m%B3"^4p-l)bA+Q2#_?F*"nh&U-&)6,qnim1($7_3EdN!D^bMBC)XagkZUhJV>YElO_";"f-R2f%T
%Y-L#X$bY.BE/fSggHC-Z#BKg"[uVM_c>#[Arr]0XJCG1.oH?59LpNo<OfF10JG?-)SssM&YUR-e1of1N!C`6Ne91X.p;j,!cYi(4
%OAUpfrgBoVXTY=M?&tI78`9OGeb/k4`&mLAQIsgOePH2'VuQ8qr"&gKs20?^a8bktn,K"ErmPe8HNnrj^]+0rr:,:6Vn`6rrq+6\
%qN([8+9)*)s742@J,bT0L]R%ds7?/d&-),pJ,JL0lbEJK+$]\ps8LpUDao!8n\B'lo3_K`s62cIL]8/i-/94~>
%AI9_PrivateDataEnd
