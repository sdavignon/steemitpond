%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: sea_animals_set_2.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Надя
%%CreationDate: 5/27/2016
%%BoundingBox: 0 0 300 300
%%HiResBoundingBox: 0 0 300 300
%%CropBox: 0 0 300 300
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2016-05-27T15:15:02+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-05-27T15:15:02+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-05-27T15:15:02+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVks8EK&#xA;8ppFjXxchR+OKCQEFJ5h0OOvK/gqOoEisfwJyXCWByxHUKDebfLqmhvk+gMf1DHgKPHh3tf4v8t/&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:97A63EDAEE23E6119F0BA4456EB997E5</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:97A63EDAEE23E6119F0BA4456EB997E5</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:96A63EDAEE23E6119F0BA4456EB997E5</stRef:instanceID>
            <stRef:documentID>xmp.did:96A63EDAEE23E6119F0BA4456EB997E5</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D117A9E4F41DE61191E8DA9054F80A25</stEvt:instanceID>
                  <stEvt:when>2016-05-19T23:06:22+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:97A63EDAEE23E6119F0BA4456EB997E5</stEvt:instanceID>
                  <stEvt:when>2016-05-27T15:15:02+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>300.000000</stDim:w>
            <stDim:h>300.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -300 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 300 li
300 300 li
300 0 li
cp
clp
300 300 mo
0 300 li
0 0 li
300 0 li
300 300 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
260.764 95.1924 mo
260.764 83.6919 li
260.764 83.6919 263.426 75.437 267.576 75.437 cv
271.708 75.437 281.983 75.4263 283.89 74.5415 cv
285.962 73.5781 288.986 71.2451 290.223 69.7227 cv
290.621 69.355 291.241 69.3276 291.049 70.1367 cv
286.653 85.1567 275.03 91.7231 260.764 95.1924 cv
cp
.0784314 .380392 .513726 rgb
f
261.313 95.1924 mo
261.313 83.6919 li
261.313 83.6919 258.65 75.437 254.498 75.437 cv
250.368 75.437 240.09 75.4263 238.186 74.5415 cv
236.113 73.5781 233.087 71.2451 231.853 69.7227 cv
231.454 69.355 230.834 69.4233 231.027 70.1367 cv
235.424 85.1567 247.045 91.7231 261.313 95.1924 cv
cp
.0705882 .341176 .458824 rgb
f
108.325 107.312 mo
108.325 107.312 150.466 96.4863 176.756 101.125 cv
187.857 103.085 241.127 127.707 256.657 97.3901 cv
259.695 91.4585 258.33 88.7544 261.037 88.2705 cv
263.979 87.7441 263.338 94.5356 263.066 95.8096 cv
259.008 114.851 244.026 134.762 203.047 145.586 cv
189.171 149.254 159.744 153.705 125.336 140.561 cv
104.836 132.729 105.231 111.179 105.231 111.179 cv
105.489 109.759 105.877 108.568 108.325 107.312 cv
cp
.0784314 .380392 .513726 rgb
f
251.14 119.42 mo
241.925 129.907 226.893 139.292 203.047 145.586 cv
189.173 149.254 159.744 153.705 125.336 140.561 cv
104.832 132.736 105.231 111.179 105.231 111.179 cv
105.329 110.566 105.405 110.23 105.643 110.115 cv
106.833 109.449 109.006 108.704 111.031 109.894 cv
114.124 111.688 123.527 116.714 127.779 117.101 cv
129.264 117.239 133.378 117.921 137.692 117.333 cv
140.568 120.611 145.892 124.755 151.046 127.223 cv
182.555 142.299 213.654 134.299 227.527 130.634 cv
237.484 128.003 245.155 124.091 251.14 119.42 cv
cp
.572549 .831373 .815686 rgb
f
117.538 113.369 mo
117.344 113.457 117.259 113.686 117.347 113.882 cv
117.347 113.882 117.574 114.383 118.004 115.322 cv
118.446 116.259 119.113 117.626 120.1 119.291 cv
122.042 122.619 125.407 127.152 130.664 131.223 cv
133.29 133.242 136.341 135.165 139.757 136.81 cv
143.172 138.454 146.922 139.862 150.893 140.991 cv
154.863 142.118 159.05 142.962 163.335 143.574 cv
167.624 144.175 171.999 144.583 176.401 144.655 cv
185.199 144.835 193.98 143.8 202.037 142.118 cv
210.102 140.435 217.444 138.065 223.55 135.597 cv
229.659 133.133 234.515 130.522 237.76 128.46 cv
239.391 127.443 240.604 126.542 241.434 125.93 cv
242.24 125.289 242.673 124.947 242.673 124.947 cv
242.706 124.919 242.699 124.871 242.682 124.833 cv
242.506 124.927 242.325 125.019 242.145 125.111 cv
241.939 125.27 241.669 125.485 241.31 125.767 cv
240.482 126.372 239.271 127.266 237.641 128.273 cv
234.4 130.313 229.548 132.897 223.443 135.332 cv
217.344 137.768 210.009 140.1 201.961 141.747 cv
193.922 143.392 185.165 144.385 176.411 144.173 cv
172.042 144.084 167.669 143.658 163.411 143.041 cv
159.15 142.415 154.992 141.56 151.055 140.426 cv
147.119 139.287 143.407 137.875 140.037 136.235 cv
136.665 134.597 133.663 132.685 131.083 130.684 cv
125.922 126.653 122.642 122.19 120.745 118.911 cv
119.782 117.269 119.13 115.92 118.697 114.998 cv
118.308 114.131 118.095 113.66 118.064 113.592 cv
117.907 113.518 117.752 113.443 117.596 113.368 cv
117.576 113.372 117.559 113.361 117.538 113.369 cv
cp
.435294 .74902 .737255 rgb
f
247.189 122.204 mo
247.063 122.321 246.937 122.437 246.781 122.579 cv
245.911 123.376 244.61 124.522 242.874 125.88 cv
239.426 128.622 234.177 132.174 227.397 135.526 cv
220.623 138.871 212.323 142.02 203.116 144.166 cv
193.927 146.338 183.845 147.587 173.772 147.368 cv
168.734 147.316 163.724 146.737 158.821 145.998 cv
153.92 145.245 149.153 144.162 144.64 142.803 cv
135.606 140.105 127.657 135.953 121.985 131.007 cv
119.127 128.564 116.883 125.919 115.154 123.417 cv
113.419 120.912 112.257 118.506 111.479 116.472 cv
110.695 114.434 110.297 112.759 110.096 111.619 cv
109.89 110.463 109.87 109.869 109.87 109.869 cv
109.87 109.866 li
109.86 109.652 109.682 109.486 109.468 109.495 cv
109.254 109.503 109.089 109.683 109.097 109.897 cv
109.097 109.909 li
109.097 109.906 109.125 110.576 109.342 111.754 cv
109.554 112.936 109.971 114.654 110.78 116.739 cv
111.584 118.82 112.782 121.274 114.562 123.824 cv
116.332 126.37 118.629 129.055 121.541 131.521 cv
127.318 136.523 135.368 140.68 144.47 143.363 cv
149.02 144.713 153.814 145.786 158.739 146.524 cv
163.659 147.246 168.701 147.811 173.764 147.847 cv
183.883 148.029 193.994 146.743 203.204 144.531 cv
212.431 142.346 220.742 139.159 227.523 135.782 cv
234.313 132.397 239.563 128.816 243.011 126.054 cv
244.748 124.686 246.049 123.532 246.921 122.731 cv
247.678 122.027 248.107 121.629 248.208 121.535 cv
247.874 121.762 247.531 121.982 247.189 122.204 cv
cp
f
130.382 118.802 mo
130.821 119.544 131.503 120.656 132.486 121.948 cv
132.956 122.613 133.576 123.273 134.196 124.031 cv
134.896 124.718 135.581 125.537 136.445 126.268 cv
138.082 127.84 140.18 129.311 142.515 130.816 cv
144.925 132.194 147.584 133.627 150.569 134.727 cv
153.516 135.921 156.74 136.844 160.093 137.691 cv
161.775 138.091 163.507 138.407 165.247 138.777 cv
167.006 139.05 168.785 139.324 170.578 139.603 cv
174.189 139.987 177.837 140.441 181.531 140.561 cv
188.906 140.853 196.29 140.243 203.096 139.073 cv
209.906 137.907 216.144 136.212 221.38 134.46 cv
226.618 132.707 230.86 130.897 233.763 129.499 cv
236.674 128.11 238.221 127.087 238.221 127.087 cv
238.265 127.058 238.27 127.003 238.25 126.956 cv
237.998 127.065 237.749 127.173 237.493 127.28 cv
236.795 127.692 235.508 128.413 233.66 129.282 cv
230.758 130.662 226.519 132.448 221.283 134.174 cv
216.052 135.897 209.824 137.558 203.03 138.687 cv
196.242 139.821 188.884 140.392 181.554 140.069 cv
177.892 139.933 174.234 139.46 170.649 139.062 cv
168.867 138.776 167.097 138.494 165.35 138.215 cv
163.621 137.839 161.902 137.517 160.234 137.111 cv
156.908 136.255 153.713 135.325 150.805 134.129 cv
147.855 133.025 145.241 131.598 142.873 130.232 cv
140.583 128.741 138.529 127.284 136.935 125.738 cv
136.09 125.018 135.426 124.214 134.745 123.539 cv
134.143 122.794 133.54 122.148 133.083 121.496 cv
132.126 120.222 131.486 119.168 131.051 118.427 cv
130.76 117.903 130.569 117.561 130.478 117.395 cv
130.209 117.37 129.971 117.343 129.729 117.317 cv
129.684 117.425 129.674 117.541 129.733 117.651 cv
129.733 117.651 129.96 118.051 130.382 118.802 cv
cp
f
167.282 128.769 mo
167.282 128.769 165.93 137.467 171.729 145.973 cv
177.208 154.008 194.823 154.683 200.757 154.576 cv
201.995 154.553 202.2 153.976 201.271 153.53 cv
198.002 151.965 190.752 147.815 189.127 143.139 cv
184.873 130.897 176.24 133.86 171.987 128.577 cv
170.53 126.767 167.863 127.675 167.282 128.769 cv
cp
.0823529 .407843 .54902 rgb
f
105.63 109.938 mo
105.63 109.938 105.786 109.857 106.08 109.707 cv
106.39 109.564 106.854 109.36 107.473 109.211 cv
108.089 109.054 108.888 108.989 109.77 109.168 cv
109.985 109.231 110.22 109.267 110.439 109.36 cv
110.656 109.461 110.879 109.565 111.108 109.671 cv
111.526 109.911 111.966 110.162 112.424 110.424 cv
113.343 110.941 114.334 111.508 115.401 112.069 cv
116.459 112.652 117.604 113.204 118.782 113.79 cv
119.979 114.332 121.209 114.91 122.502 115.38 cv
123.468 115.754 li
124.461 116.053 li
125.125 116.251 125.786 116.482 126.471 116.566 cv
127.807 116.837 129.245 116.963 130.605 117.097 cv
131.977 117.212 133.329 117.281 134.634 117.24 cv
135.939 117.215 137.196 117.1 138.368 116.891 cv
138.953 116.781 139.524 116.683 140.058 116.519 cv
140.327 116.445 140.592 116.373 140.852 116.302 cv
141.103 116.209 141.35 116.118 141.592 116.028 cv
141.833 115.937 142.069 115.848 142.3 115.76 cv
142.52 115.651 142.735 115.544 142.945 115.439 cv
143.154 115.335 143.359 115.234 143.558 115.135 cv
143.749 115.025 143.924 114.899 144.1 114.788 cv
144.821 114.364 145.352 113.869 145.803 113.48 cv
146.253 113.09 146.519 112.695 146.742 112.469 cv
146.952 112.23 147.064 112.103 147.064 112.103 cv
147.102 112.061 li
147.242 111.901 147.485 111.885 147.646 112.026 cv
147.806 112.167 147.821 112.41 147.681 112.57 cv
147.68 112.571 li
147.68 112.571 147.559 112.708 147.332 112.963 cv
147.093 113.204 146.803 113.622 146.318 114.035 cv
145.835 114.447 145.262 114.97 144.495 115.414 cv
144.308 115.531 144.12 115.662 143.916 115.777 cv
143.706 115.879 143.49 115.985 143.268 116.093 cv
143.046 116.201 142.818 116.312 142.585 116.425 cv
142.343 116.515 142.095 116.607 141.842 116.701 cv
141.588 116.792 141.328 116.886 141.064 116.981 cv
140.794 117.053 140.518 117.125 140.237 117.2 cv
139.68 117.366 139.089 117.463 138.484 117.572 cv
137.271 117.777 135.98 117.886 134.646 117.9 cv
133.313 117.932 131.937 117.851 130.548 117.723 cv
129.152 117.574 127.782 117.446 126.357 117.15 cv
125.64 117.054 124.969 116.814 124.291 116.606 cv
123.277 116.291 li
122.301 115.905 li
120.991 115.417 119.756 114.823 118.553 114.267 cv
117.371 113.668 116.223 113.103 115.165 112.509 cv
114.096 111.936 113.104 111.359 112.188 110.833 cv
111.261 110.307 110.474 109.745 109.673 109.607 cv
108.878 109.44 108.146 109.489 107.571 109.632 cv
106.989 109.768 106.562 109.952 106.271 110.082 cv
105.977 110.23 105.819 110.31 105.819 110.31 cv
105.717 110.361 105.591 110.32 105.539 110.217 cv
105.487 110.115 105.528 109.99 105.63 109.938 cv
cp
.133333 .298039 .419608 rgb
f
151.818 115.961 mo
151.818 116.949 151.019 117.751 150.03 117.751 cv
149.043 117.751 148.242 116.949 148.242 115.961 cv
148.242 114.974 149.043 114.173 150.03 114.173 cv
151.019 114.173 151.818 114.974 151.818 115.961 cv
cp
.819608 .92549 .952941 rgb
f
151.288 115.961 mo
151.288 116.655 150.725 117.219 150.03 117.219 cv
149.337 117.219 148.774 116.655 148.774 115.961 cv
148.774 115.269 149.337 114.705 150.03 114.705 cv
150.725 114.705 151.288 115.269 151.288 115.961 cv
cp
.180392 .247059 .290196 rgb
f
139.873 65.9502 mo
140.788 66.8213 142.336 65.9751 142.841 65.5415 cv
145.823 62.9756 145.846 61.4307 146.788 57.9023 cv
147.281 56.0605 151.766 53.9194 150.464 51.5869 cv
149.115 49.168 131.631 54.7134 131.631 54.7134 cv
129.79 57.3008 li
139.873 65.9502 li
cp
.52549 .701961 .721569 rgb
f
140.093 65.6938 mo
141.095 66.4634 140.493 68.1226 140.141 68.686 cv
138.06 72.0244 136.54 72.2832 133.193 73.7554 cv
131.449 74.5205 130.017 79.2783 127.515 78.3477 cv
124.916 77.3799 127.73 59.2598 127.73 59.2598 cv
130.011 57.0444 li
140.093 65.6938 li
cp
.545098 .72549 .745098 rgb
f
21.2695 28.6011 mo
34.7207 25.2969 69.0361 25.395 84.5195 28.6011 cv
117.561 35.4458 131.957 54.7983 131.957 54.7983 cv
133.624 58.2856 131.722 61.1709 127.001 59.5166 cv
127.001 59.5166 114.256 56.4507 104.107 56.6855 cv
88.0498 57.0586 65.1074 75.3315 29.8828 68.2505 cv
25.9883 66.6577 28.3359 63.8667 29.3701 63.9175 cv
26.9082 63.4263 21.9717 62.6875 20.3232 61.6411 cv
14.2217 57.7773 10.6143 31.2192 21.2695 28.6011 cv
cp
f
76.6025 59.3149 mo
76.6025 59.3149 87.3252 59.2002 88.8154 62.2544 cv
90.8164 66.3481 89.0479 70.4019 84.8076 71.2451 cv
83.0186 71.6025 81.2822 69.2646 79.7207 67.4121 cv
78.5654 66.043 76.7227 65.1143 75.9531 64.2749 cv
72.9941 61.9907 75.2822 59.5283 76.6025 59.3149 cv
cp
.572549 .760784 .780392 rgb
f
68.6631 52.4375 mo
68.6631 53.3428 67.9307 54.0747 67.0244 54.0747 cv
66.1211 54.0747 65.3887 53.3428 65.3887 52.4375 cv
65.3887 51.5327 66.1211 50.8008 67.0244 50.8008 cv
67.9307 50.8008 68.6631 51.5327 68.6631 52.4375 cv
cp
.819608 .92549 .952941 rgb
f
68.1748 52.4375 mo
68.1748 53.0728 67.6611 53.5884 67.0244 53.5884 cv
66.3916 53.5884 65.875 53.0728 65.875 52.4375 cv
65.875 51.8032 66.3916 51.2871 67.0244 51.2871 cv
67.6611 51.2871 68.1748 51.8032 68.1748 52.4375 cv
cp
.180392 .247059 .290196 rgb
f
69.748 66.543 mo
67.4863 55.3936 56.9531 45.0742 42.4121 41.1616 cv
32.2354 38.4243 22.1836 39.3901 14.4756 43.1309 cv
14.5195 51.0376 17.0645 59.5776 20.3232 61.6411 cv
21.9717 62.6875 26.9082 63.4263 29.3701 63.9175 cv
28.3359 63.8667 25.9883 66.6577 29.8828 68.2505 cv
45.4014 71.3711 58.5332 69.5688 69.748 66.543 cv
cp
.596078 .796078 .819608 rgb
f
29.2432 63.8228 mo
29.2432 63.8228 31.3848 63.9517 34.6064 63.8384 cv
36.2139 63.7632 38.0918 63.6592 40.0879 63.415 cv
41.0889 63.311 42.1172 63.1641 43.1572 62.9858 cv
44.2041 62.8423 45.2461 62.5918 46.2969 62.3818 cv
47.3457 62.1631 48.3701 61.8477 49.3906 61.5903 cv
50.3896 61.2622 51.376 60.9429 52.3164 60.6006 cv
53.2324 60.2007 54.1396 59.8579 54.9609 59.4551 cv
55.7656 59.02 56.5371 58.6274 57.2295 58.2329 cv
57.8877 57.7852 58.4912 57.375 59.0264 57.0117 cv
59.5801 56.6719 59.9512 56.2368 60.3145 55.9507 cv
61.0098 55.3394 61.4072 54.9902 61.4072 54.9902 cv
61.4434 54.9585 li
61.5898 54.8296 61.8135 54.8438 61.9424 54.9902 cv
62.0713 55.1367 62.0566 55.3604 61.9102 55.4888 cv
61.9072 55.4912 li
61.9072 55.4912 61.4932 55.8491 60.7676 56.4751 cv
60.3906 56.7681 59.9971 57.2119 59.4258 57.5571 cv
58.8721 57.9253 58.2471 58.3403 57.5654 58.7935 cv
56.8525 59.1909 56.0596 59.585 55.2324 60.021 cv
54.3896 60.4238 53.4639 60.7637 52.5273 61.1606 cv
51.5684 61.499 50.5654 61.813 49.5488 62.1348 cv
48.5127 62.3853 47.4727 62.6934 46.4111 62.9038 cv
45.3486 63.1055 44.293 63.3477 43.2363 63.4819 cv
42.1855 63.6509 41.1484 63.7886 40.1396 63.8833 cv
38.126 64.1089 36.2373 64.1943 34.6191 64.2534 cv
31.3828 64.335 29.2217 64.1831 29.2217 64.1831 cv
29.1221 64.1772 29.0459 64.0913 29.0527 63.9917 cv
29.0586 63.8926 29.1445 63.8174 29.2432 63.8228 cv
cp
.462745 .694118 .701961 rgb
f
205.48 30.7217 mo
210.214 30.647 213.469 26.7466 217.402 25.7021 cv
220.688 24.8296 223.037 25.3184 224.179 25.8003 cv
224.397 25.8936 224.416 26.2188 223.668 26.564 cv
221.46 27.5845 220.379 30.2026 220.767 32.4497 cv
221.234 35.1699 223.918 36.627 223.918 36.627 cv
205.48 30.7217 li
cp
.411765 .541176 .631373 rgb
f
253.196 47.9556 mo
258.746 46.5127 li
258.746 46.5127 262.263 46.7344 262.693 48.3955 cv
263.123 50.0454 264.942 53.9634 265.567 54.6138 cv
266.248 55.3203 267.688 56.2378 268.555 56.5425 cv
268.771 56.6548 268.85 56.8994 268.438 56.9248 cv
260.73 57.0513 256.355 53.2261 253.196 47.9556 cv
cp
.431373 .568627 .662745 rgb
f
253.252 48.1729 mo
258.803 46.731 li
258.803 46.731 261.766 44.8242 261.332 43.1641 cv
260.903 41.5122 260.586 37.2065 260.817 36.3325 cv
261.064 35.3838 261.878 33.8789 262.482 33.1938 cv
262.621 32.9878 262.521 32.749 262.197 32.9155 cv
255.405 36.561 253.442 42.0327 253.252 48.1729 cv
cp
.411765 .541176 .631373 rgb
f
180.185 44.8667 mo
180.185 44.8667 179.378 39.0791 185.817 34.019 cv
192.257 28.96 208.816 28.96 220.773 34.9404 cv
231.761 40.4355 232.006 43.7568 242.24 47.3604 cv
244.85 48.2769 250.06 48.127 256.498 46.5928 cv
260.375 45.6689 260.096 48.2012 255.884 50.2739 cv
246.533 54.8721 226.37 58.0156 210.351 56.8652 cv
195.341 55.7891 190.061 52.9956 185.28 51.8823 cv
182.98 51.3452 179.636 52.1138 176.005 51.834 cv
174.167 51.6914 172.899 51.229 172.526 50.3398 cv
172.4 50.043 172.717 49.9175 172.665 49.8047 cv
172.296 49.0283 172.934 48.1689 173.706 47.5903 cv
175.697 46.0938 180.185 44.8667 180.185 44.8667 cv
cp
.682353 .819608 .854902 rgb
f
180.185 44.8667 mo
180.185 44.8667 179.378 39.0791 185.817 34.019 cv
192.257 28.96 208.816 28.96 220.773 34.9404 cv
231.761 40.4355 232.006 43.7568 242.24 47.3604 cv
244.85 48.2769 250.078 48.0488 256.518 46.5166 cv
259.089 45.9038 259.956 46.8491 258.877 48.2012 cv
258.355 48.8521 256.887 50.0391 255.387 50.54 cv
233.73 57.7842 224.584 51.1489 208.738 48.5073 cv
197.699 46.6689 189.574 45.1367 185.778 46.8589 cv
181.886 48.6279 177.673 49.9932 172.665 49.8047 cv
172.574 49.6133 172.544 49.4126 172.563 49.2163 cv
172.62 48.6177 173.126 48.0249 173.706 47.5903 cv
175.697 46.0938 180.185 44.8667 180.185 44.8667 cv
cp
.431373 .568627 .662745 rgb
f
190.855 43.8711 mo
190.855 44.6416 190.229 45.2676 189.458 45.2676 cv
188.685 45.2676 188.061 44.6416 188.061 43.8711 cv
188.061 43.0981 188.685 42.4736 189.458 42.4736 cv
190.229 42.4736 190.855 43.0981 190.855 43.8711 cv
cp
.819608 .92549 .952941 rgb
f
190.439 43.8711 mo
190.439 44.4121 189.999 44.8525 189.458 44.8525 cv
188.915 44.8525 188.478 44.4121 188.478 43.8711 cv
188.478 43.3306 188.915 42.8896 189.458 42.8896 cv
189.999 42.8896 190.439 43.3306 190.439 43.8711 cv
cp
.180392 .247059 .290196 rgb
f
172.698 49.7676 mo
172.698 49.7676 172.926 49.7627 173.324 49.7539 cv
173.523 49.7495 173.765 49.7441 174.042 49.7383 cv
174.32 49.7407 174.629 49.6953 174.968 49.6719 cv
175.645 49.6294 176.432 49.5322 177.272 49.4009 cv
177.694 49.3501 178.126 49.2671 178.563 49.1748 cv
178.999 49.0835 179.446 49.0073 179.887 48.9004 cv
180.324 48.7847 180.762 48.6685 181.192 48.5547 cv
181.627 48.4536 182.036 48.2964 182.438 48.1611 cv
182.835 48.0176 183.23 47.9038 183.586 47.7515 cv
183.938 47.5928 184.272 47.4434 184.58 47.3052 cv
184.89 47.1704 185.172 47.0449 185.398 46.8916 cv
185.632 46.751 185.835 46.6289 186.003 46.5278 cv
186.338 46.3267 186.529 46.2119 186.529 46.2119 cv
186.559 46.1943 li
186.667 46.1289 186.809 46.1641 186.873 46.2729 cv
186.938 46.3813 186.903 46.5225 186.795 46.5879 cv
186.794 46.5884 186.792 46.5894 186.791 46.5898 cv
186.791 46.5898 186.59 46.7056 186.238 46.9082 cv
186.063 47.0093 185.85 47.1318 185.604 47.2725 cv
185.365 47.4263 185.074 47.5493 184.754 47.6807 cv
184.437 47.8154 184.093 47.9619 183.729 48.1162 cv
183.362 48.2642 182.96 48.3721 182.553 48.5098 cv
182.143 48.6387 181.724 48.79 181.282 48.8828 cv
180.845 48.9897 180.4 49.0977 179.955 49.2061 cv
179.509 49.3052 179.056 49.3726 178.614 49.4561 cv
178.172 49.54 177.736 49.6147 177.31 49.6577 cv
176.461 49.7725 175.665 49.8545 174.978 49.8843 cv
174.636 49.9004 174.321 49.9399 174.044 49.9316 cv
173.767 49.9321 173.525 49.9326 173.326 49.9331 cv
172.928 49.9341 172.7 49.9346 172.7 49.9346 cv
172.654 49.9346 172.617 49.897 172.616 49.8511 cv
172.616 49.8057 172.653 49.769 172.698 49.7676 cv
cp
.372549 .490196 .568627 rgb
f
202.356 47.5762 mo
202.396 49.9697 202.421 53.4204 204.673 56.5425 cv
207.398 60.314 213.655 61.251 216.751 61.1968 cv
217.396 61.1846 217.794 60.7124 217.311 60.4795 cv
215.608 59.6626 214.559 57.5635 213.493 55.2168 cv
210.638 48.9282 208.296 51.1953 205.728 47.4756 cv
204.869 46.2285 202.336 46.4009 202.356 47.5762 cv
cp
.431373 .568627 .662745 rgb
f
210.941 236.802 mo
215.387 235.487 218.568 225.243 222.011 223.234 cv
225.494 221.202 227.227 221.392 228.43 221.547 cv
228.661 221.577 228.765 221.88 228.15 222.402 cv
226.336 223.944 225.352 231.457 226.958 234.417 cv
228.246 236.793 232.169 237.528 232.169 237.528 cv
210.941 236.802 li
cp
.203922 .219608 .294118 rgb
f
272.401 267.45 mo
277.129 272.275 li
277.129 272.275 279.074 274.114 280.58 273.371 cv
282.773 272.288 285.052 270.085 286.041 269.468 cv
286.854 268.963 288.592 267.813 289.548 267.659 cv
290.66 267.481 290.761 266.677 290.458 266.487 cv
283.955 262.652 277.644 264.492 272.401 267.45 cv
cp
.180392 .196078 .258824 rgb
f
272.506 267.352 mo
277.285 272.127 li
277.285 272.127 279.041 274.145 278.235 275.621 cv
277.067 277.768 274.771 279.953 274.115 280.915 cv
273.576 281.708 272.354 283.398 272.163 284.346 cv
271.939 285.45 271.133 285.52 270.955 285.207 cv
267.39 278.552 269.334 272.466 272.506 267.352 cv
cp
.203922 .219608 .294118 rgb
f
170.362 263.083 mo
170.362 263.083 166.802 263.188 167.229 260.803 cv
167.644 258.491 171.219 257.669 171.219 257.669 cv
171.219 257.669 171.72 254.39 173.499 251.402 cv
176.634 246.132 195.577 236.16 217.09 236.302 cv
236.23 236.43 247.328 239.822 259.73 249.692 cv
271.364 258.952 275.069 267.499 275.069 267.499 cv
275.211 270.063 273.57 270.254 271.364 268.924 cv
271.364 268.924 263.957 263.652 255.122 263.368 cv
246.292 263.083 236.937 264.51 225.637 265.647 cv
213.576 266.863 178.877 266.737 170.222 265.006 cv
169.153 264.794 168.868 263.226 168.868 263.226 cv
170.362 263.083 li
cp
f
203.413 263.368 mo
194.058 258.527 186.463 257.46 181.689 259.166 cv
177.369 260.709 176.133 262.583 170.362 263.083 cv
169.991 263.114 168.868 263.226 168.868 263.226 cv
168.868 263.226 169.153 264.794 170.222 265.006 cv
176.552 266.272 196.813 266.68 211.96 266.331 cv
209.88 266.237 205.766 264.971 203.413 263.368 cv
cp
.913725 .858824 .796078 rgb
f
261.25 260.519 mo
261.962 257.526 256.738 255.295 252.56 255.106 cv
248.383 254.915 244.44 255.818 240.926 260.328 cv
238.415 263.549 232.264 264.859 228.038 265.374 cv
227.94 265.385 227.854 265.41 227.756 265.425 cv
236.478 264.503 244.064 263.495 251.175 263.356 cv
251.309 263.108 251.482 262.871 251.705 262.655 cv
255.551 258.952 260.744 262.64 261.25 260.519 cv
cp
f
197.17 250.899 mo
197.358 251.402 193.469 254.111 188.669 255.176 cv
183.87 256.242 179.856 256.796 179.482 255.106 cv
179.107 253.416 181.992 249.333 186.794 248.27 cv
191.594 247.203 196.563 249.278 197.17 250.899 cv
cp
f
181.04 255.392 mo
181.04 256.042 180.512 256.568 179.861 256.568 cv
179.212 256.568 178.684 256.042 178.684 255.392 cv
178.684 254.738 179.212 254.214 179.861 254.214 cv
180.512 254.214 181.04 254.738 181.04 255.392 cv
cp
.819608 .92549 .952941 rgb
f
180.688 255.392 mo
180.688 255.847 180.318 256.218 179.861 256.218 cv
179.402 256.218 179.032 255.847 179.032 255.392 cv
179.032 254.935 179.402 254.562 179.861 254.562 cv
180.318 254.562 180.688 254.935 180.688 255.392 cv
cp
.141176 .196078 .231373 rgb
f
203.001 263.396 mo
203.866 265.919 205.088 269.568 208.542 272.103 cv
212.722 275.163 219.652 274.004 222.9 272.881 cv
223.576 272.646 223.836 272.012 223.241 271.93 cv
221.162 271.65 219.332 269.786 217.396 267.665 cv
212.211 261.982 209.974 265.479 205.977 262.419 cv
204.638 261.396 202.575 262.155 203.001 263.396 cv
cp
.215686 .231373 .309804 rgb
f
131.576 258.427 mo
133.043 256.244 133.951 253.574 134.539 250.622 cv
134.539 250.622 140.239 253.743 138.201 258.744 cv
137.755 259.541 136.831 259.925 136.831 259.925 cv
131.545 259.925 li
131.576 258.427 li
cp
.262745 .6 .619608 rgb
f
131.576 261.294 mo
133.043 263.475 133.951 266.145 134.539 269.097 cv
134.539 269.097 140.239 265.976 138.201 260.975 cv
137.755 260.18 136.831 259.796 136.831 259.796 cv
131.545 259.796 li
131.576 261.294 li
cp
.341176 .647059 .658824 rgb
f
54.415 261.791 mo
54.1289 259.575 54.6846 255.254 59.2207 253.593 cv
66.4531 250.941 71.7764 254.215 76.4482 253.096 cv
80.3701 252.156 87.9912 250.185 91.9648 250.059 cv
116.261 249.285 132.108 257.899 132.108 257.899 cv
134.482 259.443 133.378 262.206 129.623 261.875 cv
129.623 261.875 120.348 262.041 117.364 263.2 cv
114.382 264.358 102.291 271.317 92.0195 272.311 cv
80.7246 273.405 67.4482 272.588 58.7227 267.757 cv
55.7832 266.127 54.6357 263.486 54.415 261.791 cv
cp
f
61.3135 261.75 mo
61.3135 262.358 60.8203 262.849 60.2139 262.849 cv
59.6074 262.849 59.1162 262.358 59.1162 261.75 cv
59.1162 261.144 59.6074 260.654 60.2139 260.654 cv
60.8203 260.654 61.3135 261.144 61.3135 261.75 cv
cp
.819608 .92549 .952941 rgb
f
60.9854 261.75 mo
60.9854 262.177 60.6406 262.521 60.2139 262.521 cv
59.7881 262.521 59.4434 262.177 59.4434 261.75 cv
59.4434 261.325 59.7881 260.978 60.2139 260.978 cv
60.6406 260.978 60.9854 261.325 60.9854 261.75 cv
cp
.180392 .247059 .290196 rgb
f
80.4785 266.403 mo
73.3994 266.403 66.8408 267.386 61.4336 269.058 cv
70.0518 272.719 81.835 273.297 92.0195 272.311 cv
95.2969 271.993 98.7598 271.068 102.053 269.92 cv
96.2266 267.727 88.7021 266.403 80.4785 266.403 cv
cp
.396078 .74902 .74902 rgb
f
82.1641 266.348 mo
82.1641 266.348 81.6582 270.212 83.6221 273.322 cv
85.4805 276.263 91.9424 276.481 94.1387 275.929 cv
94.5459 275.826 94.6162 275.588 94.3008 275.424 cv
93.1914 274.851 90.7354 273.334 90.1836 271.624 cv
88.7432 267.147 85.8164 268.231 84.373 266.299 cv
83.8809 265.636 82.3594 265.948 82.1641 266.348 cv
cp
.341176 .647059 .658824 rgb
f
55.3584 264.163 mo
55.3594 264.152 55.498 264.273 55.751 264.372 cv
55.9961 264.486 56.3975 264.602 56.8721 264.706 cv
57.8311 264.899 59.1563 264.99 60.4492 264.79 cv
61.0977 264.707 61.7275 264.528 62.3057 264.334 cv
62.876 264.117 63.3848 263.862 63.8018 263.611 cv
64.208 263.344 64.54 263.112 64.7451 262.915 cv
64.96 262.73 65.083 262.626 65.083 262.626 cv
65.0977 262.613 li
65.167 262.555 65.2715 262.563 65.3311 262.632 cv
65.3906 262.701 65.3818 262.806 65.3125 262.865 cv
65.3115 262.866 li
65.3115 262.866 65.1816 262.975 64.9551 263.164 cv
64.7373 263.366 64.3887 263.604 63.9629 263.877 cv
63.5264 264.132 62.9951 264.39 62.4023 264.605 cv
61.8027 264.799 61.1523 264.974 60.4863 265.051 cv
59.1563 265.239 57.8076 265.129 56.8271 264.918 cv
56.3359 264.803 55.9395 264.686 55.6602 264.552 cv
55.377 264.432 55.2627 264.322 55.2549 264.329 cv
55.209 264.301 55.1953 264.24 55.2236 264.194 cv
55.252 264.148 55.3125 264.135 55.3584 264.163 cv
cp
.243137 .529412 .580392 rgb
f
83 255.795 mo
82.6992 255.316 82.0537 254.752 81.4365 254.803 cv
81.0547 254.833 79.9893 254.99 79.8633 255.045 cv
79.3809 255.207 79.0039 255.593 78.8457 256.1 cv
78.6191 256.822 78.8047 258.098 79.375 258.454 cv
80.0342 258.869 81.3574 258.988 81.9434 258.833 cv
82.5723 258.667 83.0068 258.223 83.2197 257.636 cv
83.4453 257.017 83.3174 256.298 83 255.795 cv
cp
.396078 .74902 .74902 rgb
f
90.5254 254.979 mo
90.3877 254.759 90.0918 254.502 89.8096 254.525 cv
89.6367 254.539 89.1475 254.611 89.0898 254.636 cv
88.8691 254.709 88.6973 254.887 88.625 255.119 cv
88.5205 255.45 88.6045 256.033 88.8652 256.197 cv
89.167 256.386 89.7734 256.44 90.043 256.367 cv
90.3291 256.293 90.5273 256.088 90.627 255.822 cv
90.7295 255.537 90.6719 255.21 90.5254 254.979 cv
cp
f
93.3428 253.487 mo
93.2041 253.269 92.9092 253.011 92.626 253.033 cv
92.4521 253.048 91.9639 253.12 91.9043 253.144 cv
91.6855 253.218 91.5137 253.395 91.4395 253.629 cv
91.3359 253.957 91.4209 254.542 91.6826 254.704 cv
91.9824 254.896 92.5898 254.948 92.8584 254.878 cv
93.1445 254.803 93.3438 254.599 93.4424 254.329 cv
93.5459 254.046 93.4863 253.718 93.3428 253.487 cv
cp
f
96.9961 250.506 mo
96.9092 250.365 96.7188 250.203 96.54 250.219 cv
96.4307 250.227 96.1191 250.271 96.083 250.287 cv
95.9424 250.335 95.833 250.446 95.7871 250.596 cv
95.7207 250.804 95.7734 251.176 95.9404 251.281 cv
96.1318 251.401 96.5176 251.435 96.6885 251.389 cv
96.8721 251.342 96.9971 251.213 97.0605 251.042 cv
97.126 250.862 97.0879 250.653 96.9961 250.506 cv
cp
f
100.855 250.932 mo
100.746 250.692 100.487 250.394 100.201 250.374 cv
100.024 250.365 99.5273 250.369 99.4639 250.387 cv
99.2344 250.429 99.0371 250.583 98.9307 250.805 cv
98.7813 251.121 98.7842 251.719 99.0234 251.92 cv
99.2988 252.15 99.8984 252.29 100.176 252.257 cv
100.476 252.219 100.702 252.045 100.838 251.789 cv
100.98 251.519 100.969 251.183 100.855 250.932 cv
cp
f
95.7266 254.646 mo
95.6377 254.508 95.4512 254.345 95.2705 254.359 cv
95.1592 254.367 94.8496 254.413 94.8125 254.429 cv
94.6719 254.475 94.5625 254.588 94.5156 254.736 cv
94.4502 254.945 94.5049 255.318 94.6689 255.421 cv
94.8613 255.543 95.248 255.575 95.418 255.531 cv
95.6016 255.482 95.7275 255.354 95.7891 255.183 cv
95.8545 255.004 95.8164 254.794 95.7266 254.646 cv
cp
f
99.2041 253.571 mo
99.1162 253.433 98.9277 253.266 98.748 253.281 cv
98.6387 253.289 98.3291 253.336 98.291 253.353 cv
98.1504 253.398 98.042 253.512 97.9951 253.659 cv
97.9277 253.87 97.9814 254.241 98.1494 254.345 cv
98.3398 254.466 98.7266 254.5 98.8965 254.455 cv
99.0801 254.405 99.2061 254.277 99.2686 254.107 cv
99.334 253.926 99.2969 253.718 99.2041 253.571 cv
cp
f
104.921 251.5 mo
104.832 251.359 104.645 251.197 104.464 251.211 cv
104.354 251.221 104.045 251.268 104.007 251.282 cv
103.864 251.328 103.758 251.441 103.711 251.59 cv
103.645 251.798 103.698 252.17 103.863 252.274 cv
104.055 252.394 104.441 252.429 104.61 252.385 cv
104.795 252.335 104.923 252.208 104.982 252.035 cv
105.049 251.856 105.012 251.646 104.921 251.5 cv
cp
f
90.7451 251.613 mo
90.5576 251.313 90.1514 250.959 89.7656 250.991 cv
89.5273 251.012 88.8613 251.11 88.7793 251.144 cv
88.4766 251.245 88.2422 251.486 88.1436 251.805 cv
87.999 252.257 88.1162 253.054 88.4736 253.28 cv
88.8867 253.54 89.7148 253.613 90.0811 253.518 cv
90.4785 253.413 90.75 253.133 90.8818 252.767 cv
91.0264 252.378 90.9424 251.929 90.7451 251.613 cv
cp
f
86.2861 251.854 mo
85.9092 251.534 85.1484 251.486 84.6484 251.688 cv
83.8223 252.021 82.9902 252.266 82.918 253.186 cv
82.877 253.705 83.4258 254.685 83.9854 254.862 cv
84.6768 255.082 85.7217 254.869 86.1982 254.646 cv
87.6299 253.979 86.6797 252.186 86.2861 251.854 cv
cp
f
77.1748 254.281 mo
76.7988 253.962 76.0371 253.915 75.5361 254.115 cv
74.71 254.448 73.8789 254.697 73.8066 255.615 cv
73.7666 256.136 74.3154 257.112 74.875 257.291 cv
75.5654 257.512 76.6104 257.301 77.0869 257.076 cv
78.5176 256.407 77.5654 254.616 77.1748 254.281 cv
cp
f
87.0029 256.195 mo
86.6348 255.914 86.2578 255.793 85.7988 255.855 cv
85.3525 255.919 84.9365 256.247 84.7588 256.602 cv
84.6514 256.819 84.8613 257.445 84.9795 257.679 cv
85.4492 258.313 85.9961 258.303 86.5752 258.123 cv
86.8555 258.035 87.0918 257.813 87.291 257.606 cv
87.7002 257.178 87.3984 256.497 87.0029 256.195 cv
cp
f
71.9297 254.127 mo
71.6689 253.807 71.3691 253.62 70.9541 253.58 cv
70.5557 253.537 70.124 253.735 69.8965 254.007 cv
69.7549 254.173 69.8047 254.762 69.8594 254.988 cv
70.1338 255.639 70.6094 255.744 71.1514 255.711 cv
71.4141 255.692 71.6631 255.551 71.8828 255.413 cv
72.3281 255.128 72.208 254.474 71.9297 254.127 cv
cp
f
93.5225 250.586 mo
93.251 250.416 92.9873 250.355 92.6729 250.426 cv
92.373 250.495 92.1055 250.746 92.0049 251 cv
91.9424 251.157 92.126 251.573 92.2217 251.727 cv
92.583 252.136 92.957 252.097 93.3438 251.938 cv
93.5322 251.86 93.6816 251.691 93.8057 251.539 cv
94.0596 251.218 93.8115 250.771 93.5225 250.586 cv
cp
f
96.2813 252.021 mo
96.0127 251.851 95.7461 251.79 95.4346 251.862 cv
95.1348 251.932 94.8652 252.182 94.7646 252.437 cv
94.7041 252.594 94.8857 253.011 94.9814 253.163 cv
95.3418 253.571 95.7168 253.531 96.1045 253.374 cv
96.2939 253.297 96.4414 253.128 96.5654 252.975 cv
96.8223 252.654 96.5742 252.205 96.2813 252.021 cv
cp
f
102.411 252.905 mo
102.141 252.735 101.877 252.673 101.563 252.746 cv
101.262 252.813 100.996 253.066 100.896 253.321 cv
100.834 253.479 101.017 253.895 101.111 254.046 cv
101.473 254.455 101.846 254.413 102.234 254.256 cv
102.424 254.18 102.572 254.011 102.695 253.857 cv
102.949 253.537 102.701 253.089 102.411 252.905 cv
cp
f
108.817 251.469 mo
108.549 251.299 108.281 251.238 107.968 251.311 cv
107.668 251.38 107.403 251.63 107.301 251.885 cv
107.239 252.042 107.42 252.458 107.516 252.611 cv
107.879 253.02 108.252 252.979 108.639 252.82 cv
108.829 252.743 108.979 252.574 109.103 252.421 cv
109.357 252.102 109.106 251.652 108.817 251.469 cv
cp
f
112.28 252.752 mo
112.117 252.651 111.955 252.612 111.766 252.655 cv
111.583 252.697 111.421 252.85 111.358 253.006 cv
111.322 253.1 111.434 253.354 111.491 253.445 cv
111.71 253.694 111.938 253.67 112.174 253.573 cv
112.287 253.526 112.38 253.426 112.454 253.332 cv
112.609 253.138 112.458 252.865 112.28 252.752 cv
cp
f
72.5928 256.577 mo
72.3242 256.407 72.0586 256.346 71.7451 256.417 cv
71.4434 256.486 71.1787 256.738 71.0771 256.993 cv
71.0156 257.15 71.1982 257.566 71.2949 257.719 cv
71.6553 258.128 72.0283 258.085 72.415 257.928 cv
72.6055 257.853 72.7539 257.683 72.8789 257.528 cv
73.1328 257.21 72.8818 256.761 72.5928 256.577 cv
cp
f
67.4521 253.906 mo
67.2393 253.771 67.0313 253.721 66.7852 253.777 cv
66.5469 253.834 66.3379 254.031 66.2588 254.231 cv
66.21 254.352 66.3535 254.683 66.4297 254.803 cv
66.7129 255.124 67.0059 255.092 67.3135 254.968 cv
67.46 254.905 67.5781 254.773 67.6748 254.652 cv
67.875 254.401 67.6797 254.049 67.4521 253.906 cv
cp
f
80.9824 252.556 mo
80.5645 252.428 80.1768 252.432 79.7471 252.605 cv
79.332 252.773 79.0039 253.15 78.9141 253.484 cv
78.8584 253.689 79.2012 254.142 79.3662 254.296 cv
79.9629 254.684 80.4883 254.527 81.0049 254.229 cv
81.2549 254.082 81.4336 253.838 81.5791 253.617 cv
81.8779 253.163 81.4336 252.693 80.9824 252.556 cv
cp
f
54.8291 263.396 mo
55.4111 262.84 54.8857 260.826 54.3623 260.742 cv
41.8389 260.747 30.0527 261.354 17.4199 262.069 cv
30.0098 262.747 42.2393 263.326 54.8291 263.396 cv
cp
.721569 .705882 .498039 rgb
f
37.4463 261.086 mo
37.2227 261.094 37.0029 261.099 36.7783 261.11 cv
36.6826 261.624 36.3984 262.308 35.6582 262.939 cv
35.96 262.952 36.2607 262.963 36.5605 262.975 cv
37.1357 262.305 37.3662 261.613 37.4463 261.086 cv
cp
.658824 .643137 .454902 rgb
f
34.6914 261.193 mo
34.4688 261.201 34.2451 261.213 34.0234 261.222 cv
33.915 261.689 33.6523 262.276 33.0527 262.833 cv
33.3408 262.844 33.6289 262.856 33.916 262.869 cv
34.3916 262.275 34.6055 261.678 34.6914 261.193 cv
cp
f
29.168 261.443 mo
28.9414 261.453 28.7129 261.466 28.4854 261.477 cv
28.3691 261.823 28.1641 262.213 27.8154 262.599 cv
28.085 262.612 28.3535 262.623 28.623 262.635 cv
28.9102 262.219 29.0771 261.809 29.168 261.443 cv
cp
f
31.9375 261.312 mo
31.7109 261.321 31.4844 261.331 31.2578 261.341 cv
31.1426 261.756 30.9014 262.243 30.4307 262.719 cv
30.709 262.733 30.9873 262.747 31.2637 262.758 cv
31.6455 262.251 31.8418 261.742 31.9375 261.312 cv
cp
f
25.9717 262.512 mo
26.1768 262.188 26.3135 261.872 26.4004 261.581 cv
26.167 261.591 25.9307 261.604 25.6982 261.617 cv
25.5928 261.889 25.4307 262.179 25.1914 262.472 cv
25.4502 262.483 25.7119 262.498 25.9717 262.512 cv
cp
f
45.6719 260.841 mo
45.4551 260.845 45.2363 260.847 45.0186 260.854 cv
44.9629 261.442 44.668 262.393 43.5225 263.199 cv
43.8604 263.208 44.1934 263.22 44.5264 263.227 cv
45.3887 262.374 45.625 261.448 45.6719 260.841 cv
cp
f
53.8809 260.747 mo
53.6602 260.747 53.4443 260.749 53.2256 260.751 cv
53.1914 261.359 52.9141 262.474 51.4902 263.359 cv
51.8486 263.363 52.208 263.365 52.5674 263.37 cv
53.6064 262.432 53.8457 261.379 53.8809 260.747 cv
cp
f
51.1455 260.764 mo
50.9277 260.764 50.708 260.766 50.4902 260.767 cv
50.4521 261.372 50.1758 262.448 48.8203 263.32 cv
49.1699 263.326 49.5195 263.334 49.8701 263.341 cv
50.8701 262.419 51.1074 261.392 51.1455 260.764 cv
cp
f
40.1914 260.986 mo
39.9717 260.994 39.751 261.004 39.5322 261.011 cv
39.4463 261.558 39.1553 262.335 38.2803 263.035 cv
38.5898 263.046 38.8994 263.057 39.207 263.067 cv
39.8857 262.325 40.123 261.551 40.1914 260.986 cv
cp
f
48.4102 260.794 mo
48.1914 260.797 47.9746 260.803 47.7539 260.806 cv
47.708 261.404 47.4229 262.423 46.1611 263.267 cv
46.5059 263.276 46.8516 263.28 47.1953 263.288 cv
48.1338 262.396 48.3691 261.413 48.4102 260.794 cv
cp
f
42.9316 260.91 mo
42.7139 260.916 42.4941 260.923 42.2744 260.927 cv
42.2051 261.501 41.9121 262.366 40.8955 263.127 cv
41.2178 263.136 41.541 263.143 41.8623 263.152 cv
42.6348 262.352 42.8721 261.497 42.9316 260.91 cv
cp
f
158.559 181.396 mo
162.558 175.515 li
162.558 175.515 166.791 172.218 168.912 173.662 cv
171.024 175.098 176.283 178.666 177.565 178.875 cv
178.96 179.104 181.318 178.961 182.479 178.612 cv
182.812 178.563 183.137 178.764 182.758 179.111 cv
175.288 185.264 167.062 184.581 158.559 181.396 cv
cp
.345098 .364706 .568627 rgb
f
158.841 181.587 mo
162.839 175.706 li
162.839 175.706 164.347 170.557 162.225 169.113 cv
160.112 167.679 154.859 164.099 154.193 162.984 cv
153.469 161.771 152.732 159.525 152.63 158.318 cv
152.554 157.992 152.213 157.812 152.064 158.244 cv
149.09 167.453 152.749 174.853 158.841 181.587 cv
cp
.309804 .32549 .509804 rgb
f
101.169 182.641 mo
108.539 182.767 122.755 182.198 123.157 182.466 cv
123.848 182.922 122.942 183.817 122.924 184.212 cv
122.866 185.549 126.252 186.919 129.905 187.235 cv
131.083 188.683 110.146 185.537 101.169 182.641 cv
cp
f
14.6885 189.291 mo
14.7041 188.805 14.4199 188.254 15.3086 187.817 cv
22.543 184.275 31.0859 183.271 39.8184 180.604 cv
42.6104 179.751 50.5225 180.293 50.5225 180.293 cv
50.5225 180.293 66.6152 177.928 75.5742 178.511 cv
83.8027 179.045 128.975 187.934 138.398 188.283 cv
145.313 188.798 154.84 183.811 157.595 180.371 cv
159.456 177.928 162.248 178.16 161.317 181.068 cv
156.896 188.98 130.567 213.148 109.779 214.924 cv
78.4824 217.601 39.8574 200.149 34.8545 198.753 cv
31.375 197.782 20.6719 196.36 16.248 194.235 cv
14.4307 193.362 12.9092 191.66 13.4482 190.378 cv
13.6084 189.997 14.6885 189.291 14.6885 189.291 cv
cp
.345098 .364706 .568627 rgb
f
157.253 186.368 mo
152.267 190.478 134.637 203.695 109.785 207.688 cv
98.752 209.46 81.9609 206.949 73.5576 203.407 cv
70.9717 202.318 66.9648 199.452 63.2422 198.987 cv
58.9727 198.453 47.9619 199.453 45.1689 197.436 cv
44.0557 196.631 42.9531 195.262 42.8418 193.015 cv
42.707 190.261 40.5938 189.135 38.3447 188.632 cv
36.5303 188.226 16.4697 189.18 14.6934 189.265 cv
14.6914 189.272 14.6885 189.283 14.6885 189.291 cv
14.6885 189.291 13.6084 189.997 13.4482 190.378 cv
12.9092 191.66 14.0273 193.098 15.7744 194.1 cv
19.8086 196.412 29.2119 200.224 32.6279 201.396 cv
37.9307 203.217 78.4824 217.601 109.779 214.924 cv
127.012 213.452 148.041 196.599 157.253 186.368 cv
cp
.639216 .65098 .788235 rgb
f
14.6885 189.291 mo
14.6885 189.291 14.582 189.361 14.4375 189.464 cv
14.4756 189.486 14.5137 189.512 14.5615 189.509 cv
14.5615 189.509 18.6484 189.364 24.7773 189.147 cv
27.8428 189.055 31.418 188.923 35.2471 188.849 cv
36.1992 188.838 37.1895 188.811 38.1426 188.855 cv
39.1006 188.932 40.041 189.205 40.8428 189.741 cv
41.6416 190.267 42.2373 191.086 42.4697 192.03 cv
42.5938 192.491 42.6104 192.999 42.6748 193.512 cv
42.7227 194.01 42.8584 194.57 43.0527 195.051 cv
43.4248 196.05 44.1182 196.912 44.9629 197.54 cv
45.8535 198.188 46.9102 198.374 47.9004 198.56 cv
49.9121 198.876 51.9023 198.928 53.8213 198.963 cv
55.7383 198.972 57.5908 198.981 59.3496 198.988 cv
61.0996 199.021 62.7715 198.999 64.2422 199.349 cv
65.709 199.699 67.0205 200.231 68.1572 200.724 cv
69.2969 201.22 70.2695 201.702 71.0654 202.107 cv
72.668 202.9 73.5576 203.407 73.5576 203.407 cv
73.5576 203.407 72.6982 202.854 71.1357 201.973 cv
70.3496 201.545 69.3857 201.042 68.252 200.515 cv
67.1152 199.993 65.8232 199.429 64.3125 199.031 cv
62.7959 198.626 61.1055 198.673 59.3535 198.624 cv
57.5977 198.608 55.7441 198.593 53.8281 198.577 cv
51.918 198.533 49.9336 198.472 47.9678 198.155 cv
47 197.974 45.9844 197.774 45.2148 197.202 cv
44.4316 196.612 43.7969 195.816 43.4561 194.893 cv
43.3701 194.662 43.2813 194.433 43.2402 194.194 cv
43.1816 193.961 43.1279 193.725 43.1133 193.464 cv
43.0518 192.964 43.0381 192.444 42.9014 191.918 cv
42.6523 190.876 41.9805 189.943 41.0986 189.361 cv
40.2256 188.77 39.1836 188.47 38.1836 188.388 cv
37.165 188.336 36.2051 188.363 35.2412 188.368 cv
31.4023 188.427 27.8262 188.538 24.7607 188.647 cv
19.249 188.854 15.3994 189.002 14.6768 189.029 cv
14.6846 189.117 14.6914 189.205 14.6885 189.291 cv
cp
.278431 .294118 .458824 rgb
f
47.3105 194.624 mo
47.3105 195.334 46.7334 195.911 46.0234 195.911 cv
45.3115 195.911 44.7354 195.334 44.7354 194.624 cv
44.7354 193.911 45.3115 193.335 46.0234 193.335 cv
46.7334 193.335 47.3105 193.911 47.3105 194.624 cv
cp
.819608 .92549 .952941 rgb
f
46.9287 194.624 mo
46.9287 195.123 46.5234 195.528 46.0234 195.528 cv
45.5234 195.528 45.1191 195.123 45.1191 194.624 cv
45.1191 194.123 45.5234 193.718 46.0234 193.718 cv
46.5234 193.718 46.9287 194.123 46.9287 194.624 cv
cp
.180392 .247059 .290196 rgb
f
18.5938 186.609 mo
18.6855 186.917 18.3848 187.087 17.8975 187.235 cv
17.4102 187.383 16.9277 187.455 16.833 187.146 cv
16.7402 186.839 17.0557 186.468 17.543 186.319 cv
18.0283 186.171 18.499 186.302 18.5938 186.609 cv
cp
.309804 .32549 .509804 rgb
f
19.46 187.934 mo
19.5176 188.18 19.3018 188.42 18.9102 188.51 cv
18.5186 188.602 18.1016 188.51 18.0439 188.262 cv
17.9863 188.014 18.2568 187.739 18.6494 187.648 cv
19.0391 187.558 19.4023 187.685 19.46 187.934 cv
cp
f
23.7422 186.736 mo
23.7969 186.969 23.5928 187.194 23.2227 187.28 cv
22.8525 187.366 22.459 187.28 22.4053 187.046 cv
22.3506 186.812 22.6045 186.552 22.9756 186.466 cv
23.3447 186.381 23.6875 186.501 23.7422 186.736 cv
cp
f
27.6211 186.175 mo
27.6719 186.397 27.4805 186.608 27.1299 186.689 cv
26.7832 186.77 26.4121 186.689 26.3613 186.469 cv
26.3105 186.248 26.5488 186.005 26.8984 185.924 cv
27.2451 185.843 27.5703 185.955 27.6211 186.175 cv
cp
f
31.29 185.843 mo
31.3379 186.048 31.1582 186.247 30.8311 186.323 cv
30.5049 186.399 30.1582 186.323 30.1104 186.117 cv
30.0615 185.908 30.2861 185.681 30.6123 185.604 cv
30.9385 185.528 31.2422 185.635 31.29 185.843 cv
cp
f
34.9414 185.323 mo
34.9863 185.516 34.8184 185.702 34.5127 185.772 cv
34.209 185.843 33.8838 185.772 33.8389 185.578 cv
33.7959 185.386 34.0039 185.172 34.3086 185.101 cv
34.6133 185.03 34.8984 185.13 34.9414 185.323 cv
cp
f
38.7686 184.206 mo
38.8096 184.386 38.6543 184.558 38.3701 184.623 cv
38.0889 184.69 37.7871 184.623 37.7451 184.445 cv
37.7031 184.265 37.8984 184.065 38.1816 184.002 cv
38.4648 183.936 38.7275 184.026 38.7686 184.206 cv
cp
f
21.9395 185.432 mo
22.042 185.769 21.6934 185.962 21.1289 186.131 cv
20.5684 186.303 20.0098 186.389 19.9082 186.053 cv
19.8066 185.715 20.1748 185.304 20.7393 185.132 cv
21.2998 184.959 21.8379 185.095 21.9395 185.432 cv
cp
f
25.873 184.313 mo
25.9746 184.649 25.5957 184.853 24.9873 185.036 cv
24.3809 185.221 23.7793 185.32 23.6777 184.983 cv
23.5732 184.646 23.9814 184.222 24.5898 184.036 cv
25.1953 183.85 25.7715 183.976 25.873 184.313 cv
cp
f
29.6934 183.261 mo
29.7783 183.543 29.4609 183.714 28.9502 183.867 cv
28.4414 184.022 27.9365 184.104 27.8516 183.823 cv
27.7646 183.54 28.1074 183.185 28.6172 183.028 cv
29.125 182.873 29.6074 182.977 29.6934 183.261 cv
cp
f
33.5996 182.324 mo
33.6689 182.587 33.3701 182.734 32.8965 182.86 cv
32.4219 182.985 31.9541 183.045 31.8848 182.782 cv
31.8145 182.519 32.1406 182.203 32.6143 182.076 cv
33.0889 181.949 33.5293 182.061 33.5996 182.324 cv
cp
f
37.3584 181.374 mo
37.4277 181.638 37.1289 181.783 36.6543 181.91 cv
36.1807 182.036 35.7129 182.096 35.6436 181.833 cv
35.5732 181.57 35.8994 181.253 36.374 181.126 cv
36.8467 180.999 37.2881 181.11 37.3584 181.374 cv
cp
f
36.8125 190.406 mo
36.8125 190.406 36.9375 190.804 37.3057 191.535 cv
37.6787 192.249 38.2646 193.323 39.2295 194.479 cv
40.2305 195.604 41.6953 196.79 43.5186 197.877 cv
45.3281 198.955 47.7246 199.547 50.3213 199.835 cv
52.9355 200.143 55.7969 200.144 58.8223 200.252 cv
60.3359 200.313 61.8975 200.388 63.4717 200.682 cv
65.0527 200.97 66.584 201.582 68.0635 202.317 cv
69.5469 203.048 71.0127 203.866 72.543 204.593 cv
74.0762 205.316 75.6621 205.978 77.3203 206.477 cv
80.6318 207.474 84.1104 208.087 87.5918 208.565 cv
91.0791 209.018 94.5859 209.374 98.0508 209.364 cv
101.508 209.343 104.914 209.057 108.178 208.604 cv
114.711 207.686 120.689 206.12 125.679 204.409 cv
126.931 203.996 128.101 203.514 129.229 203.101 cv
130.339 202.635 131.39 202.191 132.379 201.778 cv
134.324 200.875 136.011 200.067 137.354 199.315 cv
138.726 198.612 139.741 197.953 140.453 197.537 cv
141.162 197.112 141.539 196.886 141.539 196.886 cv
141.539 196.886 141.163 197.115 140.46 197.546 cv
139.75 197.967 138.738 198.635 137.371 199.348 cv
136.033 200.111 134.353 200.933 132.411 201.85 cv
131.426 202.274 130.377 202.724 129.27 203.198 cv
128.143 203.62 126.975 204.114 125.723 204.536 cv
123.23 205.415 120.493 206.259 117.553 206.986 cv
114.608 207.693 111.474 208.32 108.202 208.777 cv
104.928 209.225 101.521 209.51 98.0479 209.526 cv
94.5781 209.533 91.0625 209.174 87.5713 208.717 cv
84.084 208.235 80.6045 207.62 77.2764 206.613 cv
75.6172 206.106 74.0117 205.465 72.4707 204.746 cv
70.9307 204.024 69.457 203.215 67.9766 202.497 cv
66.499 201.776 64.9824 201.183 63.4297 200.91 cv
61.877 200.63 60.3223 200.565 58.8145 200.514 cv
55.7949 200.426 52.9268 200.445 50.2881 200.151 cv
47.6514 199.873 45.2344 199.302 43.335 198.191 cv
41.4688 197.094 39.9834 195.91 38.9268 194.742 cv
37.9121 193.537 37.3213 192.47 36.9258 191.729 cv
36.543 190.99 36.3984 190.546 36.3984 190.546 cv
36.3975 190.54 li
36.3594 190.425 36.4219 190.302 36.5361 190.265 cv
36.6504 190.227 36.7734 190.289 36.8115 190.404 cv
36.8115 190.404 36.8115 190.406 36.8125 190.406 cv
cp
.568627 .584314 .8 rgb
f
31.4395 190.503 mo
31.5186 190.46 31.6172 190.522 31.6465 190.608 cv
31.6465 190.608 31.6738 190.633 31.7285 190.68 cv
31.7813 190.726 31.9561 191.093 32.3438 191.718 cv
32.8389 192.412 33.6172 193.433 34.7939 194.53 cv
35.9961 195.61 37.6543 196.767 39.6689 197.877 cv
41.6689 198.988 44.21 199.737 46.9844 200.233 cv
49.7715 200.752 52.8262 201.032 56.0596 201.386 cv
57.7285 201.584 59.4521 201.79 61.1982 202.161 cv
62.6123 202.454 64.0117 202.905 65.3945 203.432 cv
65.7246 203.555 66.0527 203.684 66.3818 203.816 cv
67.6035 204.308 68.8262 204.832 70.0674 205.342 cv
70.5547 205.539 71.0439 205.736 71.5391 205.926 cv
72.6484 206.353 73.7783 206.759 74.9297 207.129 cv
75.5996 207.344 76.2783 207.542 76.9639 207.72 cv
79.6777 208.425 82.4766 208.925 85.2939 209.32 cv
86.3594 209.468 87.4268 209.606 88.4932 209.733 cv
90.9521 210.019 93.4131 210.269 95.8643 210.387 cv
97.3057 210.455 98.7422 210.477 100.168 210.441 cv
102.179 210.386 104.166 210.23 106.113 209.992 cv
107.915 209.77 109.681 209.474 111.398 209.122 cv
112.8 208.835 114.17 208.509 115.504 208.157 cv
118.396 207.39 121.122 206.494 123.648 205.55 cv
126.041 204.642 128.252 203.691 130.265 202.764 cv
131.609 202.139 132.849 201.482 134.011 200.908 cv
134.434 200.679 134.845 200.458 135.24 200.242 cv
135.978 199.832 136.667 199.451 137.305 199.103 cv
137.673 198.881 138.022 198.674 138.347 198.483 cv
138.816 198.171 139.183 197.949 139.435 197.829 cv
139.701 197.7 139.853 197.673 139.902 197.735 cv
140.279 197.613 140.564 197.542 140.754 197.516 cv
140.922 197.468 141.063 197.425 141.184 197.392 cv
141.647 197.195 141.943 197.059 142.088 197.035 cv
142.502 196.812 142.665 196.741 142.538 196.843 cv
142.42 196.938 142.016 197.208 141.361 197.63 cv
140.465 198.227 139.308 199.023 137.846 199.859 cv
137.175 200.271 136.447 200.692 135.665 201.123 cv
134.591 201.718 133.417 202.328 132.157 202.955 cv
131.013 203.492 129.802 204.044 128.528 204.601 cv
127.387 205.049 126.204 205.545 124.951 205.979 cv
122.424 206.885 119.674 207.728 116.741 208.428 cv
113.734 209.13 110.549 209.7 107.246 210.073 cv
106.136 210.196 105.014 210.297 103.879 210.374 cv
101.608 210.528 99.2969 210.587 96.9629 210.549 cv
94.8057 210.505 92.6377 210.353 90.4648 210.148 cv
89.0879 210.016 87.7129 209.857 86.3408 209.682 cv
83.2588 209.272 80.1895 208.762 77.209 208.003 cv
76.7686 207.891 76.3301 207.773 75.8936 207.654 cv
74.2051 207.18 72.5586 206.607 70.9648 205.976 cv
69.2578 205.314 67.6113 204.587 65.9658 203.93 cv
64.3271 203.263 62.6699 202.688 60.998 202.354 cv
59.3184 202.012 57.6504 201.828 56.0332 201.654 cv
52.8018 201.32 49.7393 201.062 46.9297 200.56 cv
44.1201 200.071 41.5566 199.347 39.4893 198.207 cv
37.4404 197.089 35.7656 195.935 34.5176 194.822 cv
33.3203 193.712 32.5391 192.717 32.0156 191.997 cv
31.999 191.975 31.9834 191.952 31.9658 191.93 cv
31.7441 191.622 31.582 191.366 31.4707 191.177 cv
31.3711 191.026 31.3115 190.922 31.293 190.87 cv
31.2646 190.813 31.25 190.776 31.248 190.764 cv
31.2471 190.764 31.2441 190.758 31.2441 190.758 cv
31.2393 190.713 31.2373 190.67 31.2539 190.629 cv
31.2852 190.553 31.3691 190.54 31.4395 190.503 cv
cp
f
26.3428 190.741 mo
26.4004 190.723 26.4619 190.755 26.4805 190.812 cv
26.4805 190.812 26.5352 190.86 26.6455 190.951 cv
26.752 191.043 26.9756 191.379 27.3789 191.898 cv
27.9971 192.577 28.9678 193.54 30.3594 194.583 cv
31.7617 195.616 33.6143 196.743 35.8213 197.876 cv
38.0088 199.025 40.6934 199.928 43.6475 200.635 cv
46.6104 201.36 49.8545 201.918 53.2979 202.521 cv
55.1211 202.854 57.0049 203.194 58.9248 203.639 cv
60.4785 203.995 62.0342 204.453 63.5898 204.956 cv
63.96 205.072 64.3291 205.194 64.6992 205.316 cv
66.082 205.772 67.4678 206.252 68.873 206.723 cv
69.4238 206.904 69.9775 207.084 70.5342 207.258 cv
71.7871 207.653 73.0566 208.036 74.3428 208.394 cv
75.0908 208.599 75.8457 208.789 76.6074 208.962 cv
79.6299 209.646 82.7324 210.125 85.8506 210.504 cv
87.0322 210.641 88.2129 210.777 89.3945 210.902 cv
92.1143 211.187 94.8311 211.438 97.5332 211.533 cv
99.1279 211.59 100.714 211.587 102.286 211.519 cv
104.507 211.416 106.698 211.191 108.833 210.854 cv
110.817 210.536 112.75 210.125 114.619 209.642 cv
116.15 209.243 117.639 208.797 119.079 208.317 cv
122.229 207.263 125.156 206.051 127.827 204.8 cv
130.41 203.571 132.753 202.31 134.85 201.118 cv
136.288 200.28 137.598 199.453 138.793 198.716 cv
139.235 198.428 139.661 198.149 140.069 197.88 cv
140.864 197.345 141.585 196.858 142.229 196.429 cv
142.63 196.143 142.993 195.883 143.32 195.652 cv
143.9 195.197 144.288 194.917 144.456 194.837 cv
144.634 194.751 144.593 194.866 144.357 195.156 cv
144.418 195.256 144.349 195.448 144.155 195.718 cv
144.142 195.796 144.102 195.885 144.04 195.988 cv
144.076 196.098 143.966 196.268 143.722 196.533 cv
143.844 196.513 143.79 196.597 143.537 196.8 cv
143.301 196.991 142.869 197.301 142.263 197.716 cv
141.18 198.485 139.876 199.412 138.319 200.372 cv
137.553 200.868 136.731 201.372 135.859 201.883 cv
134.637 202.603 133.314 203.331 131.901 204.06 cv
130.603 204.712 129.229 205.363 127.787 206.001 cv
126.631 206.477 125.436 206.976 124.179 207.423 cv
121.615 208.354 118.854 209.195 115.931 209.869 cv
112.861 210.564 109.624 211.079 106.29 211.369 cv
105.162 211.467 104.023 211.537 102.875 211.581 cv
100.568 211.672 98.2305 211.66 95.876 211.57 cv
93.6904 211.482 91.4922 211.309 89.2939 211.108 cv
87.8975 210.974 86.501 210.821 85.1104 210.647 cv
81.9863 210.249 78.8789 209.747 75.8535 209.023 cv
75.4063 208.916 74.957 208.807 74.5127 208.693 cv
72.792 208.255 71.1055 207.749 69.459 207.207 cv
67.5869 206.603 65.7637 205.958 63.9551 205.362 cv
62.1553 204.751 60.3584 204.197 58.5664 203.798 cv
56.7627 203.394 54.9814 203.092 53.2529 202.796 cv
49.8086 202.214 46.5537 201.678 43.5723 200.967 cv
40.5898 200.27 37.8789 199.39 35.6426 198.222 cv
33.4121 197.084 31.5469 195.959 30.1084 194.902 cv
28.7002 193.853 27.7197 192.901 27.0742 192.201 cv
27.0508 192.177 27.0273 192.154 27.0049 192.131 cv
26.7227 191.828 26.5215 191.576 26.3809 191.395 cv
26.2422 191.232 26.165 191.133 26.1514 191.097 cv
26.1182 191.049 26.1006 191.009 26.0957 190.982 cv
26.0957 190.982 26.0938 190.978 26.0938 190.976 cv
26.0898 190.927 26.0918 190.876 26.1162 190.835 cv
26.1641 190.753 26.2598 190.715 26.3428 190.741 cv
cp
f
21.2461 190.98 mo
21.2754 190.972 21.3047 190.987 21.3145 191.016 cv
21.3145 191.016 21.3984 191.087 21.5615 191.225 cv
21.7227 191.361 21.9941 191.667 22.4141 192.082 cv
23.1553 192.741 24.3184 193.649 25.9219 194.633 cv
27.5264 195.621 29.5713 196.72 31.9717 197.875 cv
34.3506 199.062 37.1768 200.117 40.3115 201.034 cv
43.4453 201.97 46.8828 202.804 50.5361 203.654 cv
52.5146 204.125 54.5596 204.599 56.6514 205.118 cv
58.3428 205.536 60.0566 206.001 61.7842 206.482 cv
62.1943 206.592 62.6055 206.704 63.0166 206.815 cv
64.5576 207.237 66.1104 207.671 67.6807 208.105 cv
68.293 208.268 68.9102 208.43 69.5293 208.592 cv
70.9248 208.954 72.335 209.312 73.7568 209.657 cv
74.582 209.854 75.4131 210.037 76.251 210.205 cv
79.5811 210.87 82.9893 211.326 86.4092 211.688 cv
87.7041 211.815 89 211.946 90.2969 212.071 cv
93.2754 212.354 96.25 212.607 99.2012 212.681 cv
100.948 212.726 102.687 212.697 104.402 212.596 cv
106.836 212.448 109.229 212.155 111.552 211.716 cv
113.718 211.306 115.819 210.777 117.84 210.159 cv
119.502 209.652 121.108 209.086 122.654 208.477 cv
126.063 207.135 129.189 205.607 132.006 204.049 cv
134.78 202.502 137.254 200.93 139.437 199.473 cv
140.966 198.423 142.346 197.422 143.573 196.523 cv
144.039 196.175 144.48 195.841 144.898 195.52 cv
145.751 194.856 146.504 194.267 147.156 193.756 cv
147.584 193.404 147.963 193.091 148.292 192.822 cv
148.984 192.224 149.393 191.886 149.478 191.845 cv
149.566 191.803 149.332 192.06 148.813 192.578 cv
148.558 192.899 148.134 193.354 147.554 193.919 cv
147.361 194.124 147.141 194.347 146.894 194.586 cv
146.505 194.998 145.988 195.478 145.356 196.031 cv
145.184 196.213 144.915 196.452 144.537 196.756 cv
144.184 197.044 143.722 197.394 143.165 197.802 cv
141.895 198.744 140.444 199.802 138.795 200.886 cv
137.93 201.466 137.017 202.053 136.056 202.643 cv
134.683 203.489 133.212 204.335 131.647 205.167 cv
130.191 205.932 128.656 206.683 127.046 207.403 cv
125.876 207.905 124.664 208.407 123.407 208.866 cv
120.809 209.824 118.034 210.664 115.119 211.31 cv
111.987 212 108.701 212.458 105.335 212.667 cv
104.188 212.737 103.032 212.777 101.872 212.789 cv
99.5293 212.814 97.166 212.734 94.79 212.593 cv
92.5742 212.459 90.3486 212.264 88.1221 212.067 cv
86.7051 211.936 85.291 211.783 83.8799 211.613 cv
80.7139 211.225 77.5674 210.733 74.498 210.044 cv
74.041 209.94 73.585 209.838 73.1299 209.732 cv
71.3799 209.328 69.6514 208.893 67.9531 208.438 cv
65.917 207.892 63.918 207.328 61.9424 206.794 cv
59.9834 206.239 58.0459 205.704 56.1348 205.243 cv
54.2051 204.775 52.3115 204.354 50.4717 203.936 cv
46.8145 203.107 43.3662 202.293 40.2139 201.373 cv
37.0576 200.467 34.2021 199.435 31.7949 198.236 cv
29.3828 197.08 27.3271 195.983 25.6973 194.983 cv
24.0811 193.991 22.9033 193.086 22.1328 192.405 cv
22.1025 192.381 22.0742 192.357 22.0439 192.332 cv
21.7031 192.034 21.46 191.787 21.2891 191.611 cv
21.1113 191.44 21.0186 191.344 21.0107 191.326 cv
20.9736 191.284 20.9502 191.24 20.9453 191.202 cv
20.9453 191.2 20.9443 191.196 20.9434 191.194 cv
20.9268 191.142 20.9463 191.086 20.9785 191.04 cv
21.042 190.953 21.1582 190.929 21.2461 190.98 cv
cp
f
16.1504 191.22 mo
16.1504 191.22 16.2607 191.314 16.4775 191.496 cv
16.6934 191.68 17.0137 191.954 17.4512 192.264 cv
18.3154 192.905 19.6709 193.757 21.4863 194.685 cv
23.292 195.627 25.5313 196.696 28.1221 197.875 cv
30.6904 199.098 33.6621 200.308 36.9746 201.435 cv
40.2832 202.578 43.9121 203.691 47.7734 204.789 cv
51.6348 205.886 55.7266 206.982 59.9814 208.008 cv
62.1182 208.494 64.2881 208.986 66.4883 209.487 cv
68.6924 209.96 70.9219 210.438 73.1709 210.921 cv
77.6729 211.869 82.3125 212.442 86.9658 212.871 cv
91.6191 213.26 96.2744 213.755 100.869 213.827 cv
105.465 213.904 109.993 213.495 114.271 212.576 cv
118.551 211.661 122.567 210.269 126.23 208.637 cv
129.896 207.01 133.223 205.165 136.185 203.299 cv
139.15 201.432 141.756 199.549 144.022 197.828 cv
146.27 196.079 148.185 194.498 149.729 193.157 cv
151.273 191.818 152.465 190.742 153.264 189.992 cv
154.068 189.25 154.498 188.854 154.498 188.854 cv
154.498 188.854 154.07 189.251 153.268 189.998 cv
152.475 190.754 151.289 191.836 149.75 193.184 cv
148.214 194.531 146.307 196.123 144.067 197.885 cv
141.807 199.62 139.21 201.518 136.252 203.402 cv
133.294 205.286 129.972 207.152 126.304 208.804 cv
122.636 210.446 118.602 211.836 114.31 212.752 cv
110.018 213.671 105.472 214.078 100.867 213.998 cv
96.2588 213.922 91.6064 213.424 86.9512 213.027 cv
82.2979 212.597 77.6465 212.012 73.1416 211.063 cv
70.8896 210.594 68.6543 210.128 66.4463 209.669 cv
64.2451 209.181 62.0713 208.7 59.9316 208.226 cv
55.6621 207.223 51.5645 206.151 47.6924 205.077 cv
43.8213 204.002 40.1807 202.909 36.8555 201.781 cv
33.5264 200.666 30.5244 199.479 27.9502 198.251 cv
25.3545 197.075 23.1094 196.008 21.2881 195.063 cv
19.46 194.131 18.084 193.273 17.1904 192.609 cv
16.7324 192.284 16.4141 192.013 16.1982 191.829 cv
15.9814 191.647 15.8701 191.554 15.8701 191.554 cv
15.7773 191.477 15.7646 191.34 15.8418 191.247 cv
15.9199 191.154 16.0576 191.142 16.1494 191.219 cv
16.1504 191.22 li
cp
f
57.6582 202.71 mo
63.0098 206.432 62.0781 216.322 63.3574 218.88 cv
64.21 220.587 78.9336 237.477 83.4717 238.988 cv
87.3486 240.28 89.2871 238.194 88.3584 235.5 cv
87.1934 232.125 79.5283 224.232 79.4141 222.138 cv
79.2969 220.044 70.9395 204.202 65.2188 202.71 cv
59.8682 201.312 57.6582 202.71 57.6582 202.71 cv
cp
.345098 .364706 .568627 rgb
f
88.3584 235.5 mo
87.3057 232.448 81.5156 226.474 79.7256 223.002 cv
78.5322 221.288 76.002 219.136 75.125 220.627 cv
74.168 222.253 80.0518 232.853 80.0518 232.853 cv
76.208 231.258 70.4688 225.842 66.5615 223.002 cv
72.1123 229.684 80.0361 237.845 83.4717 238.988 cv
87.3486 240.28 89.2871 238.194 88.3584 235.5 cv
cp
.639216 .65098 .788235 rgb
f
276.037 184.104 mo
276.075 179.017 li
276.075 179.017 276.013 176.232 274.813 175.83 cv
273.067 175.244 270.68 175.979 269.824 175.784 cv
269.12 175.622 267.582 175.313 266.99 174.886 cv
266.301 174.392 265.821 174.768 265.882 175.029 cv
267.318 180.532 271.667 182.901 276.037 184.104 cv
cp
.756863 .85098 .776471 rgb
f
275.93 184.101 mo
275.912 179.014 li
275.912 179.014 276.047 176.234 277.26 175.872 cv
279.024 175.347 281.411 176.169 282.272 176.003 cv
282.98 175.864 284.531 175.61 285.137 175.207 cv
285.842 174.734 286.31 175.127 286.239 175.389 cv
284.609 180.836 280.34 183.055 275.93 184.101 cv
cp
.792157 .890196 .811765 rgb
f
179.138 202.36 mo
179.354 201.776 180.516 201.849 180.516 201.849 cv
180.516 201.849 179.409 201.789 178.971 201.705 cv
178.345 201.585 177.417 201.061 177.6 199.781 cv
177.792 198.435 179.565 198.968 179.667 198.482 cv
179.907 197.329 177.695 194.973 178.914 192.169 cv
183.299 182.07 197.322 184.042 203.978 182.618 cv
209.01 181.542 218.294 178.438 223.977 178.515 cv
243.078 178.771 252.353 189.579 262.309 188.9 cv
273.59 188.131 274.616 180.952 274.616 180.952 cv
275.065 178.9 278.136 179.085 277.948 180.824 cv
277.052 189.155 270.865 199.349 256.027 205.695 cv
248.992 208.703 231.243 210.416 223.592 210.311 cv
218.224 210.236 207.869 207.284 202.567 206.72 cv
198.933 206.333 191.561 207.418 187.951 206.848 cv
183.968 206.22 181.924 205.15 180.34 204.107 cv
179.427 203.507 179.056 202.583 179.138 202.36 cv
cp
f
212.31 201.176 mo
212.31 201.176 214.934 210.076 227.566 206.016 cv
231.156 204.862 227.245 204.605 225.579 202.81 cv
224.648 201.808 222.502 196.561 218.656 197.042 cv
214.811 197.523 212.31 201.176 212.31 201.176 cv
cp
.835294 .94902 .87451 rgb
f
195.148 197.712 mo
195.148 198.552 194.466 199.234 193.625 199.234 cv
192.784 199.234 192.101 198.552 192.101 197.712 cv
192.101 196.868 192.784 196.187 193.625 196.187 cv
194.466 196.187 195.148 196.868 195.148 197.712 cv
cp
.858824 .972549 1 rgb
f
194.697 197.712 mo
194.697 198.301 194.217 198.781 193.625 198.781 cv
193.033 198.781 192.554 198.301 192.554 197.712 cv
192.554 197.12 193.033 196.64 193.625 196.64 cv
194.217 196.64 194.697 197.12 194.697 197.712 cv
cp
.180392 .247059 .290196 rgb
f
191.486 198.9 mo
188.353 202.432 179.83 201.602 179.745 201.594 cv
179.619 201.581 179.523 201.662 179.473 201.771 cv
179.954 201.818 180.516 201.849 180.516 201.849 cv
180.516 201.849 179.897 201.813 179.479 202.02 cv
179.524 202.097 179.591 202.158 179.687 202.168 cv
179.801 202.18 180.737 202.271 182.07 202.271 cv
184.94 202.271 189.644 201.846 191.918 199.283 cv
192.023 199.164 192.013 198.981 191.894 198.876 cv
191.774 198.771 191.591 198.78 191.486 198.9 cv
cp
.670588 .85098 .729412 rgb
f
48.4766 107.889 mo
52.0576 107.148 54.04 103.867 56.7979 102.357 cv
59.4951 100.882 63.2744 100.688 64.2109 100.889 cv
64.3906 100.929 64.501 101.255 63.9336 101.542 cv
61.8936 102.575 59.4248 104.268 60.3252 106.992 cv
60.9941 109.016 63.3203 109.707 63.3203 109.707 cv
48.4766 107.889 li
cp
.203922 .219608 .294118 rgb
f
91.3281 135.379 mo
93.4316 139.479 li
93.4316 139.479 93.873 142.276 92.6455 142.905 cv
91.4268 143.532 88.6719 145.643 88.2705 146.249 cv
87.8369 146.906 87.3682 148.196 87.2822 148.93 cv
87.2305 149.119 87.0537 149.224 86.9619 148.905 cv
85.5127 142.881 87.7471 138.778 91.3281 135.379 cv
cp
f
91.167 135.46 mo
93.2695 139.562 li
93.2695 139.562 95.2842 141.552 96.5117 140.922 cv
97.7314 140.296 101.054 139.293 101.779 139.32 cv
102.567 139.349 103.89 139.724 104.532 140.078 cv
104.72 140.151 104.889 140.031 104.701 139.806 cv
100.653 135.117 96.0166 134.535 91.167 135.46 cv
cp
.172549 .188235 .25098 rgb
f
19.7793 123.103 mo
19.7793 123.103 20.5801 120.423 21.1895 119.293 cv
23.7295 114.591 38.0547 104.231 58.3418 108.289 cv
87.0303 114.027 93.0029 136.93 93.0029 136.93 cv
93.2148 138.129 92.2568 138.909 91.168 137.353 cv
91.168 137.353 86.8418 130.11 66.6201 127.759 cv
61.1426 127.121 45.75 128.173 44.8926 128.136 cv
36.1445 127.76 24.8115 126.818 24.8115 126.818 cv
21.4521 127.873 18.1699 129.326 14.418 129.17 cv
12.8096 129.103 12.1563 128.258 12.4424 127.618 cv
13.4297 126.536 16.4404 125.219 19.7793 123.103 cv
cp
.921569 .878431 .827451 rgb
f
61.8232 109.099 mo
60.7012 108.803 59.543 108.53 58.3418 108.289 cv
38.0547 104.231 23.7295 114.591 21.1895 119.293 cv
20.5801 120.423 19.7793 123.103 19.7793 123.103 cv
19.7793 124.091 24.2559 124.976 27.3984 123.386 cv
31.3008 121.411 34.499 120.611 43.9521 119.482 cv
44.8037 119.38 57.4492 118.871 61.8232 118.023 cv
61.8232 109.099 li
cp
.772549 .631373 .380392 rgb
f
93.0029 136.93 mo
93.0029 136.93 87.502 115.856 61.7285 109.075 cv
61.7285 118.058 li
61.7588 118.046 61.793 118.035 61.8232 118.023 cv
62.1992 123.15 85.5254 128.182 91.168 137.353 cv
92.2568 138.909 93.2148 138.129 93.0029 136.93 cv
cp
.4 .447059 .411765 rgb
f
93.0029 136.93 mo
93.0029 136.93 87.0303 114.027 58.3418 108.289 cv
38.0547 104.231 23.7295 114.591 21.1895 119.293 cv
20.5801 120.423 19.7793 123.103 19.7793 123.103 cv
19.7539 123.119 19.7295 123.134 19.7041 123.149 cv
20.8828 123.422 22.7988 123.63 26.2695 120.141 cv
30.4229 116.361 36.5215 111.77 47.1494 111.675 cv
54.6396 111.608 59.707 116.049 61.8232 118.023 cv
64.5352 117.391 70.3086 118.323 73.251 119.717 cv
86.79 126.13 91.168 137.353 91.168 137.353 cv
92.2568 138.909 93.2148 138.129 93.0029 136.93 cv
cp
.203922 .219608 .294118 rgb
f
36.9141 124.467 mo
37.5068 126.473 38.335 129.37 40.9619 131.471 cv
44.1367 134.007 49.623 133.333 52.2158 132.563 cv
52.7549 132.402 52.9805 131.91 52.5166 131.828 cv
50.8945 131.539 48.6133 130.507 47.1504 128.793 cv
44.8223 126.066 43.5137 124.183 42 123.667 cv
39.9307 122.962 36.6221 123.481 36.9141 124.467 cv
cp
f
29.9844 121.833 mo
24.3408 123.479 21.8486 124.091 19.7793 123.103 cv
16.4404 125.219 13.4297 126.536 12.4424 127.618 cv
12.1563 128.258 12.8096 129.103 14.418 129.17 cv
18.1699 129.326 21.4521 127.873 24.8115 126.818 cv
24.8115 126.818 24.8291 126.819 24.8584 126.821 cv
23.6826 126.207 27.8682 123.338 29.9844 121.833 cv
cp
f
30.4385 122.068 mo
30.4385 122.772 29.8652 123.346 29.1592 123.346 cv
28.4541 123.346 27.8828 122.772 27.8828 122.068 cv
27.8828 121.361 28.4541 120.79 29.1592 120.79 cv
29.8652 120.79 30.4385 121.361 30.4385 122.068 cv
cp
.819608 .92549 .952941 rgb
f
30.0586 122.068 mo
30.0586 122.563 29.6553 122.966 29.1592 122.966 cv
28.6641 122.966 28.2637 122.563 28.2637 122.068 cv
28.2637 121.574 28.6641 121.171 29.1592 121.171 cv
29.6553 121.171 30.0586 121.574 30.0586 122.068 cv
cp
.156863 .211765 .25098 rgb
f
13.0713 128.516 mo
13.0117 128.516 12.9541 128.515 12.8994 128.514 cv
12.7432 128.508 12.6211 128.378 12.626 128.222 cv
12.6318 128.067 12.7656 127.965 12.917 127.949 cv
12.9678 127.951 13.0195 127.952 13.0732 127.952 cv
15.9717 127.952 24.2695 125.617 27.6367 122.713 cv
27.7559 122.611 27.9336 122.625 28.0352 122.743 cv
28.1367 122.86 28.124 123.039 28.0059 123.141 cv
24.4883 126.173 16.1182 128.516 13.0713 128.516 cv
cp
.160784 .172549 .231373 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (\715\740\744\777) ()
%%Title: (sea_animals_set_2.eps)
%%CreationDate: 5/27/2016 3:18 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3QS%qDeDcra".O%NpWOJt2u\aGQ^d@#b[Q5scf)G%Y1[5PoNZ<Rh4@mFg;UJ;5pnAt/(t_OX%oGH\-fX[0R(DcbuMT4+)-
%l`Qm/a=[WL"Sk:^\$gHV5<!pr67&b^TOkS/\ZSpfHbG*_[(<rT/+M)%]8hk#gbE%mB!Z4MiJKRR;?Qd61@eAThDE\^[q52;8r+^O
%iY1R(d=YaZ!+(k4odS@AVS(UN_a7aI"CF7JO,m'CXlPQ3mbFnpHi:+pY?UB!5D$m1$6;0GFpr[!"q/%fpu@!rY,#2T#0f?&dku`/
%bJ)kf6NgYl*Gju&?4'BEP<U&a6\"X[Yeg;PjRN6pYkM4D/\"387-D\ROuS4^!>Ng*a`(Hl*Vagl@#L's&h-p:>FhY=2[R)A71[Ko
%]dgpL`dcXV^]OYZX*dIt36;o"FZH7s*:Hc?,p`#lmLgd*V!FPdqMa'Drhu<9KO"h[;)Z%FX0HP,?iLMD-ZU4+A^0CjVV/XrfD@fs
%3fm)SEbq#c-Hn^>So,I"`FIP`Ii1YjkZ5qlaJIE,+@!^qD)f_\TTqB`ROESHS)gqd[L:Y4=XXgY&RdMh!\\Mm99T\"E-*/B/(g$t
%[^%']5PDP+<KTd3&B<1:]io?0K=n8cd8Z\Dl@-3K*m(B2\2=$m)*=XRrRL;MCo)Z+^MgRJV=VQ&icn/V\^5=;k>&G.$*/agki'iI
%aEefTTP7EZh9caR%u(pC(c%oGl,8/`oem<XTDq!HpU$i'Er\/n]@NX=BihD9r1>WC[YgsJdOb'n0!M_L3\A(]&&6:X[*_n;)C64&
%ILfjR7_Rj^@_c6tBH(4n\H.+mA%)@=mMN/X([VHO7VtnT"UtZG1?qS<;sbZ=e*<<qp0im,0"\9FDTBlW^mjcE)!!(B[t=X&KJU\E
%#Dbc%+u!s)rrc`rQD:F<ILYYFfe3#RUXPiR-qbMM%%7.K.U()CY;I;=]Oc?TE-6T8gHKK'ATe<lR]Bh!bn2*I!4t,JB"(S5bfqD#
%i+Wk?c1rAB@5OJHC=h\!lD84T:Ur][k_$U0Uo6\[5&J<]>JnS>pR%k(C`uE9lX9WS;!Uncnp_MT;@RGLZ"nIIjqkUbm&edli+cQn
%6+q2spgpio(o+Y425>fK#al`d*/uI5JV+e`!5[T[Y(>d"c2?ZeKPZ)/oNT4K<u?Bl+(nBbNK`[=]nB_Fkl1M><lF+sZdim0bodRs
%>;$K_-<R?D!/u'4``ng.XkkUQbr1+a>[&*8'Z6F8:]Dg%%QAeua0#/C>Bq'm?(D,p@5J2tWb0h_[JgDMD50P9?j/IHk$4\Q8%m]]
%3P^BcbmG>HKFhWB`RgJWLnKm_d/e\0d'LSEQ?e?F4#Q&Tru/Rsf`>+Z1b3+,8Dd2J3;f:b'L%\uE>8Bl?@90+H*`A+6+7+K=M&*m
%9aTP>94A;7T++F\SGY5o7AFLm]B8DZ0R"_9Dr>8^SFACJm6U'Fe2MiD:5n0ln>pSD>PW^g_O[l-lOc*-9fTt+!d[ngTmD-H=P)mK
%RSH0Z)pk:`q.S%NB5@M#n!\s6N5jM=5H"E!1Srt-8D>I20LF#V\hH_O$4X%GFq)MI*8iRRSJ=J:CX=Z$q_X:S_BMJiR^p.o7'&mV
%1C*49RoVi7hldj#Pr("oa>0$M6ZeWngcVHSdP@(lVK299'.[>j@eo/C<UY@.ABmK7A3k8s#BjUFb:ReGAM1I9jd*I417.mX\X`<*
%E]HYR/4_Au=\dcM@5d^7UMTo!/[hd5_DfPZS0@F9o,[+(8.tpj\sI\:#C?>hdelrik>**%c/[`g_Q2</I,q7B3,7;/#/+@!BZE?W
%DSG.C#NAd-@KXgFSO&U5R)&9bo<'-UDnW5EV.]Kdd=qhUoi$Is6>CcZ6X`+%=!A/Ar)*>NDjg)N5FYD_K+)X0JMuZkQ&\uc1lZD<
%c]6O6gJ4R4I@$?FkT%?jeaE*i?c$a2AQJRd32b4EF=Ti&ba/`N&ig!,[-@Sr%2>&U_+,^B?SL^8AkaH5K)^6nO1uZriia6^Nk@/)
%juim6*F\L,k.n_^`lM<UG!G;o_R94:QB>go+j8l"Ka`9VYqE99)44XKZ?258Z:D[<b;!oN^k#^'Hk]hH1BW2?-!F&_po"0JJV,f2
%#u!^.JqH&?3&kn$N>[&(?SK!2mgY7o]jGQCI4'Ba$fr+Qj*pf_C/99KN;h6crZgFKRrA7j9(/LEkr:T5<>-glOO9)07Ji\SpoUT!
%T(6$UnsP@Fs,BeLr6IL1Og(p!]PEsc3S4M)s+="*1huHZ\.3KQhWL:$OFtTb]10=pE2%)*i2dc!Y2`1;^1D3U?&k@6^u=aXAFk]%
%Y8Hhu7_Mj3;o;]/3AB--R"d0:f\Dt$mpNeWdj%udMTaFmrKh!XDf?cKd=ZE0Y20Z^>8B`Ds5iETAuX\rHj]Qd4rE`ZZK>HE3@>F!
%Jj/#Zi,%`Ml$eBA>WghLFHX<gN8no.bb@(g"b/g(bX%(D;)?pCZ^EbAjF-i!.^nfWbY$C1*L(Jl*P_>SAqf,4kEEofS^XJMB)Gb_
%';I8]#CsNWkYlRG<f?!T*$DR9hBlCoFdbeA`:'WE)kD\)3@t>fF0LG3&=Li-F%3<VQi+e`f*IR5-P<<e37f'+pGU;_9l4ldgqWcU
%a'%+UqL,KlN5U+u2b1NJGO9A?E:6--n&%HQ@r\m4!Aa\`f$Bho<?.TsWmmM4B1Ke,1Q3YEo)@Ya8$hL%H8)j3U#NjKN$1'Kr.JJI
%-$!q^B8'mNC-)tiUJr/=#+o_a:LH'b4=ddL#@^eYnn'$P2(LMp-HVMm0W86Zj*(j$Y\+5&a.Bii[9?=A*<DXtO?(A^/LU@d2*2e:
%jr_T=#Kd+!6Jpuf$n3UcXAEZ_gSWrfiL,kV/E'*<*T/aUSS;\E[-K;62L+h;Xl(/2Qn>6g:SQ'%Jl__C-W-BVZRFpnj[k\^Wm<_h
%XEiFjDuJ'K-h#/]Sjd(tc,EhMdW[a1iWPZ<EBVLO-r]oH4H&df_TtM_YTRRU*#XJ+5E#(aJtLJ83fDu#R76X(bHiU<QKrp<!9JR!
%7<,,#F)U*QdodA4a=N4.>P,6MNd*;Ig@8IpU6NC@=VN7)/;i$YS%CM8Gc&Im07UfQb`\<NrUN'@-bPb8=M0u!/.NnRlRHMWJoC>]
%_H>qL8_sdF1kQ.Q]Fi%Q`G#(ET:*Hum+Zr9q%qpDZa=M_@b6j@?#r8_V-R<Z[A@/5#eQDf6H_,hqd/6MM+h2Y[A?n#hmR:C@-q/%
%CJ1_:ZtfWi<c*4Sk\17ug[dlI#:0)B>I"XE!Ou+(?WSIpWC@@gYZ.Bo)GS;3bdh6h#P]^qkDmjWNPWmi)Z-0&``'&>VqK9ONLs!&
%Gij#&A@ZKaX:J[MY\5\.WOL&_V;D4H_j_=[\iQ_9:HEfW`Ye'D;#<`NV>87d/mh4,%C8'>.1P`6#a]J+R1WKWn4b=E%_`>4CR"hd
%Ro!^l74pbJE%YIOIlS>CNPIFL2ZbpC^ZVk`fju;@o#@#A$]VmP2uW^`M=,3*k;rIdpqe$1GD=ECi\CGOfV4c1-^$\N</\>GjA9@K
%h*.1,<laJkl?YMdaA2\$HT"MaOKbuo81WVkf[onsQ8Hkq"I`Ho_#Y#fm3tcf+O)T^G(@J#8!t]C&Eau;-VgHl6QblWOn%6(7&*uT
%f32eDM2P^hhtUt^AYFM4DgM6=[r@Lg\.S7h]NpoB5g(PRQM\G?rSRG+s.-ua#NngIQi"P@rSQ`9mrJGP\c4aN6d,GcDuCu@fgUt3
%""\C'LQUY<cZ`,7>B=+(=ml)<pO&<S^:tZM3!aQiQ-,b4-EK+MaL2a"He2b._Y2Gp2Q]3X7^6+"f(o@X/E$sr*FSZN_p"iSVj8Lp
%n4i*[cngRu*16:_[fU!?;m[mfkM5dU];K6*rJd>1@uQ]gZ=-mG=Wq!MaSqaCf7EBrQHA9s9XakDn$5Wq/<g#_GtOmd29g:IU-pd=
%^8kSJ,!Y?ne*KT9AiX=CNV8/)g<9?G/7,mITUKRQiKqH.dhqGqbdlj9-f_CVCXE+F@tPF1d"\'1R3l&aKnq:7)DaOGP,*q(QGkro
%.JCE<oXn\"+>W2Yrp2o*j/?Y`^<=`b^k!!JX8RaPf_[;-$[+^+A%tH,Cfrrjlgg1?#;^f%A)<10ZLG.N]IXFD^B;_liFQ/:q6+;9
%/A*N'iJ!P"B]4YF@7^?.=a6@p%!5Wsq3Ah?m"1/aF3\E9$:oH.4=tXYl+9)Vqs@]GnOk>-ZJ[E0bI#nTRrIqMJE=s$jo^BaJ(]Jg
%*9R32'@%,_c+d?X[P+*ENM#d/;68X#)>+O7Ya3RSNXa^j3R1-V1@NNY41pF7(UK:$K:IFHZ7s"4q$*_bo`h:#i9Tt$9?Xdtbt:\0
%BAQROY8Lp;O6&lH^=uT^%c07SHn'V`6@so@SDD#:,0LJ1<(_[Q-!F&_prEt>i:,pBX2j""0<8"8R=3S>Y$#p]Or$jU:C3']M`JT1
%iU6G6#3Ln$ht:L4b7*dmASA`tXaMdp2:L7#Tcr?q4<?.960F;Tg!MN2"ue@4rBHT2s3%V@SI%2???RHA:1Eu9L@EKME"^+h\ZB;b
%74+ZYlPL"odk#ke6i.(1$n""clPO]4kq8FM0C'Iu3l\gPAm*/VehIr9Nq'lJ/,'KC-a(2\5'*Q9Pkml@`2YmZDbg1X8WVj"1I8#4
%0;%Bpc&(,8KD3t3NLlR+R]ch"?#l)5]Rc[iDGK&ie/ktl5qmdJHB`^qGZIACXaIn?07?e1SZ!)B>bU"rK\HY%bZ)_N9lXTJoBZUJ
%mr%ic0,ejVW&&qNO:r#:Ho]M0bi[jF4Nhs?I*A1M^RN8@J5ti;/LT\AJB\Q;#9Q+o>>F1$CN`f2hj*7jD^O>+1qVbnYIldWG85Q6
%K5P\U"M_If7D\*?:HlR*p5cC;8eVu9<;UGAGqBE#:21X'lbJi3FI!0GL?\,2'X:.\nEH\qcPPimQP0t$o-7U;;#&lP^A;2jAW+!f
%^kK;e>DdWD3bMTPB=Q2T,p(V&qjlGDk&Tqgn1p@-YA;B<Rp0KGbA;'ac-8GAEtE:CZaolsiHo3Yhsbk-(NT"[K`t36*+63KkEbAf
%17_XHF)TE-VK9q&me`f$o(Pc>*20]4kN4:c]<\MY[;.`V^2opi"o3(ubrJ/NHfoJ-m@sgp&t\1m).roiKu4/Z(Z[Ak$iaOijngd!
%n!."jpI`X@\aO%@rgaj9bbc65KTMXOV`\4#)PopA7@UB=;6'A?L)lP&Hi9R2-WOmc2_2F[pc8&%d3FGA/;b@B;=G?!MuMR[@[9I.
%Gu^5CF>-(_eg%BR9RJMJ[b0K\F7Al6p3k2=eL'2FG*4/am4g,BqkN<;1&!$l0R3(C.l*.CgCCR,cg_g[ng21N(cMIY/$'_\kNNGe
%'r,;#7;EN`RDAeH1`V!`G@CE4o.LB!o,!rG%c0'R2W:"?o'dL_bY4hr^ml6keQW,Gqgh,U=lD_QcOA[Po=Ml;A=^XE=_G@iS%j"f
%`!BnACL>;!c@PuK?\D/Pfs08.UNl3TQT5P#m)Arj]_]@c114CBG5m2gh(O1.qKJL:S2[4S%#PfF-sFVYs8#(QbT8<W:p`?X4Qj-L
%?h-6N+1a"Hs2OE!nI`u)1D"5#ioM:"Bmd:k5CnGDh`-#UMOk+o`;.EhM(<;ad$$GmHd9B-1qN@/X^sQi9Yj&@a7"0W\QSCaN;A<P
%RAFtp@tV43Nq3jYbe%q<K#>5_a'[%_Q4@s7*Qleh0"u7/`!Z)+@tX@ko_]cbYrM[VXfGPpM>2honG-Bt(&uQ4QsG1,D:)Z]o]=8C
%(-#o1n.ubG$lI:+$SrR8L@[$XrL%gdD#"uREp6!*CqrKdXLWOYqp;tLabcku[M%Y@T&\.=D8+95pPP!FlRP/JrtBCYe=hSG7n1ik
%9Kr2(aU!?N[q,EN.aq)<3W1To%m*GO?f78Er#PJ^^g>-l4(@pln`S\s"PcU7M(<ts[fJ/U+bF(]c.n3qn)Ugq$Q2a$1WmP_KSu]r
%$Qi2p2hQNa0tZ[rGD>dOH/il$-p$>T6<#<9Q\18*K(,Vco&BlFN3,Ztcn:kBU`&u'65EI)SEmeFg&=mnAh@WmpGZ^SR2uh].1X'^
%T[5RM]o&",.EnL0s73_uA^t;)"4)[WUT)bf2NhC45,N=T*-mH"S')6'n&jteLun(c@elKon;AAS>)Qs:mO?[=%mPe:g15#G3jIC!
%(koVs-HOp$B!pJ:^[n)t46c\15!$@nlh9rFWp1W2b#-piUJ632[.n*IX6ieb"Wsm-Jb9[bb1BjgVE"e=>c7@XIJsHN>T;=)T>eA?
%M8'PZl35o@E:KIafQHr(\]Xr'S*(LX\dTgIF2ph=d:]31/EdSt%57bmIqM&,<CkM;7=_`oUo:Ra018N8A[kQ*?']WCi'gY-Z%X!=
%=WoAK/Es>'fIu4&IuG2;5&b=sp0TU1B/Ik^hk\?TMMR6AEro.!d1oA$(RuTRE1q?c,-dF0m`qMUYMUW@<hLJ,pg6S<aW(9U^KbIk
%m<i!r,u!\!5GOo<G%?S1j51e.YlgeW^GkZVBSYb12KUQ8,3t>8^SV]JT[&5G^#pC>q3sDNqG2"kJ$t58'8QGa`pLX4erOENMb[HP
%5mrj3UsTFQX?CFR%B(';F2H*d_jCh%Er0@%!l.0io%tAJ?^g($bJ3cCWTRT7np0!'V]SC;(\uKr"#/U,1(>;-VDn<liCR%N\+/Kp
%?_>"7=<M>7m%4iX3$?g4puYg($U4.I8.ORH<iKMVq77lX&f^K#'T.B8LeiYu[3oV"Y%-;.O_-T3m`_+!lUE&q_mro8f_H)!`3V;a
%orZdbR(qN.U>_\pi?\7r0Jq'$otR1Zq6/+4rO:DM]i;ODq-soqHN>[CY?<N,+#>NiS87HG1n(%Em-JN&A.`>/qcsWc*.@[MXC:bk
%hq;KT'F";*e@n%R9c!5>:/DRKrC`*`4DmmVT+d1!eANs)1OP'\+2Wo:=m;Q%ld`0hSn'SE43^J&5tiLTnrg1UcUS6ASo$+2d5(Sg
%).KXr@57UC?Atf+$7(XBD@Dsj%IIoCBprUt`QRefmuGY5IF*#*Rm!f4@$S4[1pIJ8]8#tr#c%YF=1S])CUVKj/(ZY*B&>J3k48(^
%\l_FG*Lja2leL^sc#3J5;S=$=kIout/uO>NB@-[Y'?>niD1,Q^>oab^e!77#K9!'7DbZ+ffX#a[Ed9Jm2$5G*f6D'LH6''d(=$UE
%HfK@47?ot-&8RM4;orct7kBO/>d6TP)Brn0*L<@0o?l*%6_\Du;6!o;LsQC2FWcpr2dI!gP2aK.B\h2n3l&C7]esIA@l+pT1t>l[
%gu.W<?$rXnVQH0cI(2jQO9BD/f]`$eQI.:ra?/Zm!_bd3hl,O]32_C/]B2qV^'*j6lOf"*Mt4o]r:hJNKH4F;Qb]@Rn;=0$6Vpu\
%'1VkSdE@U7a\T.(-rp"skpi'Mp0FY<]l+VNc$J8jrki,Q^M+FBk.0._1j]n)0rF@BX#$pGP;gfBrYrU(CI<WBfu<]!p$4idI:3'g
%JPH*rs2_@]M5PDS(`K*)YsqX.$Vu&p1\tpf<M$'*S?"EP5bJk:HJ<Q7JQ>]7Pqc+1h64FU?O^4JICp9R6K:Rj)R2t^ctqEp\qFVs
%@H$WE7c]Q8cC<&\UCZ1e<lo$L=mQ`Nl)oF?%B,cP9QC2Xr-e[1=Ia\p]M'P>YMZ`+_gk&lP>u5+&_XLAJO8J@RQo$Y(B^"moaZd:
%(**;VnZDp"m*X@G.SOsK'%7Wo!F,l+!')pXoAH69e$14VqI+P/\9BW!8O8M3<jun2Vf9M\F^k"kn(V$4Kk82iJnC1pS.mWd^`;fe
%NH-',VpR+QYP"leU:mj'D&Al:,3o$-fAp2L/!\<XqIHt&K@t_,/Um*d$)4'&r(2<(f7o.u6U_siT5g0\&JHQj#prR5'-d)Zp6<[A
%IR:3JO2))I>;.\#"GV6XX\1.0n[Dsf!IOZD$D#+-a=-6$6KkVo7E9L@0+.V7_'\,)TGRiQ82<*_>FP*BJOeH5WOAka-74G;)fhb)
%p2jN6XD.">.Yc#p7^Hg@@XIYXDr1-e7=YrIqA,3S7fEIjf;NnN5a]P14a[Xh"_6<SR>=c8$W)X+0Tc/E'-$+SCa-bn!XX9g'f567
%jVm_5?P3.072>.eQ@WZES_9^FC)jrdD)FXKN")j\,t'Ot4,!GA^1DC*]m&tpa?DW^TP&ke,E^&<>K9KI9VWY,fHauE:LL%nea#.]
%ANCThLEZ,`O,Mp)DCdU@"L_6H6);tG4'tFSr8jl!)e9(3NMW1@Qbe)>BE2N5g6%pYLP2WX"OQ\eRjRYK?2FnJUAd,XKE/%/!`][e
%+_#Ntfsa"PbN(il-\^uK/HJqR9c)%tr.J2K5et0_Q<hJ%Y%/?#g[5<0LAfj?52cAZV74D?)!YnRdD7C-GktLZ]nLe\!X+IXKO5Ru
%ZIu9[gXD>.WJ7h%$;[:S8Kb--]kKM.1j[Y@I;(Vfq=,NfAiJ5.a?QPRPcQdI]oT"@cgX3HU$!qh@n!!iGKV/1MZKP,-+&",=b4A]
%Ap++lAVX4#LnFX_@ag17U!G$H!SMh64SL!9Gmn^Qg6[=S^;.*Wl82-u5I"0%W7:6`.a%hALO=E\2"C[5^p']`EBk!<p_a.O?(#QR
%j?Bum#hHob>+Z-U!Mbs-9JJ_^"c;^"q]cg_NV4XS_1Jr4W:5cuqSWDa"]XbjSZcET+KIkoneGDRlm1MUo3r<*BQSTn0lSn.psRJ^
%5ki=hq?hK&eMmhb``D(!HF+:i^uHr5VFQnp5?)NL@JqTNVd$F[T:.rslOA_=SJ7uAWs@jKaq.Jhg4S;sj42Iag1JmN1=PD_R!1e,
%g\X<l&.i)Bqhrjj4H=%_&Y*b%!3fN\+RV0QUD?1aI4U5^@=9@A9c`[3Qo`Lcs4I]Q(10OBl8N,,G@<Y6>tb@&:<NX7!AaC/<h5^,
%D^.MN\bZ@A*8]kb@\qD<9W11+ZoY&0/.R6pIE$^;;'%\I&A79&70EZ@?-e)B+CLI#]C_Mq:`rf)k^B$D'3M$c*c?.K!qp3r:hkt[
%;8.rb530:1Mlq^:\S^#Bn&o(/k3i2N+2UN>=ps?$n`Xmp5RB]CDUmXpPM_?f$]Lq5cVFYI&Z!s\R1gMu_lPn2_iO!2j!>Id<.N0B
%s"p3*ZWf.)BAgM99X?`%T$HW4r_=e%?-s7:>Vc8"CpgBCX_Y<eDuQM+&!O[[?;;S-^]EX_*L<k_r>ao1:7ee\ojNq?eKXrqU%gtX
%ltqn?1>uOGcmE1Ck`/75;c@HB<9Vn;a64E^^ucb3a\5)Omrcm0[J+#J_oB`<bKj4/DH=dor#(b4bgXPBT8#3:lSoso%t''LOP+2e
%9c%JpMq%i5i1lC^4kCc5ZgI#q5>WVb[L8M^-iIl'7Cd@T4hMX_>=I!EdgUFN6`u=g)&WA?d=)`2s0N!5%L@a2C:d0^>d=c!B[s&j
%?1g,Ck8KP:9c$Jc*2!`h\b['O<&.a%;Kt$'9nW0:M>O;BVZTgi\!hYr;@OG4BdZJ-3uX('biT!7%UdgfA[J+VcS]Apn4B;"#C:.N
%%ZFZXeiR76:R`eIck*FLQZ_m1#99YRr:P6N!UR$olX1H<7kQt;9Rg^p$=0=gBGYbOUdQWIMKY#61HPr%5I4,\^<nPPh(P'::d[R.
%=/K7)!<S9T=Ki;sI_G&*2%1STSJ5>W@!t<os00(opfH!@]-k<u-o$Tcfd>S=Of.eL'q``5c!_UBgGX`h=nt[7n:g?,M8Kfu8NRtX
%:5qgmk4urhIBJkX\25-li<+!VD<;7-$Y)V@R#1a04H/'M',ML<"M8@>Zc5eIqf^TcF&n<XdPrmE`=tc1'1>(Z7R3a[`V7tT2"%31
%YVfjsbG53*.0Fq_Q232;F.hQcCk.!fOH[V/-]_X"b]F'f6CooR,/]t$\gKN:bgp")iT0pfQOKL$0;MCcL(a?>N."[>H5k:<R=A:/
%*;Bt^iXh1_U.i(U03u?Klf>+k+hJ83qXs#RLL8LFLJF%)*+n4!*9!em1#;1_MAJ_e)aEQVl&hL^o\keq)j@*o*@=Ma\RqNnBGK8k
%^$-fdB?F*h3s=^hl@E'':nfXM?2iV4,#3(3,6)B2Q6-g'[8snhN\]ZL@[O0HdgC*TB`j;YEUF7`?arP,7q.j)g4SqDkaW5<N2=8<
%O1N=bgks_NZo=:HA29UDK[dJ)Ss!H%]A9H;Si_lq\SlY8`T5V7JK@B%CYbP+^2iS^MNJR]]6hN-^!a`B1jg5/lh0o?rEn:Cc(LBr
%mUnV2rUlN3m=.mBh&GZ1DR](R"btRgD!LYrdJmSm[h.quAU(^emGcGY9RWitiF;0_r`RYBj&'liY/jg7!',B$nEPdeol]g]oj#WZ
%im.o+)&K^%*r\9u^kLN@(k7jmc^8l&G2U6HJqJ!^[+n:XY5CBVZN/J@YD6SVn7)Qo<mLHk)CH_6D4Y/0<2/5"CuJ0q<&kgW&,+p*
%aHO7#K\:dmT,78YR!RV;p#1T*s6+K.W"lr*-cJQ1[4--3"HZAX*d7N\DO!sK<@i)>l0[OS()!s#)e+1FR#;\cHY_kFHp[m[q]8YS
%eaQkMZ@9$D4;s$:KPH13+q.7,&;YVe2'JA"O+lZ[?'ouQjNml&bM-1e7MY$h?<%?KRp.&t%`YtmXkeNP'BkJV+cJl+?;qaL2]B04
%EU<+.(T?@s6!=Mb80`;5p-V)frTFjI)g**E-&aB9I=aPKo?i.i+uJhrr157lT7m"<ps&2Om(C!oNMj3I&m:>M<.00',^11h.Bdm-
%Yog_^T&YfLGr,;C;icu2e7dK5PW'S-N!*^1j#,DnWe9qe3ch;L8#=BsIHM^m80)@=kj)PH%A^;o'1H.HPlCMpX)WCF%d`o$.\fo=
%0HA8S7b`cG[>[oOX0)9T&@dld20E+pa.qUWQc@TR,p91h49"6aHB'5<hSEp+aDDDr7lR"HnFIq;&*deOa\4_$%`?8TdA@b!b%jFG
%h<J"Y=LXOR!tG20'kQLn&E_8AZ2DCC$cGt1AO"1YK7R]F]bo4MTp9.7GV:E(a2bf1)9Y#9(D5fEg`A[%FF1Gg/b_m5i5P(Y?:c9P
%h1XOrGM's$XtYV+2]c#TrfcYLpI89B+Mpma$Qr,iI1Q+rPP/,tpQon8C^-UsIoXBj5nn@Kf=g0l#eN6haV4EK&1G-A<7#+CcDcb+
%YTDs#h7gSbS_KdZ>OIKG8B;f2>D]sN0-;k'_>D`?4&cXbh-8G+NgjhGcJ3eC2;P")^ZlR>(Q)GjDBHHT:!]S=je',%/UAtZosAi!
%%UZ^fh2tSAg#V#[?E*AKh8<1chW7M_*GtBKG<EO#F=6K=:[XIV]BW/S?DHq@[EcHIF5$/oO+N"O4):o\\PMo#IWs)<ADCh:=P]Oo
%*)#]-meXeK3I"\H?X'!Kp[-F)%B$bO^/3XHB?betF$\Z)(GF,+mdbL5eQjWmB&,>fkdqd?m_IWchn6P&e'Pi+[<2*,mV`F;/+/?N
%=RgLma"-#Va1L?3?!jZ9&prD+Yda>=_AsSX'p1^u_)*\59DEHp4'D<[7)J?gQ/-RmHR7CZH!O"kcLWRNa!5:Eo8m[hAFC%(=&-rZ
%d`Qk,XM&Z%^FZJAE%oXeXLYY-P]o?o'O*86-'Aj@l5)->bL:`=l/]2[:=ERb:cp9(m]+;XmF=>uHL],kbUWo>?G+ZJZ<%HZ[$K,2
%Cd1E>T'6!nXXAC7Gj7<1F(nGDWj1U+h4I91_TP^$F5ueoHQMh)MT<dU?&r.5[lc=\d0iY.BqHbfSt7lA?!TJHX/rIB-E=+ta8O^A
%(HHeEQ/*7Y<W2p]F`mGWj'GG*q=W8?0c""W%U@,VkF9/UeZ2MkJ+\9V1:M"O4a3rlj.k=Cj1.*NmI^-?C[T8O#GtYq?Ctc[!e^1C
%2?(O-Y:9EP?u>eZ]=SjA.f$LNg0&:[ph7^_Q<-H$[@<H\p"Eo^n[_bMW@Ma;:X?SZ:8QJ2]$#ih?#PtR]HM3oj-A,ZLc:jan%@%o
%bQlUApQ`oHn*tOqm4EQAGJ(CtqaI^)eKo.aPjc9PjAj8_#l:aU]tLK)HI1HY?C*8d6L0c?aSgG_aHG+1Vton0mXB@urMo;OX?R20
%a6OK%-Eu@LAtITNNT_Ee_tDh+[kC_.YC2;2KRGp8>2PZ=8$79\?mC)RG2DPs^Ged!nmNp3CW8BRf8h#Upt+P<ahO)HjSWaN]Be@$
%m"PB7YK<A#(M]35f8#25s0LfNo%/'n30!sGWQ?)pak+<taF!+':`be')g_ffA)fgZ2)ignQEbF>R?&<+VK'AuW'B'SoW>%'JDX^^
%#RHml'Sma1'EcHiXqE_I9JuuSa4K-tZ-lha]Gt^\5_%m#KkWGn:S.?YONsA4D?m;Ubu??%h`NL`4I\8?3H;Ct/>b=0`PtnsV-Ra;
%K58)MTGe<[K!CNkX5Hj]@KeFHHSP;CIru`IK[+AL61pNO"laaH+iRZ%L8)'c:(o\"oNd/'ZeMN(j65JFe3%P+[oO!XmB,=BH#ZJ-
%HfV<Ii8AV@1u&nVDD)JA[m1qpXk2?<On8BXgRNNIBlJF)Old/N3=g=:9jVhY1K!;g0JU>.nRZ,ISj2a`nN2#GNR&Hs0n3W2!ak"%
%(>h<s>mbANop?lgX9XDa/(G>o&s"ugogWV%.%>K^Gg1Qc7=R)M()=sk/10H@$SeR!&&ed%2(H=NX.$D9FiqNWdT/REOES'4YB5"&
%=HTaF<r8&*ZeCUhibD7!1cG39I\j3gqh`7[I'IhZQV5.E-bjP:W63+LHr&/bk6!"Nho[I'oDFeMD#0UCX+')/2sqt\ec"SdHFWpo
%UMKOC=(nPoY-jtsb33Z%:Tq.mK7f2-P__udm;CuQWujc;FO+Z#cis"hVoQK;*W7NhgX`"A<R?,1HS`<3^Gu[Wdjo;i?[M\/)me*%
%f*aZ3QmT+be?gDt@Qtl)-J*U,6Ll9=.:4*u8,<F6[E\M0nock[;W#dM8ssN`]D$6Y<c4ORJpTG5S_]:2J*4bKQ$/`O=-%McLU+G%
%\UW,bh+8A(G#+,V1:p>ka!_#$SU/>g(CVW/Hb1Z]LV;/32Rd=p2j8UENhJtP:A;5l0i_J>k'_%5BXu[W`8$CaNL4D7eRPTL9f7)o
%]rK"Wer<j\ICo"^f?XZ'pech4`ZO7<Sp7/;$G\KTd)h$0L^Dbj7)%PC9N6oHQc[eD5rkp9T(J2$VkHrXiMmYdG+OcdW@dRV4VcR,
%r2GU$G:ZbOB\fK9Y?lP>aAu#2T9tUrFRc`qgNSGO48X%pHecsB:N2d$LUGS#rbK=,4lGt-`'H01D&cg4;S*19NFk&S=ZG-[`;KV$
%bf*j:Oa5@K]8-B:E,rI(H3/lt6LEa9G%p@cq+gC)7m"2@QUd.[l<la?rN&f\hILi%"FMLn2SU<faOW!4?B4usqso!@*`!al0'^=D
%90D2t$)lD.8PD_3SQs:.PEXSkII]4:S;s*d+$&<PDIp%tqO20#kCf;_a^t26#J$c3A,jdO:`5d;Bkuhs<;3N21hW)(i]m0SjganF
%nO5UUe@,(r>:15Bq(:'BOl,%W0BO?PrLJOejZZMf$@CN]>hF7(W:ha\MiH/]k9>A!'Y_*%8'`g!Kh16%Ib`m8O))AJQPFH(jiS[k
%9/+UjXBN0E]%,A4Y.BnSe?s>dn8`pqn3sL\NT8G]i-A>98NpAnD]\<LmFH.(/%=J@G42lD)7FEe.=_&OYOja@Nl:5C?2:b8Hgfi@
%\aL2Ip"TB@@V>GOr=JP:1_5_4E:MoH/>%?p$;L1j1)/'pWVa-p=B@F6SjF50WMb]9=.`+:[D9+UapajTD8,Q<Gh4SdX-qt\Ynt*d
%12`kt]J7LgcAIbU>cr<S^<@>()o_E3G1+-YBhJ1BIoiq91.GF"XM0qF8mJj\]"IX(dNL!-\XhKbfh=fZ/)nB\WH*<-4fC1e;6_SX
%@]"I?pHDRr4j.+Ece=LbDQ@n_CGrc[\odD%eB]baGP1Z$('E#%-!/7%jR32QQVKEEe'PeQEoSnm;]EE:NmZWWSS??<!H5DIY$8N?
%k]X\jH5+e_m<,&8hG13Ep[-BE[ps9TTtYYo+C83YipLt[i(cG+>lNuu@g1YC0[6Zl]IUa'AW2nW>7?qUB^"E\qm<'bp\\eArVu8F
%G(6E#[Rp%WkhGL^]^`m%*]3b:8@i;LNhucHe(=89UY4sg9%IC[>@[+lBA*e2^3n*]q1qkeId#t>F!)Ku4ZmH=)stbp`#]GH=_)$B
%p\$>'6`]E3V74GdBM_]Wik^IkY\DFn]mUYIh]<iir3S.#m@ARl!o$d<lOi0'o2,(N#34,!I]F6e[bZ^QpSMjl;)^hT<TW3_V0Kl)
%MuDIABeQ!i?U'Qo#:26u&rs@W?BRDjf1Wh'X..mZ2"DL;Li.-SHI:T3YQ`KD,?]6BL-"\AWs<:jkdG$a+^NhS,t"C!lFXU4jVsR`
%9r?OZlKs$bq=5)`DM+F?mq$hg$2n%8=7H^I8SRiIrmG&dJn^A_m]\ZnZrL,0W0_.@pT[%/FSYI.j)Et4k]S3L&.SA#X[$oJD34JY
%QRaa!Ti_*dl#`#g4C"kQk?WinnQJ.S;fDI<MEH6L,sM2Eh1bok%Kq^X,p'+J(0l,l0irJ;KA+L`/0FMkkp!9inc5Q7?[RE&W[+54
%&iJo&Z5m-_]n,t#jte?@([6T5f\!l"o[G!81)bC;&#:].)P*>[[LBQJ?[WF9*tQQbk1\[<YT((o`3O[W.jEo47Lj39>YlW2&(+Lk
%[,)/V*(RF[$/VXW,ckF'3+OI`fXh:/WU$F--$&*d4gAPuPPO5Z?Z=JQ2q;/kic()eM^C46Su^A</n:K@bhOY=>r?%R#.?2.G@@3/
%Gp)/8[atMU?"Lp+Cq3KIPd<92C,b#=.mYMTQfTd=5Br3P>K4*1m1.opE>f"!4H`PI#Y`,N=#(Ea&_KfrZ`EJoe.IC1Co3fgBYoaj
%!=?L&!kZ(D9d.&Kh-gCkm;,;80.2g6S&5uYGc,Q7Sd(kILVkE#N0_9VG0U]BPXq;1N[LG)\Zr:[.C[Gm.99!R"Ho%PUXt`=XKTX/
%il0UE61S_K<iD;[Z.s*Y3*$SY'S2YJE8uLEjkJ;XoA3kG,q?P@de_T5NM\R#h#j-\2cd5I:R)5X@9g\lf_%Y8.$nm`QmVLE#;5&b
%ojKo8mFEncnF>$MiK>P>]*`Lr@l"\*oZ+GjS4%dqoJWZsF)`T:$NiHm?TQm$j4p=JL4Ap-3ZVm8.9b+iTt_3j*;0X+WVM:<A#-TE
%J),6W)qOq_f2+X(Q;iKXh+[^Y*Ijf\SDU3$h"F4cluk<Jn>_W08gm,_jN-c0Sdp#iF5+Oo1ofn>.%,?X%;#bl=1.sAlR6rQ(dCbC
%.Yeq_*u2u`7(IG-/Emj4m)PU<cIHTIV4RqCISfP#]NGA<Oecda1qDLG1L[GmD,O?m.cDoDrHdA<Q/HD`^Y`0Cl?XQsS\1Xf,h'(L
%M0cA.&CVN0b6`Vnk$WjD`!gusT[W(Q'XHc7cJe/a4_s^3CmkWRf<Q@mrMOZdQ@D(lDUirYBf\LjrBQ2SNid'gZB-fh.IHI?VV)Gu
%WV[i-3iPj>6qDZin22nKTVkDA=0Fah;3[qDc*[4_4U\]=B0CFplthWuSJ_Z?$J-Ts]XAE0*Sof2(p]2R\de-C/Z@OT7/"%(:UlJq
%DmC![J"1HakNVW&hd%I_J,sPWTNZC+c!=NV&>1c:H,dF6J6Uj=;O`Bg%M83t$<6qL26a]fLu^0=5M"0'Ln#DM$H]'<K4'!e-2Yei
%Jk^B_:#QK#dC"5jO:*5HmRE)6C4#U_.=,.P;KE)`kBugi+sqWlX!tm"qO$48'A4d?m=M/*4.KF^n*um]`87^-K<`Nn'U5u`cT#+L
%"R/L,.f$/bL3Ii4pYcMeCl?c9@b\`+.L21#_UE?LKco,`Tb/>MP/Fii#^%m@Le`R9:6#o,/q8)t,=4Y73B=AlZ3\AQ#)^gI+Joic
%>S[sNJ8GlRg1VB[``jqOU8Q7.IbI3-+nLm#-(Q6)QQWRmU*^&`ePSZAX-'_3&b:UN_eHR"Yo.P#pJ_&PB#Ycb^bfts5s$7'7Y;@B
%#cT."Z:"+"r?O`>VqrLI!m;,g%,II$Gb;9q/t-#SnY3@MIPOKa.NT(1"+ddG]LMJ_<cT'9+4=q[i^u&KVT@$gCBQhl7b9RK$e#O+
%\FTpR+^)[GA*coB-SamZm_5+>k06Eta5gia[C[[B-,<'1fG'U-%%!>#RLq$L%%B)I,oP;`\]5KUWR)3VUBhtoLP,%jZ\AUnToT,@
%0G9s2U2:ER+KIV+1u<^SXsa[4\>m\_Vul,Z7:_ETO0rK\Q0JqaS4B,/rZbIR4DLdh4Q!pedG"R5O@Ajl@hHoBCi)94e1YW+,@&MW
%8lS@UA2WT.UQO)@,+]`C+KZ150^:d&QEhTC>f"rffV1=R<eU`Bi4T5&8KJt'11TKaIj.bXmbWTf5<g"\Cc-7&77iD/0MV=q:Y*@/
%?LCK\_g.uClb<<si5@)eGg:LWDskW79d?N?h*$FTLHFqS2eed#.:&IaeGIJmi]X2dp&JVKL"A8nN[8Uk]N@ms)l`FiHoha53mYdA
%.j6ZA4E_GC1>bPL&1N?LlG"?;PE98uWr=Rn2/]Wl7b)ZQ9ou,!E<Hs5#/l!CDsCKuGqd3SA#q,5bH8c?jT?j&/3;'o*2Skuo$N7g
%=;S23q]!YKdnC9to+.!IVjST"1JILoUNk1#i\<a!KDX_,>Zh:\nJ@&SF2Hf53g"k*JI+M..1:%:*e0nf9D+\=h[3G'<h_Os,C/&c
%0TP4]\6l<pQl\L:JJl9o3QKcMEsKt5;&THqD7lI=h'F2_<0!U.O5&!WrOHMcSWn&H_!_2Cd$?MKYHHAoihPScot_^)451I_-WasI
%Y3"cp`h8^ZZ:DkD(pTb'TmfG?]uY9-ftL.!'g7ZsM88$R$sP*.&=3T@No.M5\SXc\#Q\l3*b0NW-oejoPkj-J<@r$S^oE,GQ;I9:
%TsMPkV=A;];G]rYlf_pa[%QP&b#]F<0;l)QIea/AqOOc#]l<:JWS<oC>B`0CJRCh4kH3)MHaV^\OI7BakQl;tE4ORaO-?QJAi"#l
%IsYpPCW"hBa].7Rd!]ReK:77:f^P\8mD6-5VRNq[i0mil*lcNH;/hj\XV4`W5pi+mj=cAJOW--:Z@/DX$sSQ^Z?Zm7EYaTK&f2?5
%j1-'6Ub8h]D"GF!hnRun[aMmbrAo!!O?6.L-?)!)aB#X;3o>=heWUZ2QoA04bks<.d=]&rk[_qMHo-UnN+KV`=8Z$]!Ki"Bo!#ar
%r3[H(XT[/k1BL)Nb5ni`]6Z6(IB%;OqkuJ7,ZYe_G9`(d($i_l6I>I=gi51]hOP=CZ4p@AK5oa@"ZDUfaCbZ<:[uKhj_DP+7<%Fg
%n=&-)Md%A(i,TJs$:(*-ejPMdf[NQHXVF/PlM7ni[a>FUL*L_"\Z#_K]]MCLqepNRE>NduhAYtd>jpf)G$YI0Vk0/K+0T"jLSFL3
%k3/a&_dYq:UoMi`pZDrAO=HgsGHh!Q5c8(Y'-hd@1@<mY+`6bH[dG6,T9OY"8\YP*)D*3FHY6G\O&QUHeS+_m$hF7,FTW-`q8WOR
%l<oin?aLd%#7uGCY7MtG.MgSoVC[3),*a^<EdsTTmb^D_aePU4O/8OXf^'$A*ef=b"n-1irT*K4!\\'SqcOF7aj>;n8.IS<q)dZ(
%ZBB)Q=FljIU$3!"js);d\$J@UESst=h$[E@3I]';m)\9$*Wg-UeO6fK/]P`C3sVPd^[N:)$AWU>!L<<Ep4lHY7,G\,ScYY,Rp5;4
%$puWj:4A:UROK*c:9DG\3W*VrJW[3_02&g)&Lc1,H+$YjXkV,8!J)p<jEE]$.Cn)F3->pp`&hI;j3Z]QM+rIVno0_Dd=Tqr53P1l
%QJ>tl>B/Ohp,0*/%$2>O[<gV!4U8#^E&pL_e>&/P@?rSo89QtKZK*@<Vodc9("p/qp6=nA`(AsO+,/fMA?0JTO:?UA/@;bhEi\%B
%/!Vo!$;&5#G0o%gZ+t)6'()eb.5LXmE<1MA1L,Bpe[TEmU#tUQP^qUqmPU`n],a!m!9Pi,V/ArFgTgDYMJ!*7afIt^5'OCVWuXiI
%\%coA'h#)kXqU_%X#DS1;JPKV=K2p2olH?Sn5&p7Z(nApnXD6uA3>(WrSr.gFB<X?.uXES7sRRu*UX1O-d19&1iqW1c)QD(o^_4W
%5,t=9mS75=N8<)$W*@f3-Q(*b=k<m5Xk9V5FH22C61#`j[/ID^L,d2)SKi-6bM;K'ZgKB5V\BH0E6Y:dDgnUr]m6rtWRpQ$S`J1,
%V/`_\0*uQML3V$#?Tj^egV&[0#DE2:iKQ,N<@[D,n`EKT1$#>Mb;Z2#YuA?9-&t?:i21ltdX)_=h*`:>,_d$=`=;c)RKO3iIm(BV
%djT_^ltOW-b1<$\nnO\iQ[Qlla!@MH<8X0bgZ(K`Z."V`FR7f:H&B_38<N7VNH.FSAjcmZH&6J:=4^%U1ico6ePd12M:b0QS_/iK
%@nLH*8'4rhK`ckUbQ8;TY,]6Yf<7E+#,0am%qm?H^6kX2lS19c4\Smc.0qRV:HS%0j_;ZoK80m'&=k-il8P<6diA6oH0K&CK/(%;
%=Pf6$N3s0S?IRZn;U:3BU@aM0_G:nskAFVRr9AB:U3*ee)&AgMgW?4GJsc77BDa`n*c$<L?*1F-jRKHJcHWNZ>sQJN2@-`M$cBoC
%<53drA0uB2MO?piBl6/<`6L9L0#90k4;^0ME]^LjZuI+i<H+46<(]Z]44bb(T-A"0Y5G!qF/Ai!SAl_u6ujLREQf_%.$Xm19FLFW
%'*4?00t("?oJ^l\VC*86d_I#t?YiJW0L8M=h[94b>?mnc:*!\VT1&p4X?\)V(Lce6c\I(kWuq(8/ln0kV\/l;30:<KJ.l_6(5mOG
%p&0(-rPZNEdM!K+d,0ja:6o]"I#BL9R#jO[*"_RJKu2Qsa@R'$QQ*,bPLN_mhDc"H@d:[fjgFI^H^ioC<>O.qg1D[_rjIZQ-im)u
%nG1`dL&Ua.n5WNL8g$3a=sDYRqm^faE6HI>!@,h#cMh"Yd"s\cQ8WHI.pFn&nbJ/JN3LEL"$<d:onQLC;(]B&'0CD^$#M!llL87&
%6Xk3L$Km80AFC:^76GUtR_2FnA)>,ep-BnpAt$&Q%s[BL"u\0&7.&]Qc^SPR9O+D-4)]%_GOCZ'/"%iYook.p?^g=L-V\et'2<N#
%5(Bg11a^R2&Qo#j`)S`4VeYP6-ogThqPJZYj#Yoc?a#!p&Kee0`B3,&#l8!L)`quZh5Z1,5oWPM:9l?"/)-PGqms*1\rh;SabE9$
%BYSB(btM0!AX^CEQt@_GXsD+,"^&u96Htk!mJY>q@rPCA%%#/66<Gp"Eq*b'0C3''?FQ,`Z[R:$d\J!5O2XE]q-d)E:B6KV$*dls
%BSuB'lZn;+o'(7\lPo2Xs&SUr89NmL[>WR4fJ52BUX2U\.XU1-=Uo0afq=\:]_ja^2XP*ngiP:Oa?qT0_MESc,PmQ,bZe-^M)CIl
%q$J=c%bHVYgF&PsOtI@(q"co:YU;Bp>9sOoNoI!\32F#)ZYHBW,;o=RqDNt./<YTm2-u02*ZZ(7&D\HT"L9@JES7YC<`5b5o.FKW
%=YIn!e-hqK>P6M+FmT7YS`%`q%M\\@\N%9LTcTqi:#E]'Hj#BroCjJ1WhfFOpp&^`=50.L_#(u-[J]?`ql@3*i/Lcs935SA9EaXA
%RoQ\]]aa)raOgTs14A'i[eY."$jYM=M%mjeSWPFP1QZq9b^sT;>5[HULBE?FM-@7p0!UhSMHR3ADt9jWa;!]Q2m"eI9I/@"(,ON?
%V85cPPW+T1r[4SWe\GQ7TT^^*NEs`@eY?2Y!A?GG1g)%66_=7^)/J]OEtAI<#cJI3a[:9+)d==%r95r!3B]?'_UfSm^rF;U!cY.M
%chf,0b]FhF<K*[M0Z/<X$s+bAH#Rkg8_0L8WT/L=g)&BE>q04^Pq)/f=<>$BG#n9oeD7-2^$<Jg%O=^P*pL3T=QSV3`UPa0PK+E[
%\\5IBnm^Z8f/24M:@C'aT6^:h!#+7S*p[oAUHA1hQH5<NN+3rmIIl^L2>h\I*_Q@VfEXshA*iioZon5C/aj<WWp[`"X29?GQ]-pW
%id^sR7t=m>hj&&B'83W.J(dtn/i$""fL;L+!1FOTHNN\piG68LSPT#d=n;OHlT]=tZ-L,Sl!T4s?0!e,XoJ<kBO>E*28)uG>VZS@
%A-Vc-3P(Z@cHA>!>#nZa;,lI?j@,KWYNbTtVfDL*>u&oq&MHP3'6Ur6j/6T+Z>`ss6`M?1XroA_+'jtI?":",(/f7AU'[rj&<[0!
%_cAB8_/3=R?tMhE[JU"YSI;FP(mG+%eMU35/V505P7Z/!?#^$j4X<\5lm`%=S.sBX_R]rhC-7$GckG>i\e5W$)-c`pJ7%(@l;C0l
%MZe4Q6]/\NUeq92:j<JcJIJ>?:_hEq8K+[&QUAEaY^UU`O[U+YLYKHMXYP"V7#j)Q0ED`&$AfCK)&H6bn9`97bNF(T?SU-%'$c<-
%XHW)l6T=32oTs]+7n3!*,bXK*CH*3_"LfYJ=-7nDr!$QG)@a4`XIj%JW-+UfWX>,4dMQb!0dQ#;,\IfS,V%Lb]4>%TES:s4=X2+)
%Lt@05j/eASTGilUZ<8Eq!q]Ia&SkpF$Y_B!ClC7(.)@<!f#X!q,-h3`,s`5:2bm2g$-pUI\Z:^27T"\gP!70ZpD!Ik1XN!piR0s?
%+(-?"R#E:*"mF/D]p=2qP!Uuoi'S,LYQWUXpgIiL;Xd?+1>rM:!6nL(S"KdFAI7kE%n38#!JONK!KsE1VCKk7^`5D:$<a)Iqdh+R
%+?'Q3M\4o+1l3oU,S:Z/U<8o-O>kT(1g*m;,TI>Y8.s>`L)*cU?JrFD/#8##'T%uSj$6o']H#9$0a:Y[#-_VM=@`F'e.k8gafnZ<
%6Liu6+IE?lYqLnar$JOD8<?9r-,FP2!RLsN*!h]QJZ+BX</MZY'nS&/"3:pc"9DL+=M,op(a>$iMEk&SG]SLf+?GsOF:geK;$X?t
%;j!lM#ifW^CC8f[e`i43J3n2fIasqJR)B7Q.3O6_OWs@MD]fgOOc%;bJa@-[WPre-UWinm&(8^"I0OkIi$(0Ik&h.[?'7RD/g-eg
%(kRQm8l"@6P>bl='G^-OC5T4uCrO\W6i\Nn#Tbf/,"FWo2GKl>5YV:$$,-K'@#P*1'`\_TLF`TgTlRA48ONU@)3h!3`$Dk9$Z%8L
%L:ih*OA)_Y0C^2#h_60E?j9TIBXl0*4@Mrl63=RGcmjjmIS_:e-)(iC\cD:KaY9kmArojW7C$52?6UE:#T<pTj,t*]'2NkMUIHD\
%d?@BmKF-!8&Q\BE0NpH<U&rZVWllMfMCaT`.qfSIR:-+#<>"1:0s71aRRGX1'SupHatPK!Licru#Br3tHlO*;OnaO]eg4eU,`O1S
%7f`+3pn@IT,2U:WfLn7QODig9:Y6=J#FplEN<k,j?:6)o%U&l@NODHblG=;;SJl3.fr$N]8mB*E;.AR1W[(Cs,&2]6J1=q[&jClS
%'mL0^,dmcT)<V0tcS,k%7`[_]^c@KK2K8kjRQ8^s^_<W-^ch7mACLd>,Gl0B#Cg/9+>AU/+pNE;Ym#;>h@^l^3([N),[cufOg%:u
%*ZQM\HR]:02Y!I)e1OB$%'9"fh*gQ*^_MCPd3ar&=G[DKKWX9R;[8YAIDKWMZOj)MnN=<r<+q:QEbHZUO[Ml#)K,eMYt,Z>TpS.L
%)Fijh)*JI3(1!giZ:8,]`:46?5@$]((IV!L"kj;1ecl$`U+VI#TE.^$rp[?8Ynr.#"Wd8r+X$lM60LV#,pN!F'GO@\)-*#3!!9+"
%ZnLXB,*Q_lN4_\*!O0k^UepH?d>Iup^k-?$1F*5;WP3'0"Vo0JQqS]DN.Q3jRQqI9k@dpC1sjU$_&,[9&m.A+-R[8A&:JY,Hq9r#
%'I5sL(80L$<cGc8CZT\q!`D?n%&8Ef+\eDB*].V$YYh8e%_E&j+P=Wf%7WEARhfO7VG0/kRfr<eU<ZpGQ(Xg!RSFeI4$X?;SRJBF
%MF&O7#WX^c!'gQm'hj1aX7A$P<!p3Y[!NE3*JOZH2BaI[QQsm&8i_qf!:0`-`n[\nX"rWY+ZA;S.'gp5A-"sb<<Y`W&.8c81b'8/
%/S,21FG2]'#ielUV+)+%NTgVP'\A;lW5qpT71BY=O]n@>D93QMe4R<Sg'U<Ri!iN^.A7H?/9(?^-[&9b,%_NSTm.J*K.(5WMcp@5
%($OY-O:!l9bacj5kom&9Nfb^7&03Q_J.&cU)&0U/+Mr2n)mOMhUeR)Q91+>-&48+GK/l=5UF7<^8ZZUhW_kf6gHB3_o4X:]-/bjK
%USS+2"t!!:QAsK]bL$Bk(ktBkTYiR(#aSB=#\rQ4'qO&R6"`Y&"C!6s=4)k+JjFLLiX1YhV^f'9(HDiCkn5f5$KQ058Kgt?9q]d!
%gTFJL?n8GN`!N@tCB8(NP87;f<SO4GlGtP*$kV2)m0]ShfRTLSRc98u%T9UImJJ[4!%Q0Vh?(\K/_\>r,&7nsFOFjH7>3TjG_JkR
%0T!/.`[<$/oKe"L.[q(18H;1u;FE4TD@lDpDM9>@Qs-K#DHf>kKnJ)GXN_Er$0e3S,mdP(7N*Ic/N(*@$Q)<+PaQOB<".SOZqM_V
%"E!(AS]7+[;D?o.q3OU_9'/rqROQ=F`(NK>;uqVL@&a\p5U@9c1m)%,pa1qS8UuGq49gq@RukN:F>t"fAI5XY9d#*ed;u8o<EF`D
%.;:)bVPKjh;_Nt8"?hj.Fu2/[1c3L$iXhDr,VK0Fn//)*=]d/-Q56][-EKt`'(u8EVeENuYUg2]#*<ec%h)c$k"sDLJ2)_2&8)5A
%PgF<1Y%W!7-%[f`4?JES7P9@=TU_*!M'VMSBF4sd$jMis(ec;Ml@;kg54fRDGU/tI-l^?B0\W5#UX6f2o[R&<"bUbJ9KJ$>J^$SY
%0^o(X)[8:Q$EVOY<eZ>OZmm=X&iA@V@0BBS=D3:g:1I#0bhH'[oRjNnS1)c]?di,@U*6A<8Z.-47"%[Zp)UP-UoW4M)/j(bdpsOV
%&[W/&![Q2B*E68D>7>1u8dVA)d/f_YPuB,78PkF(<&Mrr-nnF>]Yj).U3tAl:*cpI/LZ:-.OH2^M^3`dfFC*3$9>1[U_sp2LOr8(
%mA`F"[fl+%bT@1]Cr_tU<3\+lFHn5[@d"pWj.HLTe0sMed*uM]$"fVd9831-oPD1c*2^k'j[!B5T%IT#(_sn^U07[gU2@1Y;4"'b
%FpJ:X":5*+;`UF,BgcN/V.i8M9c1s8W)9e,6,hn,`[2HfVl;&j%+Kfp&n3G,$n?99[6c#*,0+^M&[M\0GVA?6;5Z79j[s^+!>\YB
%6PWYm!E04=N^Pl_[DHlY6fTAC/*;(3!Ut]).>-!]W[-!3LnB?.191^*+!Fo'W;RK&S0B,uR&pQ=;b?of)G.&'`[I3!VAUtC5f,n\
%$lWuF7>]U#TW;[WW<uGE=>J-FTh3j\h)30`3%6Q\rDZP/d#)Je#\6RNW>nC3eGMYK+\O6I@-D,r@$V3@!I.q=e[+K16%iq6b_%XH
%d5#<;,#,Y:,KGaJ,si&Y8ltAT(8ZTSKf/)"9NtL<',?UX=X23(=!/t"8\ZBO(+Dl[$o:I^i.o=X3DDh_Pqb`R>(S6BUUT1%Z3h&X
%0@CMe_(N>".s83)a;L_++AiJZ3_@b17;!LN.O[ZF,_Q(O+%"*V.en7W<hRXUE#<%s0OOs?M\VeX[RgQrW5R@sHA$Q,C8&l!/5i:K
%Ung:u.FAD6A6)^oOu:32Sq)i_S<0\M-8W%Ad1T$>:(+G)8\rO`p=2T9`%^]-d,!t0R\I[A64d"G#]lLfS"iT<N&>iT@?$_7MD!B5
%(k)k$RPTGH.oQVOk%Jj>7tJ[4100/Uiq5#_k#(n.eQ7TW`sd]g(eONlZ`@$##)^j.fI;\IoH*C_^c2eQ(`'+d<FjJh&'5&*BF=m^
%.]T:VN<pZ7.M>Au3LQ,=Yt8U('!9&Z'?_k^J1#$@7]/8G^bT.g;^GHV+pBu)da:K1R=_GSZmUZdD?H'U4VkV?>"us]N#-2>SHROI
%0u5bqV#Ea_0pBDW&'-$f,VYOh7KN][C'q&FLPikS9L*brk#hm`LaOms7<g$jm#d-Hk6$>c9jqJ&9^<e-F?sA@&-tuD=aDI\\.TJq
%l>k:L.a4<TK[Jcs$Cutr!6Cj!,=,ue#sAVH&<Shi$8'5kA8;M]e5-<ZSRcsr,X=fG7?o9Y.+,70"pP^g^&m%!+uu'IOW*F(fKgjB
%1631S'\$Fr#/&GETdK*TUnEABH\amdGq/;cQ3,6)W](oSI$)Y:j&p],ai'?n"Tcl38H"Wf6kP3X@oc3RHC!Rt\Eddo*bjVh:5ZsU
%&<[3Jg)c=u9qip^?'O]o?W<HlPjL%B;Hls4@R""Q!)`nWS_@C34[`YTo="&JC#'Q\SPB0i>!j5/<$Dc.-^@N*A]6S&4REAE#eWcW
%L$]^2Ku]W6Y".WAT907[plU@TPP&BBQ4ms=NnIR:'k&'`/J,;1ZirE[K`\O<=<3`_=OJn-_^:6$`fT`u]%rWa`Y6Ni)R2D,`^%^C
%R]*2.'e5@f5[RB!ARS$iL4*cM;5Et\EM,OFFl/&91%%>S.q@_&C.i<`5V`mt"^O$BTd\qJJjd&?&=>Fuikn&""<*RMB/,oB+0K%O
%JB!BH`p'i;89RX><i$.6-P0:A"tSo7d/M*K#/%lpW#-QVF(J[el^OnLSN/FjR%+a[_H%P4<!'!*7kBs`r/bX/L[6p]-5l1XYpNT3
%-#d6Z'a]kVcKYHVhSet#B4kP<k(sua2oUp-TE2s1OBoq;GmgTq1*@0qbNbf_SY"JQB]P!n@9$>b[29QP+fD(u?4_N+,;2L9A[8_%
%'ao`6@Q`=%iCIZ]7-4e:mN3W7+UA/'e*TL/UIUUrJOuWkLX8ZQG+'i<rZLX*OSq_]X+`1rP4#Q1/EN'L9dO`i"Nn(TGFY?5oMu]/
%.Kp3GB\K;Cj_#i.`[5Q4:Sqn=;e"a^;O8dEXgU#DQ8+;6c\NjG]Pc&H2+_VI7(]LuE,8_%^D)#n87?p(eR")k%MdGHT%!%2<+S]<
%=XA\5MrtcUW7-`,$nW0ZCU:-Q9S4KRTm`>S+K`4Cb#sfuLhr93pgD>/=b3*m[<0t7L65X<Xl+@WQCh9e=k%-#Nk$3('1p;?Ve/gp
%FeCS<Buq&F5\e3@f#D3/-Xj]U"Nk89RGo\&G+K/F,dkUm=<^aa@KA3g&S^Bf#$52t"G,t81&8Z>!p1=24+e)@6OD3j/.)TFY&T=c
%>=gYBp<T,$J=&jCKG*l&:1b9,\7":td$uN.U'eD97lK)bAg''@d0i)GW#@It![_^i>*r`0DUK>F/&4C'aal^8`omJ,&r`m?q-hKC
%$9'e]f?bRK$7HHeNeL>.CVV-qX>8!jPf2@Y.&]%4,aftfTXl%Y,'>:O\$^M4<CH.J&dB&l+dGoR0H-V##INt_na5,a@#ugPG#u6c
%MPVY^L&`4bGAp2a;1V!-9'!Iu;:-W!$`+M,r=Lre,5'=H&4G6Je(dLRW6Q^A4qoMB@C_st,6F;:elNDS?OZr_S^:EB#RX6#&uuUc
%JjeR>VH(-IV<Ocu_=lY<He269:97P9M'B,oF;%ZM"N:g8X?r%t<DHr@?\smO9Y*pW/.me)R*@(t#aa&>A_P'P"h6:ck^qVl#<,%T
%"e*ZgKkZf-mY2JGl%TpME:?Xtg<*l0;Re&Q<p4-'C!ni+NX,`m&RiIPbf@i,fYh9RT/880i!':_h;C1La.Vq'M;;7,\LM<I/o3Cg
%\Jp_SQ&\C.93BQX_VQSm@gV;E#[r<CUad3KKf$'g&oNi;Z32>caNTg#>@&RO`VK_F93>gN"XiU!;659Z2LjDo!6QB1n^tbf*!7Ic
%#n[uF!=]]E72YHlOa8pN8.sBJh9_Ob$&YjqS1Y9tP3ogop#?2o85n#7:K`T</?'!I:ktG"-^I#p,ltH:JbF[oW%r.OXgop77(27#
%R`]6],8!?."cZXr&.GT29[q-2c?\0mOEd4_1Q7KQV;YEd0ZaVDC_B.d5/NuIekrd8K#G3%l'-tR<8n`c2+=oK%:Jt2ngk_VlodQ>
%9CXL6VQfGm8RP1\X"5^$8`uJe61`>@$+,Qkh2nr:1B`$VLBQq+I@A#:kCmf+Co=ViTU!EXf5U0bN3,R^O@YEo+hk8LlQj)e:M<2n
%63*`nN#`g+$.-Oo$XoIj,R)^^'S:P8FOOUX3+ba)%ZCe(P+=12Y_<tf'HK%oObG+k@pelf,bcSZ!X=R!:J+T3[bIT+)VGLkV\$+e
%=;S7ZTJ5[Sj6gQ3SmrWQl@G$LN'hh*3l%[Lg//,XGYMb'D%1^_=g0,!e78R,3'3j472G9i&fs?S$9d4X`]sh\Ot=&jk^aP/BLEI9
%@QLEkBT/IB_RP[E*SOS*HZp#dlD*B<=D5T!<q"&<9?(cYRTOfq[0;O9m1?b4OFWi0U'IlH?*o^o*j[Xk.^-'Y9N66D.-mDZ`+*Wl
%Rmd/7&YtfDAs1VK.N8t/=d9$q)I'J,emqBTrFn5UQos5`N0JFT*qI1<SK(Lifc`#.L@5uXe&,KQ/]<fs?KHo"#pWB?SFIM979>Il
%6tPN]W"ou?UtbPYemb!?-#jns[=-SEW3I[--g<X-7F=W1)%@puNV'J9`Nd,LdFs>*,7K=%]gpVp*\7GJ)M_8oN>Dn\+i"]2),/s,
%(+t19p-D>b^k*rr:)m)Y87Fm6q"H&B>BtP'"d)^eBc*LXg)Cro-:VO.<^K<,i-Np^6qN.Q2,06Ze1-RO:8?c%0&e4'CH%Bi_Z^MN
%-]k+@]uTkW3fb'rhOaffSJu3S))\W(.QNS!kmX8lb[^13S7Q6ZXWlkh/!/H,J/.#Dk1o%=/kS>upCGX2O`fqONIQcI,mOqm9P'5c
%,DW4>DKrUW"='`5TW,;C5[(BS&qmW^lkGS\Nsq$r=0[k-i[9n"">ubTF%@ercaa1`%RIO:a[ob0_l?&4W#<Lp+iU*HP?N'L$6F0m
%Wb`@9L:T4KTm58urCM/>hXjeHoOeV\6#mHA(Y#_!-cb8P;JFK=\,,,lX_1EKI',I@B2E.>%72_-&Nl,?QZ*=/co&Zd`\uO9\Rf\J
%^p5-Nd-)'QNl=9!/r?BL=FV\UCYUHPn5LDD2p#bWSQ(:,SiR"h1-)n+;)$ZLP"EV(IZr29L(Rhb-$!$kQ0mTb*'F?q:6c3_ecr27
%M6l+_p/H%h#C"JW<Xf:2-K[`CRe5$1Oq[%[!JrAsgh@<Y9!FV+6]6S=dgqKkj7ZJr)X>)0A((g7J"(d/0a*jG@aKk->k,WBXAY0D
%%6PtlVZT<rN4Xn^27-`u-ugHS*US;%G.\#:-&BV%84\II*i^,N^93U9DrbFA*[T8Xk0d'LAYT0'+isb&A-%H/5B).;doj%&OFR]1
%&\=WN(>1UFL3YdBo.G#4441!hN>DcL0%mk9*'7:M8fHGk`Z5/L,7[tsP>E0DHC^s(]L4l,6VNGnRAHX@NZpL=TV2Zg=\$*(YA*VX
%#GeB&&rc>H'nD..Y#7'/M&rL[LaZ-==Yq^>!K0H$MNKg,0%YFS3Uqa+$CTCl0u+noLS+nFET.tKWaP'-0;qMh!hmeZ?Opj(nc4I1
%bUMn3+fY[r=HUh'TSaQnpacE=]hZ&XOb,hJ0Zb:="_d)_ktmoVN^bcdqoK<^*)9lrJZdAQ-&uI];dH+ZBd2h(&P='>^^-0V?l!9A
%VDD]RJ]h-Z'0LO-OgIZ\U8-st_La%k&G`T["<)0e_5IW/-e)86pRW"S0=2[M=-<N\p@r!Q(.FHNEWT(V_d^"J44^@X`)T24ORj)e
%XB.\WY_C`d@1,t:K7K>*H]>gk/=NGr%lJ031Qmd97Qd._@)q5&=Ae"`nJPI;kr;r#&8\lOiD=H4r3&MF3%[p$Hb:LRCXhQ+[7F&P
%ns%e4#-'S9-u37e--&s)_!mI!H$gmL@?Rk%%?!V^>/nQZkkWW2ku\=g.pLO8Cq0&p:i?qf()=QC!?ppO3YCf0&Z$jfgMpkpfHD:&
%&"4U;66#;tTZ82`d.,&^8-uB%9gF(]$hIX9pJZod@o@m@rP;!$it0.<*$3s(N+I012MadLXP&M6;^EB+=?XT8T$S6G(`in'`Xpsq
%_a`qQJ2!K!#XIUuat[QV<73PHZG1S`;k1d*?h3(8]Q[#t]U**r0'KC.+9Lk>;V9H<j$V:#De\M'*"]<:#M.6K8jj+6gq>)UJFFNd
%"rdp%*3rM^_Kd&&B_;3,_*ehk)Hh%OgblncF+'1\2=qal#5>@u.,sAHDCf:mWh;Ud?q>%i)EZV*P(sEF$7#)"#TP@*5oUlk6#kfp
%!Gp]a3=M#aY#UbuBX1,)M<lK**XmS/_BkAIFbR8cU:Z3bA9(Q\>0-[ol);rRB%Y2"+VO=l)<IkbMsmBL5>ZmVZg+pk/s6>#3c,T#
%R5X8^-Zu*`GE;r`\aUjqnYR3c,$L3DnLU4Zcpe$DM4uK*-[.DQS#;GcH5mu0,`Dgr7u8NFd)ZM]F_#NQ>SH@I,SA9%g"OH]$mH;;
%9jtYW(o#qs+;?>_e@I>V6-2S@75iFFiW<lDIV?k0)=RY4?70-l9_tG@6='fB2YpFAkd)njU8Wm/'QPIJ_dH2/A&toBn>]4k0K0])
%4t_AF=I*gP7[Y5s:pK)Y/#9A':E5H39Ko]ba=E6>,:4"s#?%YO3;SjfBot-"^h)Ht,3apFG&39tNVOu_SOLRgU^C<19m(DuBI0%G
%V!<oD/*<i[jG6!b$_E[$#`3Ygk+Ul6'"6/n()kjt@B@BKSA<QQ/4<tU4jp08B#BIYR5?UL(0.845NFhQL)*-c4>_dE1uCW@VBIal
%OaM-MRnpD&<Ml7X."sMHKbe]V;^<_T0mU_T?Eo3L@un9rjT\4*Os=m#D8=pFF[IL2,Z0%ZM('1<*8.,8RYLSdp*MSa;p>5;)sPff
%W5b@+fesD]:oLh_Sg%$JX:V*hTZW)eUX0d^G=hZ$m%Is!>`^SJ+8>eZpFX"C*8,IU!W!$r"F*g4]H9N*=p>*g?i`.kF(@,1BZU6m
%95)F(q"N),fPs[BH`C2m,-+-A#Zg?8b``n^)6k9!Xkf:DV$S=VQ5b<c=FF1.^oBeqaoYT->'IJq1$&lQE.;-MaQe<Qfk]&^8Ye0[
%Ocng8WCUE,A'1>%aEj2I;tHN5LT+%R&:%l),0^(.6/=kKalm^e%uci!*se0kYPl`:r8HJiK7(FL_-6sfX=M/^PB?1gMsum7nJrbl
%T#!X!7Res$+o3[f%nsJW@K^ob"7RMoQWATDdFoktYq]SrO@:*8Je<!VfJ+fl+TDF`c?IO*5=e3eb@&,J:;"$KCFGN9>E[<gI]K>%
%^^.s^(,B:U3Fm.\$ZknnFOM7llGk&U-X9#sT<CX$?kO_M>`a14>2^J6FF2#A6ACWe[ma`cecrk?odYH=1bQQ?1]m4/8E$U7m<J!7
%2faoN;#J]1^/;d*I2M&(Jp0&YOc)_7>U]n8UA#hML5Bo*T9](`;Qp0u=\Lu!/4^#lqE!MB`RlN209i4]^%cC2ii!bGn.GksA+:F8
%C\#!*F0Wf;_=9\hX?>PdoQn'!!*+]cR67K<=rnJ?(aj)u\/QQV4#ci7Km%=+WL(;%=:!E)Z7L_#50+^K*uCmGQ&rV7cZ;@RiUuD^
%4=8Pf?ILQkU\ju8%Gh1CP>t.O^KZtGq&6SGD.G[.70Jd;@L-'fLAe%m1gi`(_:QD57A6*fp"liI!6_In"h*!OG>-U($Nrjl'D5+N
%4^h2^M)irK,Jm[uit)@=XTb:0N0,>m)N.N:Ms13LJpS=il"2n#GKks^UiOt(r>lp@+F$J6,i9$TYQ&&RVt+RtK5`q\31..tq&7CB
%O*_"Cmf`XU%^idNG;R&l`"#>olt(K(_:(K0"K>H(&,Ou\nLATVLcTq(Y<$EGoKE.sXCS[&SDAcGWta!)C%-0e^B$Y(60,rEjVoM3
%N%LY-'F-kD$(C&X8R^?a_=7&=F:!n6_:aQj_dR#iCY!6m_,S9o:pn?%(4(5"KIFtQBGV#/0H$dnc$%P$2$?;]?J"Ug`if)+@)UjE
%b/X1[3-JN6!5uhqE)hj/+k)4<EiHn,=&F?#4t'ds22p7S)Tc+@J2'`rMt"Zb4>q6?6`H6R;4$-GZ/3S_Va2^gXA.5]8gN*3YiQd-
%H'E':ZRN87K`k6]:f9mj[`dRc1o@R#hBo?BY5q!aIL]3ii$E2,9<NeCPg2i/"Wlh!eGJbL@a!*SXFBIkSkKJFSDXHYapZ&%9m5=a
%:`.R]?OK*-1QM$4bijX/pq6J2T!bSFl`0IM1G=5<Z:_$kb4C^_Z_dO"bA@c[J;(lS,&cS3J<rd=3Dd%++#-&>S;,l1Ze&j`\!`Ns
%(oBYM]S/A4B$KU-[0,/Zcj6d4TN_QgYWrG\]*P1gbhXYk?!k=6&u;=Xc>2plBd%[.6-U.8a.sf1'B'0&X4p'<4K2r[f:)<G=C)eZ
%OGEn`:REWbg_mTBgRVMK9?SV):O"06arJ=*pc!g9EBD=q[C[q0Mgs)$*b,7(l#nL0hbh<V58],fh5G5WG1>@>pe%`^n;Ch"n[$(H
%^D^2n[k`kd.Onf`[Guts*n(<(&#=@9%[uN"gob]Lmgn_=es\Gl]$_8npO6(UGa;Bkmcb^5pFO&(l_jW*.GZ^/Z:,r<2TgpmMK=:t
%3*:5):0l>WBlq\dX[O1+_U>@*XN6<YRu%UnM`sdSc=d5H)6h%b9\Y6*m3%L2!]Og,@1u@T*Ytb'D6+-iF;0Uf-p!PUMZnddc]*X.
%l5#bmHLb^p^j.gm0rZ!eZ[S"C:=:.R9;e7n=pL?J,QM5b4:Br2P6G'Ja:r%Pb3(M6cL[pi,kbcA.']=7Ta$fNd`%*/]\_RhHcL)*
%XPB$*'1nm&ks1ZQ@S7^t0&>>/d`\R;%XKo.*j]XqfM=CBY:2P<U0Ab91lOhJ@bJt13/[?s(`RIq9#]c),ecg`GQR_[Fg%qOLXd6V
%&6qMDRFssoTh0i3A8*_,Kck3/-92ToiQNM=2HVT0W+h;Y/`]JA1^KWdiH4r!]_/?dcr1`*n"%m/$8tekAf25dKf`BqCMK;FpoP#>
%U3:.FI(kqe%)l1+IUT'4$3:hmhG9/29'S,h)*qTj;2VW'B3[uZjp)8,i'("g:`>J[TV^:[c.a=gX34iB[JgUV<N>e(Q7'Do@;5Lb
%>gp5u^fh.0L6?%=U`n`pl-LBE5It)Aao/'5\dVqhj/&ciAlsjmp8b$[`Od'bV]&`iaTPlnbSsE=0F=EqiQ5&u3J"_%i30rhen.[*
%%nUDZIM;G5\LV814q4`Hn.eJK!h[g$hc1/@s0Tq+DbQ<.q!^Zcg>R<9f%Tq>DWKUKR4"+X@3fTOMa;AGO?3?3p,2OBnDUG?O&`!r
%M)/a'=OUMiW2CuOLL9k]?4SUC3[\%)=963XLUY0D/:8j"GduIIULD6nc8+W4V.jMg_O:(LgfChqg<\JQT9r[<0l.!$QRd2s@2WCu
%8$SoQnDe\[r^A;7Ca,\8YU30oCL=4#N3ogp1RgC/0_k4>)j0]_&P.4RWHop/MQ#ChN]s9jpA'!BEdco;JXi_+0/d^_-GnhPBk6k?
%&qEES<;X^uoYU?0L=\T<J3gW@4BtrO*ipBdFKtNo5JP6"l:N>B_mh8%V0)otIB[U69P-ZmNmG-b'>Aqp*2XHLS^jb`$5INkRC%r'
%#\e)#9'qZ(=QTCl$c<8UTsufg^]E@Fe(XmqZ9/`QAQr"BrC;k_/#>%;f6o`VTBtOlH'.?3,70B]cNs9BblZ<<;JXn47.qXk8:$EW
%VABt4ojSLdU(COZ7nf>):Q1ZMXTE;Q(B+dl2le/,0Ip&W_+>clX<9Z5RhO%STVFPN+;0j)^d'p\hclcg&%m!T!g0#[;f;^^_Q%'0
%X`J(q.$"Z]$NImeeZ+5%(]h`0#tGhVZ_>!c>7oPcJ:l])-b83F'`e/`9g2iF`=P:&&RdHd$(%Io?M!3pU&$0f/s1NXf&n8omb`6M
%X1Vat2FL)6A-,Z4GD)pp/nW0*;^ciF\kKg,&HGHZ>.*gmD?$nJ6NKa_3!EFU\JZ09N`bU/n;;=0$F:M9M:HT_:WbiioL5nAAs.R.
%hWUF.O;DNN\j5QsId=<sLIKQ@oOb:<!\26"NStA(%NHqYf3i&FrRj6P<!M9UJ//0Lnf7n7,Xe;5@e9[/kOB3\/`-+,$?TZj?jHtU
%(p7kgVD#6mDo_/'8QM!(;u`rnr@<?\4-]O03;b9(l3g$:$N9pKhRq^q<ZS@'`=e>3l$r$<j5e-F8;4OjE-t$G!:+Pt#-u&jJ8p9e
%BVi?^MC;Q17tkd7?fbOkBk_dAM(")$Zis^mW?DXo/bF?B0]`Z9$RS2J0#uB.(oCc_mFjO!)Qn&40gRlnXYG#K;uC$r^?g2rS7qrh
%#lsP*SBh7]m&D8OGHGC4Aua%W!*5=q$Jc6PfZ+4pKcL06SCPX&<0TlL&O+E]Me#&=C![,j.3ss,MsI$#aQX?U[NNS_Q_'\tHnMW@
%+#in7#s,k$EMq.2%T2Qs/%6,S#)S7=#bf9t%FJN'`LscKQp,%inj1?\Us:tLW5Wt<5R@_>S@4b<";mT7WQIVgYIgiD"Y3IF.DcZ5
%<p4f^c,F[i8EB_8WW%LJ-f.D_+dn*sM#MlO+cKV[@,#PPV2=XG$QBEME5%`AKgd2+W8Y'VO&MJ@Kp0&60b1rASI5d`/DnM`[LKsm
%2\Y?N:N/1p4f:'=Fj2uo;_D,\^+^1R)e.csFWg*D#>?LHUe(.>2F^fBE]&+[mu*hJ7!tg/ET4eF`1jUqAO0cBTt""bK4,f7VbL%]
%ZF'$u"np1cH@SDEj#;OKn%f!PqgjlW1ZY.nh:l@=r!=qm6%-+A@1&45012j:>>UoOhp0NaC=(pM[1g;I_2egGpF/tUB=o]Ra^-.3
%8[]JN3YpYUYj-id^67qrE@jKh/5'!--56tjE0s+^@*tXg2mA@&52J'($EC7$]&@;tYs1mn#^ABo3l*hIU0)PQJ/1-$E:FPu1@\Q5
%[%fZ].Zk<&5F>L'>=kP>_^&h>9i6=o";g)qIAiC0XtCCJ:.Q.t9JmuPHnTI4=l+jEm2DR'#Y\W(q%tndEk7q4UmmQWJRSc5P``MY
%?2t%'jdZPWo^h5<Ho*#F?Cq0Qk!U6lLg9DQWsnbICLors/H4#9'0ZURRqf]3`lm>\XI,0<V61m*Scor<.Sh:WaIihd#`U7mkcqbE
%-s/p5.$J\9>U6+]MsZ$5b9ma!R#c6o#T$rc@fe1]/kk\.IH"5SEumI2o1oJkq3p7/o7MV?0?>:/XjLT+p2Y)8Ot[M;4`_K.fZl)M
%(jXJ,D^GuN;iCAT:9+cYY'./H2kQ?dZB\7PV,X_'2FFP0p9S1R<bfhP(Y80`ENqIKq+4SSlfUcJm\<Q==1oEkE)L"/%Tj4>at:KA
%@9.>[6r:WW^@,:*)p&LJ.ANEg)3QN=%5CQu@Y)SV4-5$OrT3HA[kU'IXK0K3S]_'5!\3g=@n`*,fJe%:n3"_XEc7QDk7qa7PpB/:
%[qSYq#^SJ*&jE[K=*"]AO#Z/ol#17RK_LR+Ck9Z"]uW`=="`>kZQS$3`%D+[2^WZnM\mj&7g6"nmc4Y!(l%ZtDiTA\ebP=/@HN^8
%Y*GNs\9V^c65_JVAHtoI*Q'-cZuW],Pc?LsNnQY'ZB#HDQ[fY&0sth8WA'(Fj4pn&<cCp?,Z8fI/9u,>PDQ6rV.7-12Qmcpb&lTI
%?5iX=:,sdDa9E&ka7q%54ReHP0,tP\51YSB:Go+T5UaXtIeh2m$a9S1&do66+91/R9gMHOY6aY,`111&p.Hu$24!EO0b,3##]'2H
%N"?jK90YkCT>[mCLCG:q`E1DRM/_BkE0'ufWYB9@6"cH7&YS/aRJ!:dg#XpckW<U#*3J*_]^Lnj/L(9YC1k-Pg4VAnn9T@]7-@kQ
%a.t3Ml+8dHg,s8@U\iph!%IA<j)qIRPC4S!G\rB8hi/ERXWs6U`_29Sn_SLrE=absC:q.M9]$pGH3%pgN7RG>hY;j2luD7ffn0N#
%\p[O'XMn?hFDSoQR,f_r6PAT8,JL74E\aIKf7B6=3n6bH_@0sMZ>OF#[+Gtof`FVcKeRd)O_6WibIX2n@(ROG#/6l8T'LF@XC&-6
%2!JZt3ZD9)`$^dWK-,cZ&]G9E[]q#@Lnr^MI'TUnl)jIaQ4oRQ-p";dD3,_1,]+/\hg(U=`5W,9Qfsr(LgM[c5rdfp0O'\-#oCko
%!7ga;/-q5(QZW=iJ><AVpHg"rJb[hnTut&>9:;Yh@YlC3lIih7<F^=k&R&.ei\pkSf:1Cj;:"8=A5K:9Q[dU<^RK(TQn$c9b[M,t
%%(8D\;)ct1823Iao^0G*3W-M4h+[`HT6[b?jS&R^?,a)G?a]-$4Hm:g3:OTde)an#lPG--i8,aQG;mB_[].OS0WD;_o*iG3^-BIX
%G)ekNP/H+,b=nVAbM>kd,CHh[m!O;fY%$Ym,>=:k3,\3Q^tXM;Ej))-kIGa6)Y?@DE:&MPj:uIXMu/BZ92d<-R/<P/nWBgt!&OAb
%'O\/-OX7g8=KrW67YBr/JFgiqWq(J)P"/=C'_\Lt9PA2pd^GL:r?\o-it^TX?qmMnVacnXSlT_\b^t3?&\/'0b<?A;cla7.g)&<P
%r!@1]Z9[iLipGcTb)H>tD*8coTr\nC?4uII&6HEFL^]gJT`c]75K-4L'Z?'$9X!C"6**+@XNRtU-!j2FqV&i?kImsfll]CH9'n=3
%rXBO-@@3iu<S<U6Cl?JP^7m:2B&%S@Cjp(!nclAZUi"[64_^aB3VKSdCm:&WD8b1Ll_G^\mMM*+ZYEIlXmB2tIsUn4`+%!3n4?$0
%:(2<-#:''o\[]g-cg6Qm>@@M8q#^?I'TuH($hRQ.Yi<"^iggP\@9_H?\"].SYjS_>FFf9>og4'-E75(pbMGd&3W.(6LTTF`\nOYg
%%4DIETf7mjRYHlbKPBmkb9c)$5c%EA/9fP=+qYM8:Ciq8cPb?`Vl]/Eo5#+%===;o+&ks3!tKc@-V=__"lFAimVTedJE^,$(iD-0
%_&lC6UD)mtI]\;7gDE]p_.YCBg[*`rQ*+[cQg5Rj_`]U?X$@PM/(T&0OdcB!0.VVF,q)'`8?.[sjI3#8i*i-BKKWP3@)q-@p(WZ@
%aA-La2F:=p^0D3PABi.Ub./BJ2W;QilfOtQ5\^AF2gXD]YC]p>;0\b`&icTlgd'@QS=Eq;88tZ#&_?iqZf$g73gm0kOoCeFVSama
%SePZ3BVI&_@O87V'R5lN,IT`Kmp5l+mcGOI<<tNC4/qEE'0U;0@k+2CEop!?""1l8:3?.qWKm2_$78HL6=YK<3#<tlh_ENF,cZlL
%#VM`+3Nh%uMY3qpKon,'-loQ%%R8XdDl9;^@SHM:Sl6:MLrQmqBu`'_,-3t1-pG4)rSPrXa]id`MD2g^m5[Mj1M+K781@3t;!C'[
%'l;#SS8()ZN)I#,UQle]Z:&%+L3-ufX1IR]THsdX]7O)PV1LBPC9\$P@k.hl88O3pb:U5E-.Zop&'`fP&#ADP_Jjt_quNp!DKY/F
%,LtpqSWFsVK6/3'_M;.n9\\E/j^UGhR//?d<!&X_h&1CVJ;'GM0M-&K2;$Vqlr7^2;Fki+cVYAi.CHE.\+I9Ko-s+Ic^t9nkW6F'
%pc1"5<`L^Hdclj1lR"=K8EHG>DS*1g.qkX4Z\kK]eh-81DW`jU@4C8b<'5mAKC^?!5hIXe/F%g9HG4B"/IjY(E+_&]k0C[Cjgo,B
%h82J[Q?'hb9;h+A4#FLoGO-V?b=dQ.YSjNh-q*Uq,Q1SsHNYUt%XrKl.h1\6ED0t&G5\#D1X8gh3F0a&P#("U1WNRY^O#BaIasjJ
%6[G86)$"\`A<iekXA\o<8?D5M?3"O@'=LnD0\#^t+g4mn.`ImA]22XC8W8u_N@[cJo"@%t("^beZ_#^p=sirHJ4WE;Qq$_Wa=4P&
%17[G#$N%n)M*rMj?_YE"gqjWsU>-#d)cEe_Ljg\NgrN1?;&hIV5(50TrF]-[Lt;?32TIH6U4cngce_pnDo51R4qH/?M;V55nE'oQ
%](;VNT*\O7ifb0_rURQSg+Z6P9u*#^<=U?MgjYHjbh_ZnBP"Q9],Obu"=FR(H"sQ7/)+ArhY*mfli.;-C6c\%;?JIkc+%&We7^H(
%UR+nCFeCp9!(Bc3eFf#"e8"UbdiWUYPi5LolY'am-$PQp@A:g(F7"F?\;=7t*7&=t6)U$7LT+'',r]L)q,0#Tb;n]nWf++#3Y3TU
%?d>i:(P5/rXCcV>%#m2Lg]UJ:0M2#)Di.H0Gt7-:-5H;aPb-C\1g7/+dY*T)0<9`P[%*`57^VIB,A)X$ndHKJm+Zeho1Lan6rg#e
%QHEo/dU=oY%Cf*S4lC'$AdG^Hci2V"Bl9"_9P\Di!;Mr-ar)LX1Qrdm.RMO_T@f9=QrB"Va1+lSYt,N$\KV$k9#L^(0%'i=?"A9S
%IQgs7Gt3;'CSCQ8j90r2Zt`4Fa9u[]%)V:](HmbW&%&msK-YQfB.Rb0R^tSdB=-dTE?OshUa\\lJVdJKRcJk6KGjEXXG8`B=BRCF
%,%SWC-gRJ7C+<kc%%=60%W<"gJ`4DoG50KYfp3SCJif.ANS6.'fm5Qqa%>q/%R:LsN<Q=2f[o4#^V=rDng)SZ(.L;58^kZA)W+2Y
%,h2GW8[cjY9YGj?^[<k`m[O`DI_WthPVr.t1-k>OQT;r6kqWRk"3XiaVcYsfDLM!Ig#,>!m^;ZPS#*_3>s:gQC!\A(WC=K4F^hGr
%Ng/]fph*dVh%:u$e&kMi6B[-h^kQ<2:A^'n`n)IUgn!T`9Bc<Ng(Ag3QHRI83q(Fa3!5MI3VlU1lt8D"1_GH%F+puT_c4455c7V#
%m`1f`o;g/j;Vg>q$_R8)+Th7-bqC-(@Adn^Tnb)jN1m!CZVIVhO&>qmU9@-G8XKL?VFaY?FJC/+"<nSL2[tAn?rE=Qq>lTCJ^Al5
%h!_PA_I^F:i+-X/doPjS$E0b-O?58K][c`r&bYd&MMDkk!TIhKqF\,)k#"[Mq-7q:BSFLFnLV*kX%&#\h8s3)c>;o,ME>-Zf$jh\
%TS]_blaQJ$LT!u<iTIQ4%?-<n\7/..0WX!8*<QAi&BG0>$-UU?!l".\L7V)$iGf8],<j3KlnCk96<a'Oc`5<4$42&S#.>UKdg[Q_
%LuEcdQlBrDc2itf9:K*W,dZ1;A6Ca>bm[)VS"$!#a*K,h!edLg8#l7(NN(AU?P%'U'j+3M#eHkfY0rO_XU_+JF0Zc-kKn<%)ij\i
%\_t<Yq/n%e_Ldn[H<02Zg5/GSe[D](+Q9`?[t<-S9S>l(m@Y/CI#4<LTRQ=i:K6'V9\I<XM)XUK<ikm*`^b>F5ZkImCJ+'*>)0n4
%6is$=#,D-@l%Xn,dW%sNFN?&#pU=L',B]"(EfG:$"4`9_CC4tJ_*Ir5,3[b8f&or*5.e6_!g\`rCLu*5]<]V+@N_(I$BKZkmgn79
%?=UGhXbBolCE\X2&^`]*P\T6u0u]GE;]>A)`]5iBW([sM7>6ZMgl87/rF+<]NNk!@4.PK)N&ZcV![XMI8r$/+*gL#;PmK:jO?1mK
%0UZrO\R^HsUXEdBVH:\-)gJo\\0AsDrRSZDK5D7Xm`nPu^1_k)%^bN]cjW/TXiL1fjKJC/,usH-Bk0e<2A3uODO/0[+.tM"A<-94
%q@J[sZa@C#gj["J3`84[eHN6.YQIrL=636oAHK@`P[:2,h6W^(OW(OSQ21%aR8m5&FL>P<'YbQrC!s8N)2<#038uC>\st@A:]"ac
%J'IX'i$Pl&jB#E[^=O'=%NJl(>*WooE3cI4;oo,'%OHMSB41g%q<YK>W<74HHceZqV&X'V^i\8$Xn8^#%IODLAfd>6.R=XSRX4bb
%9_'-SOMuL^)M"3KZI6.?;^OsF:LOb9-9IQZKS8InMg5kn5dcHU!15%?b\/S0Y8'(=;2EMj>6L.iT$r[`h@B*P7J?sc]CP-FmYc`F
%S<Sj5@Ng`$7Y(N,:;3Q`\s':+VCTR5=6,Q\*(LVH/6$8YM5_nt7$>7[PLDZI$O*#F>-W/"B9gHk+Lp[TN?Xbe[:?u]JG7d2bn;XS
%TApr,i=lUS)D7`;^1O<CAH/YdflD(25'\`BnYoQn;ZPk%mo"9Fc\\aDK>IMC*?_J"_oR>q.FHrYkP/6+.4<:1b#JIQ"GqmLhTJkF
%K)&H.BK6rlXM'7]T9Z^%NJFZu:$/ERK\gS\XH$qkBI,cb`S0@p7Ql>"3^q^k4hkq@)%6%ro*A:>9%'_r)H-nRCNi'MjkgI!e5'&Q
%Zj&53loj6ks2ZZ3=*5oke1G%)Yc]MPrb@OE$W@0('KQ&5lt#:PA@M8@AA[c--&'f2[7\4YH+"@VZ4(9->=HE/D&&I;B?dXS4,+C!
%CIb(T![Z.'Y"4@&HG\4^#)HJ%X%t$u,5(A'D4^C+;OBZ$);_Vjf-^Y,5cf%Z>MWta4U*2>7`&)j;ehnA*!F_%l2\<A4g0b?XPNSE
%Qt?\U4N7=AN:LmrDG85+16t;qqaK(b1)3L-_c0B[T6`n=+"/irjTu>7/41o21sTc!SZ5IsHj,]6DHq6XC1SACJb"@S2+M'#DFNbl
%Qm:W5E$e[3oN8scnqLYZ;CGUa.Ea0MmB]<u3D-(-@+l+WVs+`2>on,5O^B^k:^pM=iW&2Y&Wq$F&&^D:r*,O++P'@GQ/g<CiiP\R
%"tc%kC-gbmCl0kK%p[T*%Gb-VCu-1Z5,1JIU3LMMB:+92\SgbN=M6aK[t_$jm`O$7et?c+J#t<Ih-Y.Xi>_qV`#GkA[Md:%ij!)Y
%RuXQ9*.^)981p:pN!'1;-[$Fn^372\C'U)n+9WB@cA<Z]UMiZt2_ZiA65)5p+Gdl<0B$\*_`o,FB+*K.f?kGrVh6DA+[e[6^E#]J
%6'mB2jt^h-]LJ9O<"]J1X!Q%c=q$_/amr[_G,TF<A1GaS68:?u1FqLAhMj?Qi;kfZ'g\SE!cZ970e*PA%P6*=SP^]-A=00[`ip)@
%+IKee/^*B<oau"fJ=(GGEK"$e/e<^3[kKPP-97HXS]9n!F@Qn37#[j9:C\%(C!\>k+:F5CrW6,8,\]1AC3PBe+1H&k"K'V"=%s[@
%:G'jd;9X]+\k97+K%MLs69i=ZSoj,=,tQ_.rLbEq6DSL"djPka&Em<MLEkaRcOPP$Vg^<eAE&WC.!!a/g`Ck*@@.Z;U#Y.p=>b=W
%^qYS;Z1hNQK^"7.=hA2H\=F7(\AeAb.$<=\Y0GU&;E'dgLnRp.3N+l1,GD;G#,W#>>,[eQ4p3R2h1ai+3&`N*!0I%iX8'#g;S+#!
%V'3RC5ti="P-KU*N4K8!ROJjq'L@']K!V!>M,MdrgD@[40_K_^3&uM.Tt5`JV#,5.e]QWDre\0_B%k"u2#_8[=&!s@bOS24DiJW(
%]s>(7IBnYKf<VW:qemG;r^.d7?UimhmfDjcQOPc1b.0W2Td<eqTN&-7N_+E8?DuS6L,#a3*EM79cn\Se'n"G3+OE9q/gn/R:rpJ`
%3&#3ec#kX,`3lu2#30o7h=K)kif*?HCpZ\&>6.1nK/RIZCs[P)QBcJ\,?-'\:a=\r]g.;2>8q/j-7=OU<O6^L&WagD\P/CC4f;N]
%RtS,<g]jY]S8X6[!_[&nkOk:k?`gf1c2^QLg`TC0LFYX;%X-\@P7f3i9JEFdl+u=Cl%ZP/L%ksn"o=%9Ek*%\i*ei2g:uDc=(RdV
%;#(%FOOXCSf^m0]\4jm@NcAbe)$!+E.<jbQIlOs%>*dNceR3mVXl79MG3lb#^HUJ5MVB5/Y/j[KXI;g]pSg6q%]k.Cl%\N/;?0LP
%hKmr_o&($"p<*k"\fhND-N1guFl'GA+ZDd\Ee@8!NepG/#>FNHpfLFCEn<K*,7V&ML<6MCMu_`GZuC$s)[S(g\S6>P1;r/%H;I:j
%/L+TSLc/DGiLEO<!k*)*I^1=_Uc85F=hi<G:.hR%nO")AmJl;\<++Da->oM4Z"Y<@0O70eRXn6q=.6gs:\N$JG"YXC,LAF:45d,S
%hYcmj>e5m0bj\T.YKrYqT=)hh'McS29>(Z17b;Y'W32g'i5*lkTo%R[As+r"X+(mg:"n>&j#+DDhUoMp\ABNU@[R"T4;Q6`?Hr@:
%!<g0r&KQJc_dk;,f?7<kIr^2XaLa"rY.VFWL0ZL$BF)#)ksYpap6a$_rcgeB2Z'>%@JA\o^W\*eFs-d]`kKOJ9^1i*KkAfT3bk%:
%9^6Ff';0^E(@%T8%3`o')Y)*&Ha\o4.fa2jr#VG5<1.tYo)@X:lA/1C\196:4)>51rT*Zsk*A^g[eXI1a).Kprq9L0bS\Yn"V(Lr
%7FiT6Ki^^&pibGr9a_-cA;PJrLX3Pj3^\fl]C!dL*Af0\6B"`9Cq"(^892GG5^;8C)l7P9c(3[sN$b2$rNkd$b23b-XW.Pp:kQ7_
%&,V%b),"YPNZ%^PE['tf4e?PO@oG_DQ9Ju=Om3!M4R#h#NI3W8/)t$:0`meBo*>mY[:/"(/+gQ9Mi2J7iegr.[#T83bLUM\5Z8+r
%Xgl8=ZPnE!OWQ^Q(Y\`ZR<nhcA=TablRZ@J]uOQMiP@7gKZ+*cR'Kqjp3#PV&j6IuG(N:N6+!A._@OMA<BV"'2%O<0FX0Xq.7Fnr
%SDn9m>JPh^m9bk"B3N+O:KGbh@-r7:XC#X4Se;^d]<uknXLGg0L^;BgPb.oeUV."5jO:[i\XZSCVE?=8btU\3]u2J>T?q^;92-Ak
%lM1d5khEsHIsPM-cX&s5??!G_SM#a[5P^TS@$jiB@L(lP9X=*Yi,QNY0P?Y`om3soX^RbZ&Ia&%&<2rA3@l)K/4cj:@n!<GP%)_3
%.gc@@SVt6oEM31XmO]2T,J[nk>t3hb#.kl/d^Wj8'q&W"N8kuhW7#e1%XR.k(+peM*^&bDa7r$e_@OVnmPG5r`jPs^>FS>B'<)JA
%&mXm]n)<iQ'&3Cca@j26S\kjE\#(uWih@T].o7hg4SbH6ctVK=\K3ImCRTbVEpX6/W(rR./_(Q2Ss5t+"_uH/K)olocIWNMQ3<aG
%rWn?7rp&UoJZ9365V(V9pRl-e(dYEGWN91<jtVHW,]bi99prsc"nE&E23'Fu)nusW39UW@Q6k9qLR)s!]%iT)qd?4kIKFrHpU("N
%cV.PkSFSgEYC*7SN&d_lF+'I@(RZdNDr)+SW(KXDW8BH-)J`J\VUAl'/)J%):M=5>mJu-/H9l%+1Y$O9('1S5:fH3fcmm9P!\a)o
%jDD8/A(N\V&t,;F_-`YiAnH3]2qi\7oOp]J7#VNNL__&a7"oJo["H%U'7%(:ZA?Z2#e2W>+A`\fCogRD9Um7[8Hfmm;F1lVNaO&D
%C<7]CM;L`C1iN-DH8&NPSiQ:+&c0hF%feBkZ3T5C+;[maQTeY00`2it!8.CcNo9:33s;XZM:i?N:rk+Y/e!`[+Qe>uNQ"NX*_hh@
%&*W220TG8X&;LDS(PRRo\gul&)sW8d'(!S@J11RY"RiZE'1bEt+uugmE8P\TXku>08!iG3p_H)<0s7ngLQlgK$<cZ1-NTOOoO=qb
%ot=$sTgLmQ.2ERB-87u-CglNn<RNEIq8f6WeWtZPf@[6Nr7QFeONL/[1[MNPn1bNe"@YOSTSSiHN%R.(p+.U)Q=BWZ58[][N=^3'
%+OdU?E2@SPRo&;V3aIXk_iDQOZUM/#?nJZsYb$Xm`@8`:!XT'?4OIhX.f[jl;.4[lF+[`)\9k,'%JrV,*hE7?W@4@l"'nOk(Oi.H
%#h%uNY5fCHo0_fo*-Uklnp5!ASW]N&-2^3rU3n+kC%`R'3aGIlfZ]ns+)m(P5-"9h!h^hKU@h^Gc+8F,>:$krM4sPIW*IR=e\fg*
%92.Nc73`gEl/aNa#L=u>_1Tj"L@X*pq!HE-3j-)G>S*3n\`kPLN\X/_CdVI2Kn5kV5ECZH\*h?F#Z%AQ%-4<TkIIf)QCfc$%7ro[
%:6aiUI!@ZOe`-,9c,`4*>XifrOgkY.>Ersq'M@9VJBAKo^n>5Y>\.[)_$=?c7^Q91jT*8?&V3KTEe0V!*e"*c3ZX/]6@.u\Q_kNK
%&esB,X,%<>(Dn'`0?AXl]9L*A!8Qdj.ZXiJ?kuk+cF'O&$Q<u>/Y=&n8]5SD*br4o,pUo$C@WRkPR+-l)_C[A>SMTH99_'G//bUJ
%e<>b;6Pm7bpSSZgm^G"=klWa3c'8/-#<nO0-s855M_Umi9*N_8mO6`MTbp^pqr\]'iL%DCg=E)n^$"tReO9*dNMED0>)kD+AZ6Ep
%KCAd/_JmKM6)(DQo;.H2AhF)ZaYeB#jo;]9kpE<qq9<3O4i%@O(eqF=Y7%KJ,.Z7(reZ%o&?ahg;*VE2WI+pB.sM\1G,>cplgbuJ
%7\[N48urFrQ$*BNM3&;OP<<]LP4S!^#"=G7K'9aFJLr_MTHf(<J.d[V0QIh$Op(i6"f=>T[T?Fs-OJSfRCt*W.P%OQ/ENj("f^HP
%Bb4>P?o$bql&q9IAX%tRb1h#:8BS1.gtQXS*?q:i(L2HOA%4M!7rrO/!O0<pO>7">K/LBu.JVQO5+U6fP89iMZMDVI%&g7r>oi'R
%+b7C?@bVSBK3bo9f'%E\MR[B,JUeqCkK"6Jc2mu@q>&fdd&"8N1R9h@CUb-C2QoCn_c8%FELAX)U!R)F>#.72S`_sRI,Cq$gQqUO
%BrCa7On`HG6(3NectLoY.i.J4?%)42S>CI3,m[>Ko#)h<BoV&>S1+.=XHSn+E$0n&JV.!J+M^.6TP9q/RSuD.BH5,+@7@06b04gf
%0,$E85)Z^USi'oP9Y!M_CiD"m+d!$Sa:pFsH!&fhGVRSV,\SBnjNZi[XcHDC"W1%P#M>;5qo[:RoRh=t(mlJ[B&$a!E?N'"FTl6^
%FCb^d%8nE"$itot(_kOS[Ds!pC2.FR@>M$p:nq4t7sPdtaI:Zl/IH:/-[h'\JF@Z-BB@E9UN`o='SXFa<E>Iq<9'LkSe`>;*R6_I
%<j5A@nr/2A`[j#9[*nc[VRk:EY*m"(G(eJ%rJ&iAEH=cMRm$6%CA5obSFtS$qjN!28_ORMjQ*`^R9i@1LfT8U>PT&%%!@<;89LIn
%%HClkp71G2((nb`mLDtFh=?`e1/5<*s5[)GF"PUn70Ze]e?9$K;.G&28+dQO#PK=F)@7?J/KEm%/7h/]*G4DsEWW^5j]QkIf3ubU
%fSWZ[(^d)K/<F,0O,7U_hP,)$mSnBQSjSo4Qro%#^5u!T<XJNT)Md#BmG)9qn:;U@c0\'k&9pldq?4!rZlPV>8t-+1PT@dKAJ`=M
%?W`1?47t"[@sat7k5-bF\!0D^df7&)$Q@Rf)%tIEg2h:l'gW^T`faRsl)K*ZZ2nuta_6ejGmCRJjmBi%3j@d^a5S36LD%TAB:b#Y
%WhSDNW%H?<TDRcr@CN-qf6[CgcTaY(q0_"5m##B!=2TKG85sQ)k\aH3Mo8ZR)tjBi*UW6F/QB1(eW/a?f^Ff>=?g:h&WlaBIC]s3
%h;-m/G^HT<K_M,2:E0%84XCHm1Rouuj'V/88r8Rb-[;dMjD/fKKc>!D,lujn7<)0A;/?8+&DU'7;(dtti2uV"mZoW'Jt+%p1thP"
%mZ]9*k#`23HJ"Nk;ORj<![u:=\maX:_/k9>!gC4nAU!Edn>nhX`Ol9'])Q(!['9nOQW8?oc$Xh.>q9eu)?d26aJWH+m$hTGp\%.$
%5q]Ck;c^Gt6$#,Lj39L5%$l\)mQ+=dUbs=h_1>Sai!iF2hD3m6-;bKPGV_q6\n4$GHo1:d7Jk&nVu?,JoGYRAf`QYV\l3KccI0LS
%YuTWh^6Co#=U?>aA\f80Q%4/>;mF%C&sc0aIXEUrhDJ,,p>'_qS:iP2cp"j\Kk.=i_.;e+:jCs7^pG,Hk*)R[bs_CQ97n!,G>5rb
%-nN)\g7K5I?YGOVg:@&AD?:3^Wf/(gGS?5tXRrZ6)/aDG\m9^R`+hIDP3!/kGS'^O^htURM?A_)OpV7\C99HSG"lOF@57^537fie
%%hGc-8;Xbe!7RGP(g"/-<eAH3X9Xg`77J.s]mY*?"rE`DJL>5,&:jPj8j'gbg"''ARj]W\+Aj\'4l=R$6L]/9/I!#'#OgfTq-4^X
%.>k]YTN,6q=GeY9gPR%_MR5NSLuO?Sf_=&-]XWbQPjWnkZsRF$CZ&Wpb_kRB&ig`K,dJ]%i]3ls,%!/T&iCZ+=e(2F<oQ:VWWNO'
%rQN=0Ufo*o@&bS#XH#2Y1[I[6['PQ+)3h9T!-D1?OqKtXg#3bs.6#.K4u8e&gk3ZGkU>V$FCjkge#?H_-3!T^X-K,&m+`==NDh#V
%'PKst8]bG^@T1KZ))ni0kkZREToYs;?T?Q4Rc@p\;mhnd@@0/^&??^#9[*i=@7hhp[4/YX&=%J$j/d'Qj3#`JY9*Bb>Y5\NnDF9D
%n^mJ'oK110<Eh<"/sIoQIOb%:km:hE%UuNg8ZB=5.njhMKr(MIEhmS1aKnME1f?Kt&+4"%Sdq)!/S)Q=>6]J"E`5@7k?:XeF#I$(
%DMgE*R2qQD`a#gm[Cbc(/6e!m!d2!X:\u6L\SUYK_7]:E+cH$aQ\J3ncTles!\`"s:IYj;ARL<Rf+#u'=KQl[oEcCin2+a93Ur)N
%8*9I*2Xnra>=\bfn)F4X-%mb2)]drTN7l)rF+3j?/O0ISq*$!uQ0?0L"ukf6j8MPnKe'kieA.3bH'-X9,3T*V7>5BF>Uq0eN>)]8
%at[QS2XD<u*F+ecS2'>*6&e\`pCRs#S9l60&Y^QK=n+TW4G=n@?$rk66tD'ZIY@J=@]182q2Y5T5'*`VjF]u$&+KQZU'Y[H;bZTq
%=i\@!&=Z&$O`rS-1m!pg3GSDTH;+0q3WqCIc_X5U)&NDW@a(5C#>[\f5;%`.][MSdpZ<t]:;l7q<WYudm!UE1B'lqrVXaqWP]t[:
%_D<79lo8r0GqcFnpSV?WaD&kJk:c@ISHbU%[c%-BV*uME=Jr*>hY3[i`hIJAa(H9If;"kFP&WrrjcJ@Wh$U#RJ#<=7C)!<;Geb0>
%Vum["$u/P?`KEh1(m/&u%?\"+@SU#D!e!pR_IR-8gIM4K^:lZfo6On37^7O524Nj/"<\!jfN-\qCAEk^:s0(&+uo2-#?*'U=eF"j
%4f\uSX'Sm<mR'gdG:4;m-K'-rdYBY2"!R`ceIR:Al+tUI`$NjXl=#>qWcg%ogSc1P,Rm^ph:)`+i`#GGHjNo`>"b/.`]eoIeO@Er
%DK@cPjGqr"\e>nt74":7HLsn$Tu9o`9B3!5)G_'RUt?h^M*[MJHU*EE@nF6W_4FUnMukP\-!PZtRQ[Uh/X>1UFH2/D0t_t;&0NB=
%ZQ[;E@[mLNFHgS!Vc1$%1,sDX/P5D'Fh8`G\;#;L6\0n2#gotWX:(tZ"B,ogV:?Re(_)_H+I;5i(2+,X`)%]FWjAteDi>am+Ha_q
%=A@7:lb]QnE&+Q(h-%:jL&sIDVasC(=V:O.Mcb'@>`J5PPY'soTl?0`)jo2!%2'?XV)\OW<;;6[$6,.YPG\.ZTQ;6a']=a*kQaPP
%)E7$DC+J6PJ0]FZ(BXhc0'7kl4_@t$V9$Y[Wp!=iY%NlC<;2s3,m:ZuRO+dD/r^@Q,]qC"P""]s<(EDl8pMm1VXB&51iGVn;;hoU
%97gIHNeXs?hH+pV(oPo,Z-k'p`e'L-6H?QT?p+b#n*F(aZFHqA3sDgk"51+[[-#W(;SC+]#efE\qK+OQY)Y:6pt.\7A"mKW^(h!l
%pS2L-OX2up`e%BR[oc_$mp[3V`@="-ff8G:0>HrXs!ZI!j:m]^%n%j)Fj(SQ/+?\AFkHlfe]S`HI^5hRgO':Jl*-cmEqfFgJS$[r
%V:?Iq-qmK_E"i_D+>b#&i^9MVPe'@aK4CK>0jU!W$(]>EV9lKN:$HDLfM@!1jRt`.%*p+?Yd.CE5#QCsC6S,u^ZNWAPFn#:)#3HG
%b>kq\XprOgi[H;LGqC4/9ou&0PYDS,C*Ns"T3pRZ<"D_R.1&7f)aW/74,uE@P?5Xoh>rp/&`a5DC6Bf]9D(&/ceteYoalRdpsjMo
%d#36cE1N<c9"E>/\=h/M]UA5V4(Ot@7JjSVa>G566A.(1,L+sFk9W'V+q-tCiWPa6r<UVkLfZa=&8S]-U;0G:d:S;o3^<ukbfu/(
%;_\3u,$qP^99H#CZ`$Um))oF00%Q`shTaa4cslAep.U_N<J^*Y)Sg3>6;?N4rdei`h9FhpOpl.;FKGu/l8\O@<7@N/D3I@<4:Ytm
%HOimm5X7Lc;2WMUFu^91b_GsP7!i!L7as,c$\WnrI!cjAl$Ma\r9e&9gOHnXec,G1rVg0<qj[&hqnkYrrU9dRTDllls72_o[K#kX
%+$AiWrpua+DY#5:D5T6,L(tmNc>6!>$[>F$2Z<\r(aE/Re;)B2@e?HPLW%5@X[U?B^2997>5Lbo]#>0U64l<%O@h/51*/P:LMSI&
%9FcsXTq>_5&R:(Sc8XtL+%WV2.;/ds<m:^57t;Jk@eei@(Z6eR',8K<fcG)%a;"q&$lFZWSVW7_=hQ`;#Db#,2BD*+`;8*7CgJ>U
%!13fkZa*;P^oEcMI1geHUIY&R\2887$T1_:K0$e"dKQ7rQZE'I9,^,sXBo3hb7%CKVB0H'K%6?W),B[Yp87dJT$*!WOJ.ik(Ym%n
%lt6g=i*:2sVuiY&5O;ut%X)kN:-M5neOt$d-];^eJhF('VNANm(0%Vm;3P%F-_o:H#_f@NFNd?fChf9C2g,W\,hJd#dG'Q]k\?Ml
%#dG2<>M'8m(AFW*&74*IKTsLH+LqW_Pb[n=`NR\=6Hg2$W!USmq"F8ISGC[[fsJKE-=SnQ4kM,qJuq/7?,P5=W*P(+[Xu]Q-F_oK
%d?:<^2o[oK(XUm#*bACmepq.s6bT4ij&%Biqdc6t3PE(5=(;gKT&Ni1c87RiXFJ_HRamU$/U+]A/1NPQUgut`T`JbXep]Rl7BMNB
%/NB"iY*B#)r#^!j&MGCj9(6)c9nZ@6<0LS[C>hcDB$)uQAs'qDMoc&Bd9beT)gAt!ab@3::uei>F5%;%_GN/Q)\/\Z'CeLXVA#Q!
%3W>*@AJ6C)P`COE"M?mC$Y$qp+?9q^,F+n+rBmKFaL#Jr[s0!LQ(aQIe\WG:M"0EK=S/2]FC(D85^DJt-#J0HO`#p:SODWa]!BHr
%(Vu0Za&Pq5i-nLi$>daS(g[OH,P"kh=dU'WWhF/!pJV25<3:)7_%[+T'(1Gu@UO*dk)8D?nr.u>>FY8[`)cN\_IDpj/1;V:e1E<S
%/.-iOJ/C=\2O^$gMi`RfLuRlbB=%qBQm%7,c!TEkJHU9ZT@&Q--F;`@<HbkhJcO!PoYf=uISVpm^e#Nq'S=5;8f.!HW8R4oU_cVt
%W,C66H&P:6qg-7bc0/+a<:!7.o/hMjX("Gs7UYXdR0$D*HqJKeKSS*TrE+466dfdqM_a6,F#F$KhRTgaM`R7u9<^Vn&toLk:ZYs]
%p"[t.NASngU@3<Zg(<a*G2\eWH(Gk!BV"1MS.6c?h_@?51<YdHa\HMcViebA[&e;mb2cl56+A^QoMJ\+KO!csWb`s4RA'hi(G<i3
%mf5OZ`T,_XG[#4M=LG'kCKN6*XN,U]"V"Zb<L]f`>u!bMW^NW2*"`F!%EDaI/sqrY_i;=4#%KWY>A"lt(kI;8$@D:^h9D*FHZ4&N
%e2R*_SNF8%G.niV9W_#W2K!Ic;DXHP@`.4Ij!*Urj:\"iWG]J$5VRI@Vmm[igE)X8CV1IPW5DRbF80t`;G]c![e_CuG"uKahi"V/
%#VRI87+nHU/[u"@(B(a7,qeB+/.fc'=Hi7;OK(7r1Wp(4&olb,&D[bdMeJVlE($2b_WdM'pHkU0X9Z2JFp=[qC(J\X!]jReH>]!/
%bfKl6n`o`cSbX,3a+]010?/8tHD)h=(=Uk=[Z'.0e;>UsCRO3\l3NM7V%<FlMSW#;.O"*3NHHPC6\ZL&CY_AFJm!7'-mO\PD&BE!
%[,"c7oL[RC-P-Rp-,:^[Y6PSl9WEQ-4a,@sW/fLr5UPf8d%]_=-;!p-GX6/Zk82WHDum`e.mD<NS.QAG.<5g[]/n![l>e?]&W=F/
%ks1?B2Ar3&%`1B")ij!&QgD@qaCJ,UJ]JhO;W1j$fGr17Xl+P1C])8<3aXqLTs"3g?`9!FUCf8`,!dE_K9OWZO<fXVm0@XjVdP,U
%Zre$p1%V*O``cWkZ=+.UEHa*r#kH(mVodjTL[7etQh:Mbac!i+Q<2!$_'\Z2+`H0iS6@I;il*I4Lf,1SGg1u@4K1O1G.i0Y2SpZB
%kTJP)gO8W,S$M!-mF6?1J`nKl@S\+=GraBB8o3ab7m%Z*PLbWYS*su[+W&?@Eh>f]N_7'Cpl3a2$L7bK"I_hm)2jhIKr[AM5VY(Y
%`)INENW^N,JnU)j(`S[5(ch(f9a4gbW-?M(mH']O8#:q,esiF$Z!/A(/L3[9aou_f/Q2P_NfG.c>#HRHe??#)9%C%3i<5`k/N(m]
%e5`$qj/Fc?V@a6e$ofp82ckNXa'l8p>mh=6$s3*%[:k'J5*H'A`8.>kEEMK<&ZYJZ(1EZtaO]c?+qRIhRLn%Ha:t,3r%`)J9M2!M
%R-OGP0_$;S,Ut>m2Ht?39HfA2]t:6Ae.N%QHbS]*ligB6qP278Rhb())43J)T'oVZd-8Z$*eB.T0p*'ec]Tp&GlhM<I8q'Z'ZBiD
%4EgtDW4Ecl)]hZ;VclB=4YVP+XDVnA/9Y)*:;Z0!_bTgTE$pUiau!]Oi;'Ou*W.[:0W<8*1;N7#_h@Z.NkuGs5PfUf>.qdm@<7,`
%U'h([%fJ5WZ<ai;VtpVTdM3kJ's)m5$=*IqB-']JNBEs"OHUiklU'_=Pis=?ZfD,I0*&>V+>M;7jBfDKE_@&Z*Y"`*k\t.!ZcWnB
%q;p\@Ls:fk3-KB_dph#';G%WG\tH41(T:Q^iP\)<FII?Gj[b06;?S[N"j=CKas3]d$CeU@"]JVSOQ,D)D&cm`X/CZ<?k&uHEh?ED
%kUbSsaif4rN]L5fdK8`r/f(<,E[%8";#448'IL<1_"G<t0t<l=Xe[!i4O1cl&htCR$`K>417>M,ljN.Q\Y]iNj%3X9LPeQ3[&GA[
%c7MJLnFZE=ZTH]h3N.[4i/Yj%#>%Es<FJ=p`</9cSIMWSX*iWZ@OdBNX\KF^DTAeNY!VYCo#2(BE90!M&5Gk%T%O4eoH;_G0U-if
%VASlIF@h$JLS=ZG]bcKLR+Sb-fZ,>bD:,Tt^@?7)I&Hf@h0",%E&;V]4XgDiR+'hY"IO@cn`:3;9#:7ho60AA\S+L%+MQQ3nUYZ*
%OZ]?L_n/hVD\OSd/gAcV5Th!@Zm*UNSsr&'"\T-5F4V9tl"XHE&md2,+lKX;16s[S-cG:.Re(@L"br<i/="1iClK*j%WXu[HfS#B
%gak(\g?o\$ejI,b\73iDb-[U\^g>]sD-D7:a[j/4C(LhM/OBj2=4Nd&.HoCN!FCbf-h=1eg6Nog4_uTa8:hV!E\XrZ_f'"6=+^sn
%r1PJEd2Q(\SWlj"L'XuPPs9K))flLBpLok?[/3a1^Ui/=ZBOQ_Gi7d/Ic2"6gjZ:l4HWu&"uCj4'</r__)C8>C3_1KQqB<7.3MHS
%M@q)&,cS\%?94lKDb$ul>1H`01gFR,M1iphhBMk;.%`kf%5C@`@HaCM&`2/;5Y-p5GW)96m01L(49L%#Q'.iJ[htr:4/hRM74_*M
%<;ZH@>nqS#_$t['9&^2U<=E'@QQA([V:\:*,hIW/]rg7`;lCUf)ai_(29j>qi4)-gIX:]m*+2C%0#INUimK!#&Lckn5"u:mR1\ra
%),VAT)($mDN_i&c+l[bM/LncXCRX<Don*8dEl*3A&3%t'UaWf/Xa-j&$S=M4fBbri;_?>2J7n[C93)IT(GI/[CrAs@3.5\u;;r8]
%kEY:8fm`FAHB[$>N&iZI7(,&CA425S%g0pWjp^a:!kctA@R?j)N>J49q3X!-`f<EJN9<s!bOY7:J_?SqkCLS+VV#K7U<YpNlLMAF
%qna$c-UW]KDfjoSC.Ll!M"uHs'hH1aB.6Xj!#s)pZG]hj\di79>)cM0289Y'h+;PsD6'pJTNk(1)3,HK4b/1pkC>'JnHj#u#,`2R
%#Z'HnQskcSPkh.>65c:^Tdd7k+FF\'J6Xha8QRVpnH+e/<?kJQn]<Q&0'-S=]1[9D@7!U*52BqD&1-KV8'N*r#fM[FO0S=G(m]8X
%/<CIFBfAP1Ffo?K8W1oFD0)3&pT@7PVjA"tMUW?f\fW%QAj`^4X]g5Wb<-0QX.OeIAIhTGffpX*(Z@QoF/Q?9fL:P<X(J1`,JDX?
%[\'=>F0;]-1rn1dOt_2f`>6MG_Q%<7,tQY8\>(Vl+Vji`+$AXSp=O!)Zpt-P=VuK=3==K(OoAgRFCbre_kSuGNOqc^WOh9(GBdoX
%<OX`&3Z2VpTjIGTm%2@!g8XT)=l%b]bq?U:N1H@`=65:_m52_Eg!Z"_7`DWliYleh@g`"7W^i0nX\(aHW[1b[[1G2XYDE%P5"RYm
%P>k!l2rBuKjgi7k6!Y3-/Pl.0i"uTRg+a:!j:Ki&<8r<,Jqj\GMCL+KJe3DMj$;9DGHSo*XJ-MOi^DCL2;hG]nk^Li._4Ntp.b7]
%Vt?UD,>'F;3kJLa<`[ah\0B%DQVi3QTMjnE,%RW)58>>d(kDs8NM+5X(ZV(h04\pWn^e-C0D.8414cMP8UN`o-W'Zk#jBW.Ul?Ea
%A'!_.\.Z*h$HnQcmV^W:L-`7uQQRC"./HgmNl%k,KY#=7G7[no(l\fPcTio;=Amr+VU$ag=;%Ts#m'X]6q?X4_9-ZS,8s#`pPQb9
%\8A3$O=SAtHATbphekC;k8[b3nQ>A)W-bep_ZmMM/[[Se@P$TBoKS)U<>Ho=A"<DS[AotK."&?@pe$>QYj8GT-;3:;D^W]0(1kI#
%'P7=O!bn@Yqlo_*SU+A:<I+'dnh"lh@?P\b4Y,V-Q*,N\(6M^3_,Q<l.#$YG,tJ*$[uASJKTGDTgU4iXoc>Cu`2lA(>+BNRBoT?=
%"`T]K'SN<V01U[TUJe"/Z"Y)id>e>jRm.gX0MX)hC8Pr/:F*c:V*+Lj?pt&<7%coM()@*f5lhG25:E0jie,Fu%\Fdm'<oI^8tEde
%Ck\oteZq4A(Ga%Y\5=VV-aRjb/A:>$g0tkeFDIE)b76D-^f?AjoFe2\QUH#m<Ra'p*d(pH[Qd,1Ob*-gCoS!b47?:hSLac-?Of8<
%D0(JP.L3Nn'Rtk1D2I-Yq0MC8e+L['C4K\V[ZHqEPuG*GXQ'fIHCsi*s&UY!*D&kGOL_gX(5kE?\G,)!R.f?&ghV1*QYIPp1nMoF
%'>i$n]DH4u$NaX%pdeDZ;?XuHp)P?+:VqnSm&\08%#j[3;#\2]BrFf%Nph059PJXiZ-)dM4Wn)'RV%V0h)-Y1b&^>^(VqZaC1f`U
%jEA^&["tr%C/2"V*p]VLaIa[c<oUqa/erXWH4S4KeYm..MktRX7Dp\egg@+b2T>eqeW])d'YJ/s(@c($IR03N?(b/@S*B$X)cd'%
%4iqWZdS)5WLf:)\hi\IWbL(nT:rq/b]/^f-jr&I[q(?c#&lZI&lA3s#5t2l(@qU;I0K!cLb]>N:=ZaJ3bG:>QXGV7G&JuiRUHo/Q
%?l_s=8>Yd1F.n+5n2_a9386:3YCWZ!RhR-`PY+.&hHA0UbpFVaA;YC]*VX3=CHV3-_aGP*h@j,Sh5ptD=tlI@b3o*mq#!9381A!>
%+F<tI,Lfpt,$PuT794W1__;b/;#?fAd=?fH7L'-_gg)t?+Cl54i@k;S3<<`t=$_lE'T9mI'&Z=fQq8G=f8&4-Z\$)\-B2M7q+;&O
%eYfCuLb]4m=Z[#Y?'O#cA.0&];SeXJcJg%'S+tf1(djpoF%^C,;!]Z?'aP[KA,8^s'+Q#JN;"#7!KOK5d01Xj^I3%]r.rq5=@,r,
%9b=S(dOeQi\$<HG92mEHODZ1:$$aPQo`lMiG-NiaeCQb>28%>J'XMA13ea?!>M9>3LVNq9?:8+c<b..e"OaP2NkI2YYos;1I=*L6
%_@T=#\TOn:hH1VOUKG'I-93299?#B"U9Ej3J97KtK()d-BPbJ**5#nP&`^.IK[Ahh'aiRHqT1?O]2.U%72lb:BZX`J7n&4DPi->&
%"gj]Ri*GZk#?F2/1`SmZQg[<F>ctu/J0m$SB9tQ56.u'VGhNr!gYB0p[Kd(eh9`-bSS,jT7t(ZReK2BiDP(Tfi')/V%SqH=L1u;D
%/t3B)Im@keCFf>67p/-U0f[e8k(p&inuhJ_1XINQ9_.&c,1"&j%hXl,lA.F;HR;V`8@]7YKYrh_3+4]&hAEcQDQ\0j9Tch`W&YdL
%:4NoAQ[uY`;00`]h#RjqD3uOI1L-*E.(DpE_KgDoEtJ["YT:=q2<G%I.hd5,e6Sl';PaQb_Jp3'.98H(FoUe4YrV]NR%ES?2p8,(
%1Q2`\WQI$p3>$)C:XQDbV>N%gb8amuHE'?j3--`f!5l#D[!2i\p!3=`nHVo#,-,>s72K":8Kd6Emg1Fr@9!.c%6rh$;c<s`N>o-\
%>:gUQad#nBJ3O>i'(f"MJQP-rblrm'H_HFqboP3&$4P"6P[<#78Vo.l(:Hb#'O0^!+d'_=s%$I>[ZR9/;@315$,]0toFMilc;M'I
%6CU(p;DaJ(22F>0.@9)$m(AJR`bdCDf!b/GP^86u!Pe(q6pdh+',pkG^"<#fm&KW&qL(Od;m<)']n7V_&4(6>d9tj$O9h&^P\#XC
%hs/#(`HD>\RRXf/Q$nF-Y#V`^KWC^C,<9.S.UsUrE*hLJ9Q!p>&&_(JDuGi+J0ag>T1+q>;oO/K[pd<-FWY'OK;[aaK<'YD%s#i-
%$Kjq!8I!;J6GQM+gd.tJ+J8U`nhB*OfdC%S!Mn1IF&%KZ5&MRqaK%A#*J"P`M,cu\[WfZe%5eG<]n"pp'A`KsH;$aZ`sooj'nSlQ
%bN(Yl#Hh6MG9:(1F8RM&k'$AdIia^uB2FQ7ZXQDTr"YMP8c<r`s"'-W?B*9h#?I5W*]`.hfs8ech$"Fni5N2qs'.?LpP`.#bn:W0
%VlM-NW";%PTo0O(&AS[Te$Q043b#"'_Po--$uQ9,RGS?6Xd5-odpb=A4#ik[@[:I).Ri1N>'@ZXK!K06Mbg@k&53.UcS%B1r\VaK
%O#9587Lq3^ijEPf@T.p&Xm-=r(nqF\Wa#"FYEa*"laUjL2D!9Tq2T/(=;7<@OAu)5<gETf?fO5X[bF?sU@161l9F4B'#%0tP..Ws
%aGVB7R[:4N*1K!*/SVe<[\o<s9bLF9YMm>,>G7aofeS[jIAmdVnC2@:%]gq^oG-"VQmR2IRRHC-CGos(GP2l6%R?P[I4#\dP&'(g
%#4(O61+&>@FY*]f.:_qYbuI=;dgEk+kT?r)0#u,<r;*5BPAj*#)>ZI^>M&i!>NBo%(i""YX.mOCAk'FSJID7u)b+7(R6!>aa`kJe
%3o2T>5#M_6K'Q[MF;_U0P[[Q,kM^`,K>k,1ZO!58J\F\_Q'450"#(NMZV(F]nC6+?q1<U9"-a3er$Ad4KZ2%&Pb\QYKMuY?fTOE]
%*V8F#<+7A;#D;\<hta>Is4K(*$D4\4EEaSGqF/t]nBjYd[qdP-W)H4G>2OeYJM(E[.7GM</_QQq6ht/65WnFU8F#SYGA(mDOK&s5
%+J)%9oPh(*mU6M9.VD:fi()TOOY&1NZspA\"148F2N1jCI2#'VDf15!%MFi$cLH@Es2eu3`<2?q]rZ%hGd9,P=02=S9NYr.K5%$[
%OenB$JJ=9""'#UH=(ap>W@EDF+\F-)/6d^_U>O?b5`QBo1a6#JB+@KDFFul\h,ccYS5ne!B<AI/&OF_\?9+>3+f#G)X?s)k;`L=3
%P<?PI)18O(ngV=gQ\Fre=CDTgk^(TTh8N"#7PqX5^=PZs&JV0IPDIOC(!/P#Wn2lFVn*V2@Y(C-Ed#TtZFW$'\r<S8#ZAp\N0B#G
%$7'r.APETe^q%P8e`)NfXa#or=Hepq==cL$ZQ+[2[H@&pfJh_NY(u//m`C7F$@Meq>9a-eE!I#)(RD7,6>aV^.uJljn_i1!YSV9U
%fTAe:(.ru.f,F^SK,k@M3YnB0!F*`V,t90'"We2G%Sdq5UTqTZ$!1V5$*<MZ_MjR#+aaMfGu%9Y#*'Z_]7(DG-53Xo6@3ko]:tTK
%*OW<k;G@OEb22P'TmRAq]rpJ%QDpiah/8$<f"rLka,_;]YLaDm3=g;q`B'F>l\SAuS+BsE!>9c$1,`*8:>ZTeqsqJ/$IdATFJG=m
%U(%\7cfjIW$`@DC7*Y,/HrQ9SeSZ`6XNq>k<a9Tn\L\6-h9Xfl;fB-hNk7Hm\_<ONrKN06fe"7aG:j!22p+'pPm7OmOiNNG20O_d
%a/s!XJ2)k2kI>n9R-/3Ce,,nfZdS$L^Dq9-f588]b-ZDXj7^c<pQ+I;]m8=m3rP+&$Mt,?qO?<coEp%\jo!,jVPa4"hS<=hN^%i[
%'YfN(Z7+QDn1#9N'^MbJ8UN*n9C,TM>*DYr3QBpih:<$>ZC>VH36dH;/NAKjAR$Y>"45;0T=f5<C9g6npoXSdXUYaS\KQYF?#fb5
%'7_dokeP8s9n>WF11,C.Nl?>\nqjq%k<W-0a!#23F=sJR5g8JfOg<H]@H&>+<MR8mE/!.X0``;In!6W7!pKFs>tg]kTetkER)iML
%:,OB;4i*`_1>UguT)f.]S)3E'7244'=+9;llPK_k&BN1*c<O^7S)Rim@PdVg16VtIT/sa[kbdAMHDd;r*M/2sqV%Z)U@U'[CTqgg
%6HpGOQ6jm:=W/YUq_G^BlP'Z+.[ROnJn(-=5'EfP+;0?$(o86Cm1O-/$7[p84$%<m7\;tKmjPOrGE8Dr[h?C$1u+M\1s!Vn7L1`m
%8El(E`&Vo6\WSbCX9ApVR+.PXIU*clEI'AHo@M4`n_m;m1lmGmp6tiM'k=o6]B=6BG,%Sar7DF/"p!=`"B&3kYA6&^)uX)D!bF.P
%.L\2MaX:L3-5Ka6co'o_ARNFfOs>aVQ4Fk08eS&;ikpGa9UR^BB4T)0U2_Qt.#6M\?)D??!m$h)qFjh,V.m'CTRf9P&#uW&CrWrh
%Uo6AS\n.Jf9T$W<87Met:,ZG&B]_-#?gq[34rR>56g8fTg->1WT9m7@([Kca(bu0;2CMdVX^6p2_E9DOS!=?akmL]d]^*cWkgWOh
%(TmNV?8Rj]I*kZKqIL]<G>KPo43#HSl8[\n0[U3X6AcV,065,=KnX3&,'Y.E(rDb+0`\?.-)`$(Je1Tg2IpG^^1h\+$N)$7JD3$#
%E_W;cbd*)04W[$?(G838M'o!18UTVJ&G;#q'.tnihZ6LGl_41J?h;<FI2Y1aV@B\)Pi)9Odc@:X!a1/\)+_7Zl7+0W5QSs$&+j\D
%kW?0G(KXIqdn:F)?f9Ynpu:)('Mq5%EQSL4*t3';@<!/r@n8r:RERsj%EX=eT^HR>A@mIg*@N7qY(=joEkh8uA@'*GFb_9N%lG8W
%M.JQX'3^9@*@'=/7d:2WZ`Q/"OVs-6i(3g>rBOhZY`^JB$+Y`j6oX2(LQQ.'eNT$RF)*qALPccq*JATI8127>q,X^=M4``lZ7LO-
%VO0j@9n4G\5@:_chcPr^DJh`j=]?q?@aE*.-mam'$rLf.A:2i/C1o_A$;q;?j-%bX7bj#e`Ihmo.;5>(mU!T4P]V=1KkjIZ9MMAM
%K_:9Mk?<c$Bd$?o:kI.,gFuiFE\#s`_g?7)r\RdW0%uguq1[o;OOj^aeYCgl@#hslbg2>_rS)>fpAL%a$U9VP:Aue=mOp9<QH@B'
%7\?fpTk&=VmkdUn:ob6o4*$M.V'OK.Ir-XOi;=fL!7hLfE>4TT1o`/A]Z-buU)q``Dq)P2"9#i-GerED<k*<XIW"0fH<Z[!M/3'R
%7tL[a->[l4ag^05X%Z2*A2Mj#\m;"&G[o3[g,CN'iX._c]<i3.5\m-pC&6P%U.VKO6dMC\&Xb;8#p4!K&>7D5%#LUsCWN9Yk.urI
%k&EWI$i1#hZk!W;X0qW:p[Z4gr*IIITJa?"MgkjV5l57>+IK#A5_Eo''s(qI!;nkOZ>!92UY&EEs/oKp'']RQ@tSeY`f>qVA12$i
%Rn;!Q5lgS09FA#XEZoa;!^P=Ioh+Aa1XW+&2ErnIWhip?U\J#)\Pei%*%3uF?,S_>ONu&(e=P;!m)E3\-*B0_o%SZ_1QqOPXS95Y
%3d1N*M-a`DP)C58&N\7o&*T'HFq)-'Lb[.2A)1(7#S'tR7DR>?rpm?Gk(41p(>R\V!@?ASFCq6FBI*k@HGlmVjmETd,2pY[1Qds;
%]$7C.<JmAX\iU\?M67d8L5KMU[[r2akk;0I1>MM(mGTcJGl`"K4Ok#_F(\T%`Fl4?AG'MAWDo(RXhEVPmdj5]>aRO<oLm.?T0#%5
%FsEghgY]$]Uss.e2*Rq2:<B5o[lsGYPOd(iH/S9VG)dVi;/^iaLHaBqhsIOupXTq(daJg:AaB&@";0"6b4[dbY!o^K<UH!)nKd`U
%8<J-YU*'?Xh^$[#Fus9Z^T'GC$IAP=g+)&*J6PO)Rms-2%=\/f2a*)@:;"LCJ`A<]kAp;DrpI,6^L99ij4i\*XPWt,%F:K)EH=>-
%p&O8BDk?UMdcu69.N8IX!g%N-c,0!q67s(<Dn4(ba6>c/B<T7V0Aug!]ihnmYnIa1don_#IIBaEo(\(rFa'K5nb8B^2r2LJAfW'6
%h-UY'*;U/ShmLR9*&i*P]KO9FgmdL*BNkB5o(h+#"u)CsNd32Zm,)ldma16sKI6C1bkcEM_tP%2U@:Q:EA:KN;shm_#%:Ml,HOuu
%Phq_*bG=Pe1=[6S*(A7c:!hc%h2RS.0O<Pg[`S&N.;m!*A(C,P..Y`)OsS%56d8-XM=/Wg[9h]hpnSXY;*Dkca#%@r\i6)[5<7%)
%]:5qUaeG[/d,uj3)Le9gm*kaQ_9`n<7SUe#?g]=:o.8QhU4i,@"7j!sFmgZFS6Qe,?0W=T>-D1"2m7&J,Qt\SZO67Pp;5WIHh28B
%]O'GjZet`+[6srdht@$B[t"1.hu3Ppn,E+Mh.?A^^]46sIeQ)+q"t*_rHEbhbJ3hmJ,T<VhgP1p5PtP/lZ`ALrR4jJprDk&p##cE
%O5GBYYQ+7@rsom8FADV3^\Z^bp0[gi0E+1Zp?N+~>
%AI9_PrivateDataEnd
