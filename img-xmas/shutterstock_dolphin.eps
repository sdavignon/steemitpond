%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: dolphins.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: 
%%CreationDate: 10/9/2015
%%BoundingBox: 0 0 908 722
%%HiResBoundingBox: 0 0 907.8297 721.8589
%%CropBox: 0 0 907.8297 721.8589
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 104 8%%BeginData: 10973 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD15FF7D5328532E7D7EFD79FFA8522828522828287EA8FD3DFFA8
%A8A8FD38FF592E28532E2E28537DFFFFFFA8A87D7E597D5359537D598484
%AFFD2BFF7D285353A8FD37FF2E2E282E282E282E527D2E53282E28532E53
%28532E5328532E537DFD29FFA82E282E2753A8FD35FF7E28532E532E5953
%532E5353535259535352595353525953532E535384FD28FF592E2E532853
%A8FD34FF522E28532E532E532E532E532E532E532E532E532E532E532E53
%2E532859A8FD26FFA82852282E2853FD33FF7E535353525353532E535353
%2E5353532E5353532E5353532E5353532E532E7DFD26FFA85228532E5228
%7DFD30FFAF53532E532E532E532E532E532E532E532E532E532E532E532E
%532E532E532E53287EA8FFA8FD22FFA8282E2852282E287E7EA8A8FFAFFD
%29FFA8535352595353525953535259535352595353525953535259535352
%595353525953532E59535353FD1FFFA9A853535259535353592E532E5353
%5959A8A8FD24FFA85328532E532E532E532E532E532E532E532E532E532E
%532E532E532E532E5328532E532E532E59537DA8FD1CFFA9595328532E53
%2E532E532E532E532E532E532853537D84FD20FF7E532E532E5353532E53
%53532E5353532E5353532E5353532E5352535259595927277D7E7D847D7E
%7DA8A8FD1BFFA87D2E5352532E5353532E5353532E5353532E5353532E53
%2E535384A8FD1CFF7D5328532E532E532E532E532E532E532E532E532E53
%28535259537E7EA884A9A87D7DA87EA87DA87EA8A8FD19FFAF8452532E53
%2E532E532E532E532E532E532E532E532E532E532E532E53285359A8FD19
%FF7E53525953535259535352595353525953532E535259538484A8A8FFA8
%FFA8FFA8FFA8A97DA884FD1DFF84592E5353535259535352595353525953
%53525953535259535352595353525953532E7EA9FD16FF7D532E532E532E
%532E532E532E532E532E532E5353FD04A8AFA8A8A8A9A8A8A8A9A8A87EA8
%A8FD1CFFA853532E532E532E532E532E532E532E532E532E532E532E532E
%532E532E532E532E532E5328537EFD14FF84532E5353532E5353532E5353
%532E5352597DA8A8FFA8FFA8A9A8AFA8AFA8AFA8A9A8AFA8A9A8FD1BFFA8
%7E2E532E5353532E5353532E5353532E5353532E5353532E5353532E5353
%532E5353532E5353532E5359FD12FFA8532E532E532E532E532E532E532E
%5353FD0DA884FD06A8FD1DFF7E5328532E532E532E5328532E5328532E53
%28532E5328532E532E532E532E532E532E532E532E532E532E5353FD11FF
%59525352595353525953532E5359A8A8FFA8FFA8FFA8AFA8FFA8AF7D7D53
%532EAFA8A9A8FD1DFF7D532E5353532E595359537D597E597E597D597D53
%59535953532E5352532E53535352595353525953535259535353FD0FFF7D
%28532E532E532E532E53527D7EAFA8A8A8A9A8A8A8A9FD04A82E28282E28
%53A8FD1FFF53532E532E7D7D847EFD04A8AFA8A8A8AFA8A8A8AFA8A884A8
%7E7E7D7D53532E532E532E532E532E532E532E532E2E59FD0DFFA92E532E
%5353532E532E597DA9A8FFA8AFA8A9A8AFA8A9A8AFA8FF532E2E52282E7E
%FD1FFF53532E7D7EA8A8FFA8FFA8FFA8A9A8AFA8A9A8AFA8A9A8FFA8AFA8
%FFA8FFA8FFA8A87E84595952532E532E5353532E535353A8FD0CFF52532E
%532E532E532E7EFD11A87D272E282E28FD1EFFA8285353A8A8AFFD1FA8A9
%A8A87D7D525328532E532E53287EFD0BFF7E5353535259535353A8A8FFA8
%FFA8AFA8FFA8AFA8FFA8AFA8AFA8FF53522E53287EFD16FF7D7D535959A8
%FFFF2E59A8FFA8AFA8FFA8AFA8FFA8AFA8AFA8AFA8AFA8FFA8AFA8FFA8AF
%A8FFA8FFA8FFA8AFA8FFA8AFA8FFA8A97D52F8525359535359FD0AFFA953
%2E532E5328537DA8A8A9A8A8A8A9A8A8A8A9FD07A8FFFF5228522853A8FD
%13FFA97E2828282E282828595359A8A9A8A8A8FD0BFFA8A9A8A8A8A9A8A8
%A8A9A8A9A8A884A8A8AFA8A8A8A9A8A8A8A9A8AF535253532E532E7DFD0A
%FFA82E532E532E5984FFA8A9A8A9A8A8A8A9A8AFA8A9A8FFA8FD04FF8428
%2E2859AFFD14FF7E282E285228532E52285384FFA8FD11FFA9AFA8A9A8A9
%A8FF7E7D2E532859A8FFA8A9A8AFA8A9A8AFA8FFA8A97D532E537DFD0AFF
%52532E532859A8A884A8A8FFA8FFA8FFA8FFFFFFA8FD06FFA82728287DFD
%18FF53522828272E282E2853A8FD15FFA8FFA8A8532E282E282E287DA8A9
%FD0AA87DA87D532853A8FD08FF845353532E7EA8AFA8FD12FFA9285359FD
%1BFFA9A8597D535328532853FD18FF532E2E5328532E2E53FFA8FFA8FFA8
%AFA8FFA8AFA8FFA8A87D592E59A9FD07FF7D28532E59A8A9A8FD13FFA8A8
%A8FD21FFA82E28522884FD13FF84537D28282852282E282E537D2853537D
%84A9FD07A8AFA87E7D7D2859FD07FF53532E59A8FD3BFF532E282E7DFD13
%FFA853052E282E282E2853A8A82E2E282E28FFAFFFA8FFA8FFA8FFA8AFA8
%A87D7D53FD06FF7D532E537DAFFD3CFF2828277DFD15FFA853532E5353A8
%FFA8272E282E277DFD0AFFA8FFA8A87EA8FD06FF7E2E537DFD3EFFA8282E
%A8FD1DFF2E522E532853A8FD16FF2E5353A8A8FD3EFF5352FD1DFFA82828
%5228287DFD16FFA8532EA8A8FD3FFF59FD1EFF7E2852282E7DFD17FF8428
%537DFD3FFFA8FD1FFF2E28282E7DFD18FF53532859FD5EFF7D2E2E7EA8FD
%17FF7E282E2E2E2859A8FD5CFF7E7EFD19FF7D282E28532E522853A8FD23
%FFA8A87D847E847EA8A8FD06FFA85353527D7EFD3DFF7D052E282E282E28
%2E2752A8FD1FFFA87D2E5328532853282E285352597DAFA853052E282827
%2828A8FD3BFF28532E5328522E5328532859FD1EFF7D532E535353525953
%53525953532E53535328532E53285259FD3CFF7D28282E2853522E282E28
%5228A8FD1CFF53532E532E532E532E532E532E532E532E532E2E2852282E
%2EFD3DFF59285253A8FFFF7D532852282E59FD1BFF59532E5353532E5353
%532E5353532E5353532E5353532853287DFD3DFF2753A8FD05FFA8592828
%2853FD1AFF7E532E532E532E532E532E532E532E532E532E532E532E532E
%532EA8FD13FFA97DFD27FF7DFD09FFA9532E53FD1AFF842E535259535353
%595353525953535259535352595353525953532E84FD11FFA9287DFD27FF
%A8FD0BFF5359FD19FFA852532E532E53285228532E532E532E532E532E53
%2E532E532E532E53287DA8FD0EFFA8282859FD33FFAF7DFD17FF7E7D2E53
%2E53537D5928287D597D53532E5353532E5353532E5353532E5353532E59
%A8FD0DFF2E52287DFD4BFF7E2E2E59537D7D847EA87DFD05A87D592E532E
%532E532E532E532E532E532E5328537EFD0BFF5328282E52FD4BFFA97DA8
%7EA884FD04A8FFA8AFA8FFA8FFA8A87D532E535353525953535259535352
%5953537EFD09FFA85328532853FD4CFFFD06A8AFA8A8A8A9A8A8A8A9A8A8
%A8AF847D2E532E532E532E532E532E532E532E537EFD08FFA8282E282E28
%A9FD4DFFA8FFA8FFA8A9A8A9A8AFA8A9A8AFA8A9A8FFA8A97D532E532E53
%53532E5353532E5353537DFD07FF532E2E522853FD53FFFD0CA8525359A8
%847D2E5328532E532E532E532E532E2E53A8FD05FF53282E282E28A8A8FD
%54FFA8FFA8A9A8FFA8FF532E282E53FFA8A87D592E535259535352595353
%52532E7D7DAFFFFF2E532E532853285353FD56FFA8A9A8A9A85328522828
%7DFFA8A9847E535328532E532E532E532E532E532E5353532E532E2E2852
%282828FD5AFF532E28532853A8FFA8AFA8AF7E7D53532E532E5352532E53
%52532853535328532E5228532E2E53FD59FFA8282E282E2859A8A9A8A8A8
%FFA8A87D7E5359525952532E59537E7EFFA87D282E282E282E28282EA8A9
%FD57FFA828522E52287EFD0AFFA8FD0DFF532E28532852282E52FD59FFA8
%2E2E282827537DFD17FF7E5328532E537DFD37FFA9A8A9A8FD21FF7E7D53
%53527EFD1AFFAFFD36FFA87E52532E53285352597DA9FD20FFA8FD52FF7E
%532E535353525953532E53527DA8FD70FF53532E532E532E532E532E532E
%532E2E53FD6EFF59532E5353532E5353532E5353532E5353532EA9A8A8A8
%FD68FF7E532E532E532E5328532E532E532E532E532E532853282E287DA8
%FD65FF7E2E532E5927527D8459592E53535352595353525953532853282E
%7DFD64FF52532E7D7E5953A9A8FFA88453532E532E532E532E532E2E2852
%537DA8FD62FF7E5353A8A8A884FFA8A9A8FFA8AF7D592E532E5353532E53
%2E5284FD63FFA853537DA87D84FD09A8A97E592E532E532E532E5352FD64
%FF537E84A87EA8A8FFA8FFA8AFA8FFA8AFA8FFA87D2E59535352595353A8
%FD62FFA97E7DFD08A8A9A8A8A8A9A8A87EA8A85928532E532E532E7DFD26
%FFA9A87D7E597D537D597E7DA9A8FFFFFF7D535253527D7EFD28FFA8FFFF
%FFA8A9A8FFA8FFA8A9A8A95352287EA8592E5353532E5353FD24FFA97D59
%2E532E532E532E532E532E597D7D282E282E2852282853FD2CFFA8A859A8
%A8A9A8A953FD0428A8845328532E532E537EFD21FFA87D2E5328532E532E
%532E532E532E5328532853282E282E282E53FD2EFFA82E287DA8FFA87D28
%5328527DFF7D53535352592E7EFD20FF7E532E5352595353525953535259
%53535259535353595253285253FD2FFFA8282E2853A8AF532E282E287DA8
%A853532E532E5353FD1FFF7E532E532E532E532E532E532E532E532E532E
%532E532E532E5228A8FD2FFFA8522852287DA87E28532E2E59FFA8A82E53
%53532E59FD1EFFA85352532E5353532E5353532E5353532E5353532E5353
%532E5353537EFD2FFFA8282E28287EFF7E2E282E2859A8A8A87D28532E53
%2EFD1EFF7D28532E532E532E532E532E532E532E532E532E532E532E532E
%532E53A8FD2EFFA953282E7DFFFFFF7D53282E2EA9A8FF845353532E59FD
%1EFFFD0453525953532E532E532E5353535259535352595353525953532E
%53A8FD2EFF532828A8FD04FF7D7D282828A8A8A853532E532EFD1DFFA853
%2E532E532853537D597E7D7D597D535328532E532E532E532E532E532E53
%7EFD2EFF52287DFD05FFA8A87D7E84FFA87E2E535353FD1EFF52532E5353
%2852AFA8FFA8FFA8A87D7E84A8595953532E5353532E5353532E53A8FD2E
%FF527DFD05FFA8A8FFA8A8A8AF7D532E5353FD1DFF535228537DA87DFD07
%A82E2828537EFFA8A87D5328532E532E532E532853A8FD2EFFA8FD06FFAF
%A8AFA8FFA8A853532E7EFD1BFFA95353537E7EA884A8A8FFA8AFA8FF7E2E
%2853285359A8A8AFA8A859532E53535352595353A8FD34FFFD05A8A9A853
%2E537EFD1AFFA8285353847DA884AFA8A8A8A9FD04A82E2828522828282E
%287EA8FF847D2E532E532E532E59FD35FFA8FFA8A9A8AF53532EAFFD1AFF
%A87D7DA87DA8A8A9A8AFA8A9A8AFA8AFA8A8522E282E282E287EA8AFA8FF
%A8A8FD04532E532E84FD34FFFD06A8592853A8FD1BFFA8A8A8FFA8FFA8A9
%A8A9FD07A8A97D59525959FD09A87D532E532E532EAFFD33FFA8AFA8AFA8
%AF53537DFD29FF7E59537E597EA8FFFFFFA8AFA8A9A8FFA8AFA8FFA87D2E
%5953537DFD33FFA884A9A8A87E532EA9FD2AFF2828282E28A8FD04FFA9FF
%A8A9FD05A8FFA87D28532E53A8FD32FFA8A8A8AFA884287EFD2BFFA8282E
%282E53FD09FFA8AFA8A9A8FFA87E2E532EA8FD32FFAFA8A8A8AF592EA8FD
%2CFF7EFD04287DFD0BFFA8A8A8A9A87D285359FD32FFA9A9A8FFA85359FD
%2FFF7D53282E59FD0BFFA8AFA8FFA87D2E59FD31FFA9FD04A8842EFD31FF
%A8FFA8A8A8FD0BFFA8A8A8A97D532EA8FD31FFA8FFA8A952A8FD42FFA8A9
%A8FF59537EFD30FFA8A8A8AF7D59FD44FFFD04A8287DFD31FFA8FFA859AF
%FD45FFA9A9A87E53FD30FFA8A8A87DA8FD47FFA8A87D53A8FD2EFFA8FFA8
%7E7EFD49FFA8A852A8FD2DFF84A8A87D7DFD4BFFA8597DFD2AFF7D7D5252
%7D7D52FD4DFF7D7EFD28FFA82E28282E282E2853A8FD4BFFA97D287DA8FF
%A8FD24FF282E2E5228532E52287DFD4CFF535328522E5353FD22FF532828
%2E282E282E282E27A8FD4AFFA82E282E282E282828A8FD20FF53287D7D7E
%A87D2853285253FD4AFF7D285328522853285328FD20FF287EFD04FF7D28
%282E2852A8FD48FFAF282E28535352FD042853FD1FFFA8FD06FF2E522E52
%28FD49FFA82E2853A8FFA8A87D7D2E2EA8FD25FFA8272E282EA8FD49FF28
%2EA8FD07FF7DA8FD26FF59282E52FD4AFF537DFD30FF532E28A8FD4AFFA8
%FD31FF522884FD7CFFA852A8FD5FFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:ModifyDate>2015-10-09T13:28:01+04:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-10-09T13:27:59+04:00</xmp:CreateDate>
         <xmp:MetadataDate>2015-10-09T13:28:01+04:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>204</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgECWAJYAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABACWAAAAAEA&#xA;AQJYAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAzAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq8x/Nb8&#xA;pZ/M0c2p6bf3H6SjXkmnzys9s/EfZjDH90x9vhr2HXLsWWti1zhb5107Wdc0a5L6feXFhOjEN6Mj&#xA;Rmo2IYAivuDmWQC0g09S8n/85D65avHa+YrYalb7D61ABHcj3Kikb/cvzymWAdGyOTvenz/nN+X8&#xA;Vqk63zzNIoYQRwyeoPZuSqoPzOUjBJn4gSG7/wCcgtAQkWmmXUwHQytHFX/gTJlg0x72PihAn/nI&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <dc:format>application/postscript</dc:format>
         <xmpMM:DocumentID>xmp.did:9949e0eb-58e7-f84c-a8aa-dbc8dd2c6065</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:9949e0eb-58e7-f84c-a8aa-dbc8dd2c6065</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:2b7451dc-e0b1-d44f-9f45-89cafe23f9ef</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:3831c542-ca30-e048-9e25-9da7f26e35b3</stRef:instanceID>
            <stRef:documentID>xmp.did:3831c542-ca30-e048-9e25-9da7f26e35b3</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:2b7451dc-e0b1-d44f-9f45-89cafe23f9ef</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2b7451dc-e0b1-d44f-9f45-89cafe23f9ef</stEvt:instanceID>
                  <stEvt:when>2015-09-24T15:52:40+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3831c542-ca30-e048-9e25-9da7f26e35b3</stEvt:instanceID>
                  <stEvt:when>2015-10-06T15:28:11+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9949e0eb-58e7-f84c-a8aa-dbc8dd2c6065</stEvt:instanceID>
                  <stEvt:when>2015-10-09T13:28:01+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1000.000000</stDim:w>
            <stDim:h>800.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=71 G=83 B=107</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>70</xmpG:red>
                           <xmpG:green>82</xmpG:green>
                           <xmpG:blue>107</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=68 G=83 B=110</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>68</xmpG:red>
                           <xmpG:green>82</xmpG:green>
                           <xmpG:blue>110</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=108 G=126 B=158</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>107</xmpG:red>
                           <xmpG:green>126</xmpG:green>
                           <xmpG:blue>158</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=60 G=69 B=87</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>59</xmpG:red>
                           <xmpG:green>68</xmpG:green>
                           <xmpG:blue>86</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=209 G=214 B=219</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>209</xmpG:red>
                           <xmpG:green>214</xmpG:green>
                           <xmpG:blue>219</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=89 G=105 B=135</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>89</xmpG:red>
                           <xmpG:green>105</xmpG:green>
                           <xmpG:blue>135</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -721.859 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 721.859 li
907.83 721.859 li
907.83 0 li
cp
clp
425.588 62.841 mo
427.527 50.9343 404.63 57.178 393.429 54.0088 cv
383.799 23.4302 300.369 -12.0362 171.122 45.7402 cv
55.9076 97.2438 38.0934 225.936 38.0934 225.936 cv
38.0934 225.936 38.0912 225.946 38.0871 225.965 cv
37.0858 230.67 46.4759 235.545 48.8814 231.38 cv
53.4701 223.435 57.1377 215.685 57.1377 215.685 cv
57.1377 215.685 57.7226 224.113 63.1315 228.266 cv
74.7328 173.212 131.682 164.027 137.056 162.471 cv
141.879 162.519 184.962 159.577 194.6 158.341 cv
204.239 157.107 228.808 154.178 253.706 145.352 cv
278.605 136.526 300.882 127.342 314.941 122.257 cv
327.964 117.545 340.571 111.719 352.749 105.446 cv
364.997 99.1383 376.657 89.7486 389.69 85.1943 cv
400.107 81.5541 411.155 80.0059 420.804 74.4497 cv
423.278 73.0254 427.149 71.0352 428.371 68.3281 cv
429.887 64.9695 428.089 63.1062 425.588 62.841 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.34902 .411765 .529412 rgb
f
167.993 46.8202 mo
168.012 46.8221 168.032 46.8227 168.051 46.8246 cv
169.075 46.4632 170.082 46.091 171.122 45.7402 cv
193.337 35.8097 214.198 28.6338 233.564 23.7142 cv
227.003 19.4222 214.212 12.0113 194.624 4.67379 cv
164.486 -6.61631 147.223 6.09649 147.223 6.09649 cv
182.693 20.6619 173.166 38.3262 167.993 46.8202 cv
cp
.266667 .32549 .431373 rgb
f
428.677 67.5137 mo
428.685 67.4909 428.691 67.4687 428.698 67.446 cv
428.71 67.4053 428.723 67.3642 428.734 67.324 cv
428.805 67.0695 428.862 66.8219 428.894 66.5667 cv
428.894 66.5662 li
428.922 66.337 428.926 66.1209 428.917 65.9123 cv
428.915 65.8636 428.913 65.8152 428.909 65.7676 cv
428.892 65.5581 428.862 65.3563 428.805 65.1539 cv
428.805 65.1538 428.805 65.1537 428.805 65.1537 cv
428.752 64.9688 428.68 64.7975 428.596 64.6343 cv
428.584 64.6106 428.572 64.5871 428.559 64.5638 cv
428.555 64.5552 428.55 64.5464 428.546 64.5379 cv
428.453 64.3735 428.349 64.2178 428.226 64.075 cv
428.226 64.0747 428.225 64.0745 428.225 64.0745 cv
428.103 63.9333 427.965 63.8067 427.817 63.6891 cv
427.794 63.6708 427.771 63.6521 427.748 63.6343 cv
427.593 63.518 427.429 63.4114 427.252 63.3196 cv
426.823 63.0974 426.332 62.9504 425.806 62.8734 cv
425.738 62.8714 425.668 62.8633 425.592 62.842 cv
424.065 62.4148 416.064 67.2734 414.407 67.8737 cv
401.5 72.5483 387.279 73.8847 373.652 73.9056 cv
327.742 73.9756 282.26 83.6957 238.613 97.3629 cv
171.647 118.332 102.121 142.407 63.6512 204.992 cv
62.5914 206.716 61.4704 208.404 60.4298 210.146 cv
59.7654 211.258 58.5078 213.369 57.1377 215.685 cv
57.1377 215.685 57.7226 224.113 63.1315 228.266 cv
63.441 226.797 63.7893 225.367 64.1616 223.963 cv
64.1987 223.823 64.233 223.68 64.2709 223.54 cv
64.6354 222.193 65.0319 220.88 65.4509 219.592 cv
65.5044 219.428 65.5566 219.262 65.6108 219.099 cv
66.0385 217.812 66.4933 216.556 66.9722 215.326 cv
67.0209 215.201 67.07 215.077 67.1193 214.953 cv
67.6226 213.68 68.1507 212.437 68.7054 211.225 cv
68.7196 211.194 68.7341 211.164 68.7484 211.133 cv
82.6565 180.857 112.021 169.306 127.473 164.893 cv
127.483 164.89 127.492 164.887 127.501 164.884 cv
127.515 164.881 127.528 164.878 127.541 164.874 cv
132.425 163.482 135.912 162.802 137.056 162.471 cv
138.103 162.481 140.957 162.35 144.877 162.127 cv
145.471 162.093 146.086 162.058 146.727 162.02 cv
147.944 161.948 149.24 161.868 150.598 161.783 cv
151.278 161.741 151.972 161.697 152.68 161.651 cv
153.388 161.606 154.109 161.559 154.842 161.511 cv
155.735 161.453 156.65 161.392 157.572 161.33 cv
157.859 161.311 158.149 161.291 158.439 161.272 cv
159.13 161.225 159.826 161.178 160.528 161.13 cv
160.804 161.111 161.079 161.092 161.357 161.073 cv
162.298 161.008 163.246 160.942 164.198 160.875 cv
164.369 160.863 164.541 160.851 164.713 160.839 cv
165.521 160.781 166.331 160.724 167.141 160.666 cv
167.426 160.645 167.712 160.624 167.997 160.604 cv
168.773 160.548 169.547 160.491 170.319 160.434 cv
170.529 160.419 170.74 160.404 170.949 160.388 cv
171.903 160.318 172.85 160.247 173.788 160.176 cv
174.013 160.159 174.236 160.142 174.46 160.125 cv
175.194 160.069 175.921 160.014 176.639 159.958 cv
176.902 159.938 177.165 159.918 177.425 159.897 cv
178.336 159.826 179.236 159.756 180.112 159.685 cv
180.778 159.632 181.429 159.579 182.07 159.527 cv
182.144 159.521 182.218 159.515 182.291 159.509 cv
182.885 159.46 183.465 159.412 184.035 159.364 cv
184.149 159.354 184.263 159.344 184.377 159.335 cv
184.924 159.289 185.459 159.243 185.979 159.198 cv
186.091 159.188 186.201 159.178 186.311 159.169 cv
186.835 159.123 187.349 159.078 187.842 159.033 cv
187.912 159.027 187.977 159.021 188.046 159.015 cv
188.524 158.971 188.987 158.929 189.433 158.887 cv
189.489 158.882 189.547 158.876 189.602 158.871 cv
190.064 158.828 190.503 158.785 190.927 158.743 cv
191 158.736 191.075 158.729 191.148 158.722 cv
191.557 158.681 191.944 158.641 192.313 158.603 cv
192.383 158.595 192.452 158.588 192.52 158.581 cv
192.882 158.542 193.225 158.505 193.542 158.469 cv
193.594 158.463 193.641 158.457 193.692 158.451 cv
194.018 158.413 194.326 158.377 194.6 158.341 cv
204.239 157.106 228.808 154.178 253.706 145.352 cv
278.605 136.526 300.882 127.342 314.941 122.257 cv
327.964 117.545 340.571 111.719 352.749 105.446 cv
364.997 99.1383 376.657 89.7486 389.69 85.1943 cv
391.88 84.429 394.098 83.7582 396.325 83.1212 cv
396.561 83.0539 396.796 82.9867 397.031 82.9202 cv
397.867 82.6839 398.703 82.4501 399.54 82.2192 cv
399.553 82.2156 399.566 82.2118 399.579 82.2083 cv
400.906 81.8423 402.232 81.4792 403.555 81.107 cv
404.877 80.7348 406.196 80.3537 407.507 79.9515 cv
408.817 79.5494 410.12 79.1264 411.41 78.6706 cv
412.441 78.3066 413.461 77.914 414.474 77.5021 cv
414.925 77.3188 415.374 77.1303 415.821 76.9358 cv
417.292 76.2954 418.74 75.5885 420.16 74.8015 cv
420.374 74.6827 420.591 74.5723 420.804 74.4497 cv
420.81 74.4464 420.817 74.4425 420.823 74.4392 cv
421.121 74.2677 421.439 74.0879 421.77 73.8997 cv
422.121 73.7002 422.486 73.4917 422.858 73.273 cv
423.098 73.1323 423.34 72.9858 423.582 72.8368 cv
423.644 72.7987 423.706 72.7601 423.768 72.7214 cv
424.018 72.5657 424.268 72.4073 424.514 72.2427 cv
424.755 72.0821 424.992 71.9154 425.226 71.7461 cv
425.285 71.7029 425.344 71.6593 425.403 71.6155 cv
425.637 71.4418 425.868 71.265 426.088 71.0821 cv
426.091 71.0804 426.093 71.0785 426.095 71.0768 cv
426.312 70.8964 426.518 70.7098 426.718 70.5204 cv
426.768 70.4721 426.819 70.4234 426.868 70.3746 cv
427.066 70.1793 427.257 69.9811 427.431 69.7762 cv
427.603 69.5736 427.756 69.3643 427.9 69.1521 cv
427.936 69.099 427.97 69.0455 428.005 68.9917 cv
428.142 68.7749 428.269 68.5549 428.371 68.3281 cv
428.499 68.0447 428.595 67.7757 428.677 67.5137 cv
cp
.819608 .839216 .858824 rgb
f
282.935 461.302 mo
274.585 441.15 261.117 422.846 244.259 408.992 cv
237.945 403.804 231.106 399.233 223.804 395.554 cv
187.473 377.248 141.388 374.615 112.576 402.924 cv
108.946 406.491 104.989 413.537 103.225 418.372 cv
98.8399 430.396 103.925 428.583 101.687 430.591 cv
98.1596 433.756 94.9456 437.541 90.7979 439.933 cv
87.245 441.982 82.6431 442.446 79.8859 445.746 cv
76.2009 450.157 77.0633 454.685 81.4251 456.17 cv
84.4338 463.731 99.3784 461.501 106.59 459.707 cv
111.76 458.421 116.608 459.735 121.556 461.101 cv
128.244 462.946 134.987 466.1 141.715 468.43 cv
148.665 470.837 154.929 470.862 161.095 475.497 cv
169.805 482.045 178.907 491.945 186.784 499.746 cv
202.516 515.329 218.645 529.662 223.33 551.816 cv
225.46 561.892 226.111 572.958 224.816 583.171 cv
223.702 591.961 221.772 601.457 218.714 610.508 cv
216.638 616.651 215.143 622.418 212.572 627.696 cv
215.74 628.692 219.475 629.934 223.908 631.496 cv
222.764 639.177 223.3 644.776 224.875 648.047 cv
223.012 643.4 226.115 639.188 230.158 634.996 cv
244.138 620.497 256.73 604.591 266.933 586.956 cv
277.824 568.133 285.594 546.996 288.955 525.59 cv
292.327 504.115 291.394 481.72 282.935 461.302 cv
cp
.34902 .411765 .529412 rgb
f
282.935 461.302 mo
274.585 441.15 261.117 422.846 244.259 408.992 cv
237.945 403.804 231.106 399.233 223.804 395.554 cv
187.473 377.248 141.388 374.615 112.576 402.924 cv
108.946 406.491 104.989 413.537 103.225 418.372 cv
98.8399 430.396 103.925 428.583 101.687 430.591 cv
98.1596 433.756 94.9456 437.541 90.7979 439.933 cv
87.245 441.982 82.6431 442.446 79.8859 445.746 cv
76.2009 450.157 77.0633 454.685 81.4251 456.17 cv
84.4338 463.731 99.3784 461.501 106.59 459.707 cv
111.76 458.421 116.608 459.735 121.556 461.101 cv
128.244 462.946 134.987 466.1 141.715 468.43 cv
148.665 470.837 154.929 470.862 161.095 475.497 cv
169.805 482.045 178.907 491.945 186.784 499.746 cv
202.516 515.329 218.645 529.662 223.33 551.816 cv
225.46 561.892 226.111 572.958 224.816 583.171 cv
223.702 591.961 221.772 601.457 218.714 610.508 cv
216.638 616.651 215.143 622.418 212.572 627.696 cv
215.74 628.692 219.475 629.934 223.908 631.496 cv
222.764 639.177 223.3 644.776 224.875 648.047 cv
223.012 643.4 226.115 639.188 230.158 634.996 cv
244.138 620.497 256.73 604.591 266.933 586.956 cv
277.824 568.133 285.594 546.996 288.955 525.59 cv
292.327 504.115 291.394 481.72 282.935 461.302 cv
cp
f
268.865 409.942 mo
259.272 407.653 251.652 409.824 247.418 411.676 cv
258.249 421.178 267.545 432.551 274.836 445.035 cv
274.822 444.877 274.81 444.74 274.799 444.633 cv
273.995 436.677 279.927 430.644 287.47 428.217 cv
291.215 427.137 296.104 427.519 300.356 428.114 cv
293.828 418.528 277.924 412.14 268.865 409.942 cv
cp
.266667 .32549 .431373 rgb
f
142.575 467.374 mo
138.013 471.037 141.028 499.942 141.96 504.883 cv
143.206 511.48 148.003 516.144 152.542 520.698 cv
153.806 521.966 166.955 532.227 167.018 531.907 cv
168.646 523.634 164.14 515.152 166.089 506.771 cv
167.345 501.372 171.516 498.761 173.728 493.907 cv
177.647 485.31 176.364 477.804 169.588 471.401 cv
163.853 465.981 155.104 461.998 147.226 464.769 cv
145.54 465.363 143.97 466.255 142.575 467.374 cv
cp
f
209.158 647.746 mo
211.336 648.496 218.739 641.239 221.586 638.406 cv
244.939 615.176 262.561 582.194 262.685 548.702 cv
262.81 514.921 245.556 483.469 223.193 459.147 cv
219.64 455.282 215.927 451.565 212.078 447.996 cv
199.701 436.52 184.288 427.249 167.88 422.999 cv
159.536 420.838 150.701 420.038 142.2 421.766 cv
132.648 423.706 124.866 429.759 116.792 434.815 cv
108.197 440.198 102.104 443.496 89.2181 447.564 cv
88.4937 447.792 87.7831 448.068 87.0845 448.365 cv
86.1198 448.776 85.1743 449.239 84.273 449.775 cv
83.377 450.309 82.5033 450.919 81.7857 451.681 cv
81.1936 452.31 80.6812 453.089 80.6172 453.974 cv
80.5885 454.371 80.6614 454.769 80.8076 455.139 cv
80.9621 455.53 81.2205 455.826 81.4282 456.181 cv
81.5449 456.381 81.6176 456.617 81.7272 456.823 cv
81.835 457.026 81.9535 457.223 82.0823 457.414 cv
82.5955 458.172 83.2694 458.809 84.029 459.317 cv
84.8424 459.861 85.7459 460.26 86.6751 460.56 cv
87.7005 460.891 88.762 461.104 89.8296 461.243 cv
90.9804 461.392 92.1417 461.456 93.3018 461.464 cv
94.5028 461.471 95.7038 461.418 96.9008 461.322 cv
98.0833 461.227 99.2623 461.089 100.436 460.918 cv
101.534 460.757 102.628 460.567 103.717 460.349 cv
104.666 460.16 105.612 459.95 106.552 459.716 cv
106.564 459.713 106.577 459.71 106.59 459.707 cv
111.76 458.421 116.608 459.735 121.556 461.101 cv
128.244 462.946 134.987 466.1 141.715 468.43 cv
148.665 470.837 154.929 470.862 161.095 475.497 cv
169.805 482.045 178.907 491.945 186.784 499.746 cv
202.516 515.329 218.645 529.662 223.33 551.816 cv
225.46 561.892 226.111 572.958 224.816 583.171 cv
223.702 591.961 221.772 601.457 218.714 610.508 cv
215.792 619.154 214.034 627.06 208.782 633.894 cv
206.854 637.48 205.308 646.42 209.158 647.746 cv
cp
.819608 .839216 .858824 rgb
f
781.153 624.631 mo
779.795 617.147 778.381 609.67 776.343 602.261 cv
772.309 587.596 768.852 572.584 762.224 558.896 cv
734.909 502.494 659.483 464.195 650.102 461.515 cv
640.721 458.835 592.478 444.54 543.787 464.195 cv
495.097 483.85 502.224 523.159 502.224 523.159 cv
502.224 523.159 493.199 530.083 486.833 533.769 cv
475.777 539.799 479.798 543.484 482.813 546.835 cv
479.463 559.23 506.6 553.535 518.326 549.85 cv
529.322 553.612 545.067 553.874 555.199 553.876 cv
557.943 553.876 581.025 559.844 611.904 559.048 cv
622.253 558.782 632.545 559.996 642.809 561.102 cv
657.571 562.692 671.188 563.249 685.22 568.634 cv
697.405 573.31 708.999 579.511 719.692 586.991 cv
742.901 603.226 764.324 626.599 773.523 653.737 cv
774.501 656.621 777.292 663.509 781.712 662.431 cv
783.396 662.02 785.038 660.867 785.85 659.315 cv
786.77 657.555 786.433 655.374 786.361 653.471 cv
786.263 650.895 785.917 648.332 785.326 645.821 cv
783.667 638.783 782.435 631.704 781.153 624.631 cv
cp
.34902 .411765 .529412 rgb
f
706.118 495.035 mo
706.118 495.035 li
698.409 480.994 709.066 470.896 724.701 463.264 cv
687.625 440.445 654.641 463.264 654.641 463.264 cv
654.645 463.281 654.651 463.297 654.654 463.313 cv
664.185 467.574 684.785 478.675 706.118 495.035 cv
cp
.266667 .32549 .431373 rgb
f
614.76 549.892 mo
615.071 555.038 617.099 579.986 640.767 591.193 cv
627.39 593.396 617.251 592.985 605.448 587.698 cv
588.044 579.902 582.909 575.494 574.875 547.891 cv
581.079 548.645 614.825 549.897 614.76 549.892 cv
cp
f
775.659 651.286 mo
776.492 648.75 776.185 644.354 776.101 643.286 cv
775.517 635.909 772.335 626.88 769.743 620.827 cv
764.875 609.463 759.155 598.479 751.944 588.429 cv
745.11 578.904 736.474 570.802 727.282 563.588 cv
722.981 560.214 718.538 557.023 714.022 553.943 cv
694.085 540.345 671.577 530.847 648.539 523.913 cv
631.946 518.92 614.66 514.292 597.368 512.599 cv
581.189 511.014 566.576 510.494 548.666 516.735 cv
530.575 523.04 522.726 529.405 506.322 538.447 cv
500.152 541.848 489.767 545.219 482.813 546.835 cv
479.463 559.23 506.6 553.535 518.326 549.85 cv
529.322 553.612 545.067 553.874 555.199 553.876 cv
557.943 553.876 581.025 559.844 611.904 559.048 cv
622.253 558.782 632.545 559.996 642.809 561.102 cv
657.571 562.692 671.188 563.249 685.22 568.634 cv
686.743 569.219 688.257 569.827 689.761 570.459 cv
700.289 574.881 710.336 580.446 719.692 586.991 cv
719.693 586.991 719.693 586.992 719.694 586.993 cv
719.695 586.993 li
719.696 586.994 719.697 586.994 719.697 586.995 cv
742.623 603.033 763.796 626.038 773.175 652.753 cv
774.409 654.161 775.307 652.358 775.659 651.286 cv
cp
.819608 .839216 .858824 rgb
f
815.369 655.315 mo
810.384 654.174 805.21 654.195 800.234 653.01 cv
794.662 651.683 791.009 651.49 785.635 647.291 cv
786.034 649.329 786.282 651.395 786.361 653.471 cv
786.433 655.374 786.77 657.555 785.85 659.315 cv
785.038 660.867 783.396 662.02 781.712 662.431 cv
777.706 663.408 775.044 657.85 773.851 654.652 cv
773.85 654.649 773.849 654.647 773.848 654.644 cv
773.88 655.733 773.918 656.832 773.97 657.959 cv
774.234 663.681 770.136 667.537 767.664 672.452 cv
761.965 683.78 765.882 697.772 772.785 708.41 cv
772.134 701.861 776.819 696.073 781.522 691.469 cv
786.225 686.866 791.535 682.096 792.715 675.621 cv
799.801 682.353 810.237 683.776 819.916 685.135 cv
829.595 686.495 840.086 688.58 846.397 696.043 cv
844.69 677.88 833.153 659.383 815.369 655.315 cv
cp
.266667 .32549 .431373 rgb
f
510.408 161.162 mo
508.236 158.656 509.456 153.876 511.213 149.732 cv
510.944 150.087 510.812 150.274 510.812 150.274 cv
502.178 144.944 494.87 140.558 478.408 140.271 cv
468.933 140.106 447.716 149.608 439.34 158.988 cv
449.056 156.978 452.406 161.333 456.762 163.679 cv
463.374 167.239 476.225 171.373 483.559 171.496 cv
493.8 171.666 500.908 173.382 500.908 173.382 cv
500.908 173.382 502.437 179.313 508.132 188.024 cv
513.828 196.734 517.178 198.074 519.188 202.095 cv
521.198 206.115 518.518 210.135 517.178 216.501 cv
521.868 213.486 529.172 210.171 534.408 195.934 cv
537.871 186.516 536.91 175.48 523.011 159.998 cv
517.503 162.029 511.844 163.397 510.408 161.162 cv
cp
f
889.39 159.882 mo
893.41 149.161 903.461 110.968 814.344 74.1155 cv
725.228 37.2628 658.893 58.7043 650.852 62.0546 cv
552.081 98.5434 515.334 144.28 511.213 149.732 cv
509.456 153.876 508.236 158.656 510.408 161.162 cv
511.844 163.397 517.503 162.029 523.011 159.998 cv
522.975 159.959 522.943 159.921 522.908 159.882 cv
585.557 130.735 632.426 146.481 651.523 150.501 cv
717.857 174.288 758.73 173.283 765.766 173.283 cv
772.801 173.283 788.212 176.298 794.913 178.643 cv
823.725 188.024 855.888 181.323 855.888 181.323 cv
855.888 181.323 869.958 190.704 889.39 194.389 cv
908.821 198.074 907.816 192.379 905.806 188.694 cv
912.842 181.658 900.111 169.262 889.39 159.882 cv
cp
.34902 .411765 .529412 rgb
f
768.446 170.602 mo
765.504 173.188 762.971 177.796 760.207 180.91 cv
756.798 184.749 753.07 188.198 749.403 191.778 cv
745.626 195.467 744.411 200.311 743.055 205.225 cv
741.57 210.609 740.821 215.763 738.629 220.856 cv
736.591 225.592 734.03 229.505 729.583 232.56 cv
741.744 233.056 750.651 228.495 761.472 223.35 cv
766.568 220.927 770.991 218.052 775.044 214.024 cv
783.175 205.945 797.37 187.934 794.999 175.144 cv
793.908 169.262 779.502 160.887 768.446 170.602 cv
cp
.266667 .32549 .431373 rgb
f
906.517 190.273 mo
906.485 190.183 906.453 190.092 906.418 190.002 cv
906.245 189.551 906.033 189.109 905.806 188.694 cv
905.568 188.258 904.922 188.014 904.499 187.82 cv
903.745 187.475 902.959 187.2 902.177 186.929 cv
896.162 184.845 890.612 181.196 885.348 177.677 cv
884.095 176.839 882.853 175.984 881.62 175.117 cv
867.849 165.429 856.186 150.289 840.057 144.322 cv
821.727 137.542 799.183 131.878 779.908 128.409 cv
751.093 123.221 721.994 119.612 692.786 117.601 cv
663.811 115.606 634.458 115.936 605.513 118.971 cv
598.903 119.664 592.346 120.819 585.908 122.472 cv
576.156 124.976 566.983 126.975 557.628 130.866 cv
548.432 134.691 538.019 138.821 529.953 144.755 cv
527.485 146.571 514.7 157.13 521.283 159.808 cv
521.745 159.996 522.305 160.002 522.908 159.882 cv
531.812 155.739 541.009 152.225 550.44 149.479 cv
560.091 146.669 569.977 144.669 579.973 143.592 cv
589.543 142.562 599.199 142.381 608.802 143.03 cv
618.839 143.708 628.817 145.315 638.625 147.532 cv
642.064 148.309 645.488 149.147 648.926 149.926 cv
649.791 150.119 650.655 150.318 651.523 150.501 cv
717.857 174.288 758.73 173.283 765.766 173.283 cv
772.801 173.283 788.212 176.298 794.913 178.643 cv
823.725 188.024 855.888 181.323 855.888 181.323 cv
855.888 181.323 869.958 190.704 889.39 194.389 cv
890.604 194.62 891.739 194.813 892.798 194.973 cv
895.447 195.373 897.627 195.561 899.411 195.58 cv
900.125 195.588 900.776 195.569 901.368 195.526 cv
901.703 195.502 902.015 195.467 902.314 195.428 cv
902.806 195.363 903.254 195.28 903.653 195.178 cv
903.927 195.108 904.172 195.028 904.405 194.942 cv
904.656 194.849 904.884 194.748 905.091 194.639 cv
905.2 194.582 905.303 194.522 905.4 194.46 cv
905.802 194.206 906.106 193.917 906.328 193.603 cv
906.42 193.472 906.5 193.336 906.565 193.196 cv
906.737 192.827 906.822 192.434 906.831 192.027 cv
906.84 191.66 906.792 191.282 906.703 190.904 cv
906.653 190.693 906.589 190.483 906.517 190.273 cv
cp
.819608 .839216 .858824 rgb
f
661.738 347.965 mo
652.545 332.995 634.045 332.495 628.212 332.995 cv
639.212 316.495 621.962 301.245 630.246 272.6 cv
590.043 294.392 590.043 329.427 589.149 341.935 cv
589.112 341.941 589.067 341.942 589.029 341.947 cv
590.887 345.253 592.692 347.226 595.079 354.703 cv
609.857 356.16 623.075 371.96 637.691 374.75 cv
646.06 376.348 654.733 376.234 662.98 374.02 cv
668.571 372.519 673.956 370.1 678.735 366.822 cv
679.392 366.372 683.169 362.614 683.85 362.706 cv
683.847 362.706 668.905 359.636 661.738 347.965 cv
cp
.266667 .32549 .431373 rgb
f
617.722 340.284 mo
615.271 335.967 611.615 336.415 607.138 338.56 cv
602.796 340.64 598.844 341.355 597.489 341.508 cv
575.413 344.007 544.352 333.766 528.399 317.813 cv
499.343 288.758 464.526 263.272 424.639 250.31 cv
397.762 241.575 367.534 236.544 338.887 241.785 cv
321.365 244.99 287.157 258.503 286.034 287.867 cv
285.509 291.166 250.823 296.662 261.252 308.209 cv
255.908 316.722 278.457 326.305 305.658 322.534 cv
326.23 335.527 351.512 341.193 375.759 346.569 cv
389.315 349.575 399.348 351.519 412.962 354.126 cv
431.196 357.618 449.662 360.056 468.222 360.804 cv
489.748 361.671 551.132 362.76 572.596 359.812 cv
575.342 359.435 591.72 356.074 604.398 351.958 cv
613.776 348.913 619.407 343.253 617.722 340.284 cv
cp
.34902 .411765 .529412 rgb
f
441.1 334.191 mo
416.478 322.27 392.22 309.132 366.741 300.696 cv
343.698 293.066 322.951 296.369 300.101 301.89 cv
290.924 304.107 281.623 305.867 272.259 307.082 cv
271.078 307.235 261.867 307.23 261.252 308.209 cv
255.908 316.722 278.457 326.305 305.658 322.534 cv
326.23 335.527 351.512 341.193 375.759 346.569 cv
389.315 349.575 399.348 351.519 412.962 354.126 cv
431.196 357.618 449.662 360.056 468.222 360.804 cv
482.171 361.366 512.853 362.021 538.565 361.608 cv
503.425 362.172 471.977 349.139 441.1 334.191 cv
cp
.819608 .839216 .858824 rgb
f
187.119 477.3 mo
187.118 488.814 191.396 501.599 201.641 507.919 cv
208.421 512.102 230.257 521.673 237.038 515.158 cv
235.296 516.831 228.23 507.47 227.46 506.489 cv
223.872 501.926 222.943 491.621 222.938 486.043 cv
222.931 478.122 222.239 468.061 215.495 462.753 cv
212.074 460.062 207.296 458.771 202.99 459.026 cv
193.143 459.611 187.12 467.829 187.119 477.3 cv
cp
.266667 .32549 .431373 rgb
f
142.102 418.621 mo
139.107 418.943 135.945 420.372 135.888 423.718 cv
135.782 429.981 144.999 427.008 147.588 424.895 cv
148.664 424.017 149.659 422.582 149.003 421.084 cv
148.448 419.818 147.013 419.102 145.829 418.808 cv
144.839 418.561 143.488 418.473 142.102 418.621 cv
cp
0 0 0 rgb
f
142.155 419.118 mo
140.818 419.262 136.451 420.018 136.389 423.727 cv
136.364 425.154 136.848 426.087 137.866 426.581 cv
140.397 427.807 145.481 425.969 147.272 424.507 cv
147.736 424.129 149.199 422.778 148.545 421.285 cv
147.957 419.945 146.226 419.421 145.709 419.293 cv
144.716 419.047 143.419 418.982 142.155 419.118 cv
142.155 419.118 li
cp
139.961 427.984 mo
139.031 427.984 138.159 427.834 137.43 427.481 cv
136.477 427.019 135.35 425.989 135.389 423.709 cv
135.44 420.654 137.93 418.566 142.048 418.124 cv
142.048 418.124 li
143.427 417.975 144.849 418.048 145.95 418.322 cv
146.579 418.479 148.69 419.125 149.461 420.883 cv
150.093 422.326 149.512 423.971 147.904 425.282 cv
146.408 426.504 142.893 427.984 139.961 427.984 cv
cp
.235294 .270588 .341176 rgb
f
142.759 422.163 mo
143.187 423.042 144.319 423.324 145.035 422.615 cv
145.595 422.059 145.797 421.137 145.264 420.502 cv
144.828 419.981 144.054 419.815 143.429 420.061 cv
142.549 420.407 142.393 421.411 142.759 422.163 cv
cp
1 1 1 rgb
f
538.725 518.217 mo
538.401 515.669 540.893 513.791 543.126 513.308 cv
545.086 512.884 547.153 513.23 548.97 514.032 cv
550.974 514.917 553.76 516.827 551.823 519.237 cv
549.823 521.723 545.846 522.667 542.83 522.015 cv
540.907 521.599 538.991 520.307 538.725 518.217 cv
cp
0 0 0 rgb
f
539.221 518.154 mo
539.47 520.104 541.377 521.189 542.936 521.527 cv
545.58 522.096 549.456 521.38 551.433 518.923 cv
551.903 518.338 552.067 517.787 551.932 517.238 cv
551.701 516.29 550.519 515.263 548.768 514.49 cv
546.915 513.671 544.951 513.426 543.232 513.796 cv
541.387 514.196 538.923 515.812 539.221 518.154 cv
539.221 518.154 li
cp
544.735 522.707 mo
544.025 522.707 543.344 522.638 542.725 522.503 cv
540.848 522.098 538.543 520.748 538.229 518.281 cv
538.229 518.281 li
537.873 515.484 540.432 513.379 543.021 512.82 cv
544.942 512.403 547.126 512.672 549.172 513.576 cv
550.384 514.111 552.482 515.268 552.904 517.001 cv
553.114 517.861 552.881 518.718 552.212 519.55 cv
550.456 521.736 547.392 522.707 544.735 522.707 cv
cp
.235294 .270588 .341176 rgb
f
545.206 516.878 mo
545.167 515.923 545.909 515.116 546.865 515.077 cv
547.82 515.037 548.627 515.78 548.666 516.735 cv
548.706 517.691 547.963 518.497 547.008 518.537 cv
546.052 518.576 545.246 517.833 545.206 516.878 cv
cp
1 1 1 rgb
f
600.752 544.332 mo
608.315 550.974 617.417 553.054 627.32 553.748 cv
633.816 554.204 639.87 553.339 645.689 550.877 cv
651.765 548.307 658.589 545.52 664.396 535.469 cv
660.418 536.363 651.76 536.299 648.752 535.686 cv
641.554 534.221 634.039 532.728 627.949 528.385 cv
622.571 524.55 618.021 519.972 611.069 519.425 cv
606.217 519.043 599.359 520.485 596.721 525.16 cv
592.332 532.94 595.173 539.432 600.752 544.332 cv
cp
.266667 .32549 .431373 rgb
f
838.466 139.78 mo
840.349 136.572 857.924 137.867 850.527 148.491 cv
846.058 154.909 835.564 144.726 838.466 139.78 cv
cp
0 0 0 rgb
f
838.898 140.033 mo
837.415 142.558 839.933 146.764 843.173 148.839 cv
844.525 149.705 847.91 151.375 850.117 148.205 cv
851.806 145.78 852.253 143.735 851.448 142.128 cv
850.269 139.777 846.655 138.837 843.917 138.746 cv
841.172 138.658 839.313 139.325 838.898 140.033 cv
838.898 140.033 li
cp
846.745 151.041 mo
845.46 151.041 844.056 150.591 842.634 149.681 cv
839.004 147.357 836.223 142.615 838.035 139.527 cv
838.035 139.527 li
838.874 138.096 841.747 137.676 843.951 137.747 cv
847.106 137.851 850.968 138.939 852.341 141.679 cv
853.325 143.639 852.852 146.027 850.937 148.777 cv
849.892 150.278 848.419 151.041 846.745 151.041 cv
cp
.235294 .270588 .341176 rgb
f
840.811 142.114 mo
840.811 141.096 841.636 140.271 842.654 140.271 cv
843.672 140.271 844.497 141.096 844.497 142.114 cv
844.497 143.131 843.672 143.956 842.654 143.956 cv
841.636 143.956 840.811 143.131 840.811 142.114 cv
cp
1 1 1 rgb
f
760.607 175.425 mo
760.607 175.425 745.329 186.349 729.247 191.709 cv
711.47 197.635 686.356 193.133 675.309 176.968 cv
687.035 176.968 690.473 178.794 699.5 173.383 cv
704.217 170.555 710.537 164.987 715.053 161.893 cv
719.229 159.031 724.204 157.15 728.976 155.517 cv
738.024 152.42 750.058 150.029 757.636 157.607 cv
763.788 163.759 765.431 170.602 760.607 175.425 cv
cp
.266667 .32549 .431373 rgb
f
340.063 296.014 mo
339.043 300.806 324.992 300.504 326.755 293.184 cv
328.34 286.598 341.217 290.585 340.063 296.014 cv
cp
0 0 0 rgb
f
331.886 290.255 mo
329.797 290.255 327.786 291.037 327.241 293.301 cv
326.883 294.788 327.217 296.024 328.235 296.973 cv
330.21 298.818 334.204 299.086 336.773 298.277 cv
337.692 297.987 339.279 297.294 339.573 295.91 cv
339.573 295.91 li
340.1 293.434 337.145 291.214 333.984 290.497 cv
333.311 290.345 332.594 290.255 331.886 290.255 cv
cp
333.72 299.712 mo
331.434 299.712 329.043 299.095 327.553 297.704 cv
326.27 296.508 325.827 294.904 326.268 293.067 cv
327.112 289.567 330.861 288.764 334.204 289.522 cv
337.789 290.335 341.231 292.923 340.552 296.118 cv
340.255 297.512 339.02 298.617 337.074 299.23 cv
336.079 299.544 334.914 299.712 333.72 299.712 cv
cp
.235294 .270588 .341176 rgb
f
336.694 294.027 mo
336.487 294.999 335.531 295.62 334.559 295.413 cv
333.587 295.206 332.967 294.251 333.173 293.279 cv
333.38 292.307 334.336 291.686 335.308 291.893 cv
336.28 292.1 336.901 293.055 336.694 294.027 cv
cp
1 1 1 rgb
f
63.1315 228.266 mo
57.7226 224.113 57.1377 215.685 57.1377 215.685 cv
57.1377 215.685 53.4701 223.435 48.8814 231.38 cv
46.4759 235.545 37.0858 230.67 38.0871 225.965 cv
38.0911 225.946 38.0934 225.936 38.0934 225.936 cv
38.0934 225.936 21.2536 234.122 12.5507 244.325 cv
12.4761 244.412 12.4058 244.5 12.3324 244.587 cv
12.1518 244.803 11.97 245.019 11.7971 245.236 cv
11.5423 245.556 11.2957 245.877 11.0598 246.2 cv
11.0511 246.211 11.0421 246.223 11.0335 246.235 cv
10.7586 246.612 10.4976 246.991 10.2492 247.372 cv
10.2199 247.416 10.1881 247.461 10.1591 247.506 cv
9.93391 247.856 9.72391 248.209 9.52321 248.562 cv
9.48321 248.632 9.43841 248.701 9.39941 248.772 cv
9.16991 249.187 8.95581 249.604 8.76331 250.022 cv
8.35151 250.897 7.96401 251.748 7.58751 252.587 cv
7.48261 252.822 7.38051 253.052 7.27821 253.284 cv
6.98161 253.954 6.69581 254.614 6.42121 255.261 cv
6.35021 255.429 6.27571 255.6 6.20611 255.766 cv
5.87481 256.556 5.56001 257.329 5.26051 258.085 cv
5.19511 258.251 5.13411 258.411 5.07021 258.575 cv
4.83171 259.185 4.60351 259.784 4.38511 260.372 cv
4.31391 260.563 4.24201 260.756 4.17291 260.945 cv
3.91141 261.662 3.66031 262.367 3.42801 263.051 cv
3.42011 263.074 3.41321 263.096 3.40531 263.119 cv
3.18021 263.783 2.97221 264.428 2.77331 265.061 cv
2.71981 265.232 2.66801 265.4 2.61631 265.568 cv
2.44861 266.114 2.28961 266.65 2.14071 267.173 cv
2.11151 267.276 2.07971 267.382 2.05121 267.483 cv
1.87901 268.098 1.72051 268.695 1.57331 269.279 cv
1.54161 269.404 1.51291 269.526 1.48231 269.65 cv
1.36621 270.122 1.25791 270.583 1.15741 271.034 cv
1.12761 271.168 1.09691 271.302 1.06841 271.434 cv
.950614 271.98 .841214 272.514 .745214 273.03 cv
.739214 273.062 .734514 273.093 .728614 273.124 cv
.639814 273.606 .562114 274.073 .491214 274.529 cv
.471414 274.656 .452714 274.781 .434314 274.906 cv
.374214 275.315 .320214 275.714 .273714 276.103 cv
.265314 276.172 .255114 276.245 .247114 276.314 cv
.195714 276.76 .154114 277.191 .119614 277.611 cv
.111014 277.716 .104414 277.817 .096814 277.921 cv
.072914 278.245 .053514 278.56 .039114 278.868 cv
.034014 278.975 .028114 279.082 .024214 279.187 cv
.010014 279.564 .00111403 279.931 1.40267e-005 280.283 cv
-.000185973 280.352 .00181403 280.416 .00211403 280.485 cv
.00321403 280.771 .00831403 281.049 .017314 281.319 cv
.021114 281.432 .025514 281.543 .030514 281.653 cv
.041814 281.897 .056014 282.133 .073214 282.364 cv
.079214 282.444 .083614 282.528 .090214 282.606 cv
.113914 282.886 .142514 283.154 .174114 283.414 cv
.187814 283.527 .202914 283.635 .218014 283.745 cv
.240114 283.905 .263414 284.062 .288214 284.214 cv
.306014 284.325 .323514 284.436 .342714 284.542 cv
.377414 284.735 .414114 284.92 .452514 285.1 cv
.481614 285.236 .512014 285.365 .542814 285.494 cv
.566714 285.594 .590614 285.694 .615514 285.79 cv
.646214 285.908 .677314 286.022 .709114 286.134 cv
.728614 286.202 .748414 286.267 .768314 286.333 cv
.846114 286.591 .925814 286.833 1.00751 287.056 cv
1.00791 287.057 1.00821 287.058 1.00861 287.059 cv
1.63781 288.772 2.32831 289.453 2.32831 289.453 cv
2.32831 289.453 .758614 287.366 4.66001 282.417 cv
5.23671 281.685 5.93511 280.89 6.77301 280.032 cv
6.83581 279.968 6.90301 279.901 6.96741 279.836 cv
7.17731 279.624 7.39481 279.408 7.62221 279.189 cv
7.71721 279.097 7.81581 279.003 7.91411 278.91 cv
8.12491 278.71 8.34341 278.506 8.56921 278.299 cv
8.68561 278.193 8.80301 278.086 8.92361 277.977 cv
9.15021 277.773 9.38681 277.565 9.62821 277.356 cv
9.75671 277.244 9.88291 277.133 10.0158 277.019 cv
10.2775 276.796 10.5528 276.566 10.8315 276.336 cv
10.957 276.232 11.077 276.13 11.2061 276.025 cv
11.6182 275.689 12.0451 275.347 12.494 274.996 cv
20.207 268.975 24.9705 269.963 29.0772 268.162 cv
29.5502 267.955 30.0021 267.732 30.4454 267.503 cv
30.5715 267.438 30.6959 267.373 30.8199 267.307 cv
31.1677 267.121 31.5084 266.931 31.8414 266.738 cv
31.9462 266.677 32.0526 266.617 32.1562 266.556 cv
32.4934 266.355 32.8235 266.153 33.1491 265.95 cv
35.4498 264.517 37.5004 263.068 39.8186 262.328 cv
41.1382 261.906 42.5435 261.708 44.1375 261.882 cv
50.0591 262.53 55.2999 269.483 63.278 273.866 cv
82.2237 284.589 82.8958 281.157 86.6872 286.12 cv
89.9696 290.418 91.2998 294.716 93.288 298.262 cv
93.5963 298.812 93.918 299.347 94.2678 299.858 cv
107.958 255.387 78.0266 241.302 63.1315 228.266 cv
cp
.266667 .32549 .431373 rgb
f
346.791 74.8746 mo
346.401 71.5066 358.393 62.8547 360.199 72.8296 cv
361.483 79.9266 347.286 79.1414 346.791 74.8746 cv
cp
0 0 0 rgb
f
347.288 74.8172 mo
347.414 75.9007 348.706 76.5813 349.466 76.8904 cv
352.127 77.9764 356.419 77.9685 358.563 76.2283 cv
359.572 75.4104 359.956 74.2972 359.706 72.9183 cv
359.134 69.7493 357.494 68.346 354.829 68.7376 cv
351.099 69.2908 347.096 73.1639 347.288 74.8172 cv
347.288 74.8172 li
cp
353.606 78.6341 mo
351.982 78.6341 350.365 78.3367 349.088 77.8167 cv
347.424 77.1385 346.432 76.1145 346.295 74.9324 cv
346.295 74.9324 li
346.004 72.4222 350.785 68.3265 354.683 67.7483 cv
356.536 67.4729 359.789 67.7552 360.691 72.7405 cv
361.006 74.4803 360.488 75.9549 359.193 77.0052 cv
357.789 78.1438 355.692 78.6341 353.606 78.6341 cv
cp
.235294 .270588 .341176 rgb
f
350.126 73.7366 mo
349.987 72.8233 350.614 71.9699 351.528 71.8306 cv
352.441 71.6913 353.294 72.3187 353.434 73.2321 cv
353.573 74.1455 352.946 74.9988 352.032 75.1381 cv
351.119 75.2774 350.266 74.65 350.126 73.7366 cv
cp
1 1 1 rgb
f
305.369 111.62 mo
305.366 111.62 305.362 111.621 305.358 111.621 cv
299.599 111.896 293.829 112.755 288.504 114.037 cv
288.483 114.042 288.462 114.047 288.441 114.052 cv
287.957 114.169 287.479 114.29 287.003 114.413 cv
286.933 114.432 286.862 114.45 286.792 114.468 cv
286.35 114.584 285.912 114.703 285.478 114.825 cv
285.376 114.854 285.274 114.882 285.173 114.911 cv
284.76 115.028 284.352 115.148 283.946 115.27 cv
283.83 115.305 283.715 115.341 283.599 115.376 cv
283.207 115.496 282.819 115.618 282.434 115.743 cv
282.311 115.783 282.189 115.824 282.066 115.864 cv
281.692 115.988 281.32 116.113 280.954 116.24 cv
280.828 116.284 280.704 116.329 280.579 116.374 cv
280.218 116.502 279.859 116.631 279.506 116.762 cv
279.39 116.806 279.277 116.851 279.162 116.895 cv
278.804 117.031 278.447 117.167 278.099 117.307 cv
278.023 117.338 277.95 117.369 277.875 117.4 cv
276.756 117.855 275.689 118.329 274.677 118.82 cv
274.532 118.89 274.383 118.96 274.24 119.031 cv
274.014 119.143 273.797 119.258 273.577 119.372 cv
273.393 119.468 273.206 119.563 273.026 119.66 cv
272.824 119.768 272.63 119.879 272.434 119.989 cv
272.246 120.094 272.059 120.198 271.877 120.304 cv
271.692 120.412 271.514 120.521 271.335 120.63 cv
271.152 120.741 270.97 120.852 270.793 120.965 cv
270.625 121.072 270.461 121.179 270.298 121.288 cv
270.122 121.404 269.949 121.522 269.779 121.64 cv
269.626 121.746 269.477 121.852 269.331 121.959 cv
269.162 122.082 268.998 122.205 268.837 122.329 cv
268.7 122.434 268.565 122.539 268.433 122.645 cv
268.275 122.773 268.123 122.901 267.973 123.03 cv
267.851 123.134 267.729 123.238 267.613 123.343 cv
267.465 123.477 267.325 123.611 267.186 123.746 cv
267.081 123.847 266.973 123.948 266.873 124.05 cv
266.734 124.193 266.605 124.336 266.477 124.479 cv
266.39 124.575 266.299 124.67 266.218 124.767 cv
266.082 124.926 265.96 125.087 265.837 125.248 cv
265.776 125.329 265.708 125.409 265.65 125.49 cv
265.476 125.732 265.316 125.975 265.173 126.219 cv
265.696 127.235 266.053 128.583 266.257 130.141 cv
266.563 132.479 266.526 135.292 266.191 138.172 cv
265.857 141.053 265.224 144 264.339 146.608 cv
264.205 147.001 264.044 147.427 263.868 147.869 cv
263.81 148.014 263.745 148.167 263.683 148.316 cv
263.556 148.624 263.42 148.94 263.274 149.267 cv
263.19 149.456 263.104 149.647 263.013 149.842 cv
262.87 150.152 262.715 150.473 262.557 150.797 cv
262.453 151.009 262.355 151.216 262.245 151.434 cv
262.036 151.849 261.81 152.278 261.58 152.71 cv
261.367 153.108 261.143 153.515 260.913 153.925 cv
260.797 154.134 260.682 154.341 260.561 154.553 cv
260.341 154.936 260.113 155.324 259.88 155.716 cv
259.789 155.868 259.696 156.022 259.603 156.175 cv
259.335 156.619 259.062 157.064 258.777 157.515 cv
258.773 157.521 258.769 157.527 258.765 157.533 cv
256.091 161.756 252.71 166.244 248.95 170.023 cv
248.95 170.023 li
246.863 172.12 244.667 174.012 242.403 175.505 cv
258.095 178.264 276.663 166.374 291.573 155.025 cv
306.484 143.676 311.937 111.566 311.937 111.566 cv
309.767 111.491 307.569 111.515 305.369 111.62 cv
cp
.266667 .32549 .431373 rgb
f
662.15 58.5463 mo
673.698 55.6198 693.022 52.2399 718.028 52.9066 cv
709.927 38.6287 687.919 7.42809 653.198 14.1465 cv
662.243 26.8774 665.259 37.3225 665.259 45.6388 cv
665.259 50.8453 664.015 55.1189 662.15 58.5463 cv
cp
f
426.378 252.963 mo
426.378 252.963 449.003 223.756 492.886 246.615 cv
479.82 253.315 469.434 255.996 474.459 274.757 cv
456.127 273.072 428.724 262.008 426.378 252.963 cv
cp
f
435.575 357.448 mo
426.724 346.198 425.747 335.477 415.009 330.683 cv
405.039 326.231 395.387 329.824 392.558 339.226 cv
387.701 355.367 402.806 367.838 415.257 374.578 cv
423.732 379.165 434.268 382.001 443.961 381.81 cv
450.427 381.683 457.466 379.223 462.872 375.822 cv
447.908 370.385 443.635 367.693 435.575 357.448 cv
cp
f
224.875 648.047 mo
223.671 645.546 223.081 641.673 223.378 636.56 cv
222.782 637.177 222.192 637.804 221.586 638.406 cv
218.739 641.239 211.336 648.496 209.158 647.746 cv
205.308 646.42 206.854 637.48 208.782 633.894 cv
199.411 646.09 184.113 637.218 168.597 651.251 cv
160.088 658.946 151.278 675.236 159.475 685.92 cv
158.807 685.05 165.235 678.3 166.011 677.478 cv
170.367 672.864 177.155 671.371 183.287 671.885 cv
189.058 672.369 195.608 669.513 200.907 665.833 cv
199.475 677.542 208.274 686.203 212.915 695.958 cv
215.047 700.438 215.018 705.646 214.148 710.61 cv
213.193 716.058 211.287 716.951 209.216 721.843 cv
215.365 722.066 220.69 719.966 224.642 717.177 cv
234.799 710.008 240.513 702.171 241.646 689.72 cv
243.053 674.266 235.043 662.273 226.16 650.318 cv
225.588 649.548 225.174 648.793 224.875 648.047 cv
cp
f
399.073 76.4598 mo
397.214 76.9593 li
386.687 79.7889 375.802 82.7151 365.09 83.1819 cv
364.851 83.1922 li
364.709 83.385 li
364.243 84.0188 364.018 84.6341 363.779 85.2859 cv
363.173 86.9392 362.487 88.8138 357.277 91.9417 cv
357.791 92.7991 li
363.305 89.4891 364.088 87.3489 364.718 85.6297 cv
364.914 85.0965 365.085 84.6272 365.382 84.1697 cv
376.123 83.6643 386.975 80.7469 397.474 77.9246 cv
399.332 77.4256 li
408.791 74.8903 419.355 71.1797 426.206 62.9473 cv
426.005 62.9018 425.801 62.8636 425.588 62.841 cv
425.633 62.5682 425.65 62.3149 425.669 62.0607 cv
425.659 62.0525 li
418.996 70.2542 408.481 73.9378 399.073 76.4598 cv
cp
.278431 .32549 .419608 rgb
f
383.959 66.4632 mo
384.527 67.2854 li
394.035 60.7126 394.667 56.0057 394.48 54.2713 cv
394.12 54.1918 393.768 54.105 393.429 54.0088 cv
393.451 54.0537 395.014 58.8201 383.959 66.4632 cv
cp
f
873.295 156.362 mo
880.986 156.575 886.506 158.553 889.4 159.89 cv
889.396 159.887 889.393 159.885 889.39 159.882 cv
889.5 159.587 889.616 159.268 889.733 158.933 cv
886.693 157.527 881.117 155.578 873.323 155.362 cv
873.295 156.362 li
cp
f
859.273 161.78 mo
859.09 161.578 li
858.821 161.623 li
858.225 161.722 857.66 161.827 857.11 161.929 cv
853.951 162.516 851.454 162.982 846.987 161.637 cv
846.698 162.595 li
851.399 164.01 854.13 163.501 857.293 162.912 cv
857.753 162.827 858.225 162.739 858.716 162.655 cv
881.468 187.635 900.444 189.224 904.88 189.224 cv
905.246 189.224 905.733 189.225 906.079 189.226 cv
905.991 189.045 905.9 188.867 905.806 188.694 cv
905.953 188.547 906.079 188.394 906.209 188.242 cv
904.153 188.356 883.721 188.736 859.273 161.78 cv
cp
f
311.155 305.278 mo
313.597 307.617 316.119 307.615 321.019 307.602 cv
321.017 306.602 li
316.113 306.609 313.871 306.617 311.659 304.37 cv
311.454 304.162 li
311.173 304.238 li
282.905 311.837 262.429 307.998 260.793 307.668 cv
260.935 307.847 261.088 308.027 261.252 308.209 cv
261.146 308.378 261.069 308.549 260.984 308.719 cv
262.684 309.027 268.526 309.96 276.748 309.96 cv
285.431 309.96 297.286 308.977 311.155 305.278 cv
cp
f
108.667 429.713 mo
110.759 429.622 113.362 429.376 114.944 428.277 cv
114.372 427.456 li
113.002 428.408 110.581 428.628 108.624 428.713 cv
108.163 428.734 107.7 428.743 107.236 428.753 cv
105.844 428.782 103.816 428.956 102.169 429.324 cv
102.35 429.685 102.364 429.932 101.862 430.426 cv
103.456 429.995 105.695 429.785 107.257 429.752 cv
107.728 429.742 108.199 429.733 108.667 429.713 cv
cp
f
81.9466 457.185 mo
82.0631 456.483 82.8795 453.901 88.4574 452.916 cv
90.8529 452.493 93.0067 452.171 95.0892 451.86 cv
99.1332 451.253 102.626 450.73 106.099 449.722 cv
112.547 447.849 118.417 444.224 124.094 440.717 cv
124.889 440.226 125.681 439.738 126.471 439.255 cv
127.485 438.636 128.485 437.955 129.451 437.297 cv
130.781 436.392 132.153 435.456 133.57 434.682 cv
134.143 434.947 li
136.433 436.017 139.295 437.351 142.59 437.246 cv
142.559 436.246 li
139.474 436.339 136.874 435.12 134.567 434.041 cv
133.536 433.565 li
133.318 433.681 li
131.776 434.503 130.308 435.503 128.888 436.471 cv
127.932 437.122 126.943 437.795 125.95 438.402 cv
125.159 438.884 124.365 439.374 123.568 439.866 cv
117.949 443.337 112.138 446.927 105.82 448.761 cv
102.412 449.751 98.9496 450.27 94.9408 450.87 cv
92.8519 451.183 90.6923 451.507 88.2836 451.932 cv
83.6434 452.751 81.9308 454.629 81.3002 455.985 cv
81.34 456.045 81.3813 456.104 81.4188 456.167 cv
81.421 456.168 81.4229 456.169 81.4251 456.17 cv
81.5695 456.532 81.7494 456.866 81.9466 457.185 cv
cp
f
515.312 525.429 mo
515.046 524.464 li
509.139 526.093 502.78 522.922 502.14 522.592 cv
502.189 522.959 502.224 523.159 502.224 523.159 cv
502.224 523.159 502.051 523.292 501.754 523.517 cv
502.605 523.955 506.755 525.951 511.317 525.951 cv
512.608 525.951 513.957 525.802 515.312 525.429 cv
cp
f
534.404 530.536 mo
534.956 530.35 535.756 530.503 536.761 530.696 cv
538.583 531.044 541.081 531.522 544.589 530.566 cv
544.326 529.601 li
541.044 530.498 538.678 530.043 536.949 529.713 cv
535.765 529.486 534.828 529.306 534.008 529.615 cv
533.918 529.659 li
500.878 550.386 484.42 546.898 482.358 546.332 cv
482.511 546.501 482.663 546.668 482.813 546.835 cv
482.756 547.045 482.73 547.237 482.69 547.436 cv
483.816 547.686 485.892 548.039 488.444 548.039 cv
495.857 548.039 510.631 545.44 534.404 530.536 cv
cp
f
300.841 290.776 mo
293.699 290.776 287.203 287.971 286.064 287.453 cv
286.057 287.593 286.039 287.726 286.034 287.867 cv
286.007 288.034 285.889 288.207 285.697 288.386 cv
287.038 288.999 293.511 291.776 300.841 291.776 cv
300.841 290.776 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%Title: (dolphins.eps)
%%CreationDate: 10/9/2015 1:28 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bic6FdPh#NSoa$Ya?(5CY0<p$0XfBo%Bn]<'d,b286?M\j8&3Dp,B.1XATACdPK@ue+\9FD@7&ACLgsl)3K(/>((WPf^92l
%lbe3'=,a70D(<A6'qb<:s6\OJ8%mO1nZak",j5X?X#@@6SQ:Bo<5V_B?nt\s%_%H.\qA,Jd;Z-J*]JiPiFol/C&I6).aL/foV>F]
%d-^R_^K9_!cIP20WBE/sg:_sE4WGJa-5Gg"Ja#+rr+8X1Vu_9Y\GQ!pJ3`GVab3,QD56m6f+73//dY_+FD>p5Q]NZXl&/QX-GHeT
%qOXEg&+:ra/+n83pdI$E6m]L1TJ($+b2S?LSgI0SF:tO4<Z0H8.MR$8Rg`Y/6A=Ys9)Uc.3]<Z]2GakOVA1Z\30_l=irQ#,FX`Zt
%Y^D=*WFT2KGq)^p:e\g,U-^X&+jE?J\K$UHckhX;BiOShKLuYfUaE:]s"/VEh;.IX-_nt_2]R5(B=5c\emZ7=fT?Dlq;mL.rtag,
%V:j\h*;(\b5a?%4qDqc\8FnJE!?#r1_C8PeZ.&V(/C:[%DCbWL/U$\(^?\BpaeYPq0:V/m9*)nXB'?L[("A'M!*S5GK%r8q#D`9'
%UasBT&CN%2#kV9rSei\nj^R(JPDhP%<UD;fIQ:\R"EZ\jSF21#DnYT-bEYTRc?=CGahB[%XS;]cjK4RjWV@`qnCL2/mc_og2^+\_
%90lV;fl4RXVrH2%m='gL6"u5S),"df7_@I_D<54+#`GollK.ih_-6#'(]..M:0no`#91Ri4OVtVWK_Qfcq3h1`Zu:3BXX4R+c+;<
%j5l6%U'WZ<2smh-058J@)"i'!KB7Jsmb>WVDgT'T$$0E:\CIT4r<rG93)#e5AC;LZj&Z"\j&q3^,h6PnZ&amXUP$fWV['$F&h.!9
%AoDgdoKff>klCI/2W(:t5:Z>5PO=g0dUFJ9MGJ$X)$2u@N?"Capmn:,R\k=uVXh+Mk3>jh=qnkda!ZaIMdk8GgNfP;TM,V>'Bk4P
%LO`hWTGYE%'?(k!'PfO%[F)dR7K[5UD*2[EXl\j82@?hG;Fq'E6^A<UTCN[roB0g[eaX$d0J@gJ)!7+0<h<_tpd>un$D0HT*$%op
%o>2mS_PH[XV?C&M1a[oPSiaXdN-V*u_5W@n`@s/sU.i0.=M@BiGepcF;G`'CW@G6@$-;UIFOEAa5$t>&M#<n_k(lei,mu.XQY1<s
%n--cba*a]e2,Y<5`$bQ$"GI?T)$^Z`5#D`0`2>/`OGb5_7Y![D>2[6[Pa!hl$rLu)@Y2642_o`J!"WCj-9Y#Vq6ESSr!-de_43tL
%6*;grQcGI<5#G!e*HMq-87d1C$mnNqF"5L[P+YVI&5(9j3@C8cmWe4f1-u]N-HXk?YV5#Mge5tF4<Ama0_tWWpaDI&0?m,lnm$Y'
%i+8YjA]rd8Ju"5]rs1&LGJDY$lM9k=m^!m9dsW@'T'q4Z-$&Z-2<?oL]%T0IVlPA'jlkdj;j?@\c%hh`/.G6P"]7]Qp`3M6MEb:f
%UZl^maYN[=qHJEI3lr*8RJrKokN)*rDu&p0rq=(ih8c-k9cd#Yb>5f(IntR;%omO+"Z6005HU7L4oHrs8b!Ji4Ot(9ZG,mRrg3Q&
%*-KiR9Y78t]Bu%6eXlcJ>gp+79h/<fH)%e!nPaedWqgfoD;kktR--\^]5<.;8S._bRaMF5TK*\4]Ergl!pT6jE37r6l8j5\'pEZJ
%Y2,C5VZ2UP&hT%pn&0`=nuqk-lEdI8d'9U/9k&-37J[h1])9\MBn/tXQKLH,B(IIkmWe0LE^jH=bACVM*sOAM"Z2u+%pH3]ND\.R
%#$m0@SW9VH?3\[ONJ5Rq8(.mChc(U,;Bg`sHWp3=rsI6js+DrW4;BGHiG$6p\/(ZW$!M9V?7>+Jbb+kR]cUT,q4!JC5]PabdjZ%b
%a,Et.6F](?EEmne:<pOqU,pa_RTBrW#(Mtrp9_8Rd&tL?QH7cULL!kDDp=\L0Q[(d4709HcmXA7]$&;t*Aa$fKdml^Vh42]QHsHk
%1+l&f5$o'K$#1kBH_=6pn,,+'%iT0Z/0E\NW&kB`5oO6Ii`bMDQnHO38O]rX>WpLpGZqmZYuHVU*"=Znbt;O*cL%%^*iMXL&UP#<
%'u\L;-5\0&>)]T])sE7)MTO9G-h_ln^CV)/@iV"*4B#"U9o/FCTJ6p<rthQIEuG50[Z59ZMuTC-o/".4BcZsJflLd7a7W1Y&$6^.
%kjcg9,gmYUFch0tb*31q;!dE+6lO4HCe#2^DeuC^mNmfMVj(1jSP^fAO;:,&o'5c8Pdd/Wk7Ld4FAncXH#=P%kTmD?&[UEX:EDV/
%RT_472!/DP@l-FA)r$\#`jGp]k@#?T^_29*c`DIj#_X.o==t8e?p-Ec&s#%iH/LgFj,4Z7d!T[/34GSe$m$Y#0Q/TE:ItZ"aIE^_
%>?!>dGI^I;OB0jk\2sK*LbXpgf.lR_0uEUBq>-%b'(Rd$YfbZ+U7@qb.T>2kE4`%gL0,HGTEutb-oY+pqb27jgeBM7h+"k:D^u\d
%f"T.uH:H&%OlOJBC*Zi8k#hM=\eWeHWiHgc3MGK'T"Ss9BbQ*:j%TpDMddlZk481gPk;qt^_A!T9=.ENG1"K,odRR_,Ct:7Nao1C
%0I^P,1Zs'(2oi\08RYHF8C;h'4SE#J?^OXR`@C@*Aa%MY.55+tIsEbiRf[u)Vs;n_BaX!Dg&f8%8rlZa9K*W'e\\oU-"ch#L(RFI
%W7>iO?=[7`TOeHS3eD#^dX+-WSfr-EW)lmE.=4U,'?R'3BsB+/N(bs`^q5,r/N8i'?UT(/9$&L=[E;2ci..)V<!JD`\n#.RhK+[?
%W^@@3RR[=o2R*V;F"Srpii0u?GbI0`7]J7Y@`ip1L+p$r=SZm-gm^EN@0!U5;o/MTVSq"q6+JpQ<aj?D:@n:-]:>IiX>;4?;'X`a
%C#qfVXr90cj61lI(hOYOF#L0(nrhF+SV<<R8Pn)FRtqfp*eJ?7=-u?[dM4hr%Ob5_@a6?[K+%O3I9m<1@Oc$t*=C?-@[jgck+r<[
%_>CG_=u<F3X1X.S>4R@Lp*!<'0<uod2:'2UOL!k"]>299SC./JF*f+/r4LX[pQ]HGer/&\m;n^GWCa\N8<1EIdP==f0#V1t&QDID
%EV@@B8qR?uEjb[O9(CE.jgbb&9]4c*@8;r-E$68b[S+-?;HbaaV@$.2oO0"3q&rXAj=I]A47NjGo*#@*lm6$L6i@-"KZp1#"!Z5q
%=jEWn^e_FPQj5'KP^+Wra!Jr"(e)is1o!KTmH5"0Sf-b2geREGc"$qV8ZeQP[Tk9s2CroNhREa,5&EGTb&T]@S6bWcZF]N@*DM%:
%:,RKdR"CHm<6U@u6`_`QN"@SN9idT<ME5T26aBj7;2C/e'_Gkn\<g$4I5!BeE3-?n1Z+?0jeN>e_KduX*VcTY..0(9R&kR"#sM&q
%%V6m['\<TMfTk!*9EiiZ$?7Y4Gs(k2i,^=TTD:[o=Vq&D7mufKH-krXddM6k5$dF5\1_qCG'10eITrnb#\"^\/`WX7,gfu>O$Hi(
%S8QWe.5MWl'fdk1IT+Dp?-'QCPK"@eo>-UM,rYou4mS7X6aN@ila!BlOto/l^dsTrUE_1E%UYMSpad+8isPgbm(-4@j*<;DVPNg#
%,@_?0'h+.EMm.g_$CT@(;;O^EJg)MnLf/sRBhdBL.5);k0ND.p#oCO$`tDLLM7HAn_6'pmQ^f@K@WfMlD9\7io7!#\hm@imLcCB=
%$DAKN%95?thLt!BZj1ebkMdq<->t.jR;J6oV/co.1`*W^B[s"Pfr,ei8QP$:VT`gje)\f7Z@fV;-8\i$9lk/@FF.Vl][dqGM9VeM
%AgU[m-VTV)g\nXVc:hdR"$,YR(kTu+k5+1-SsT<jJ%]Zd:d-iNs%Mj6a>FEH%>ft>$Nhj8ET&mL(#oQ_:R=k+7oq[^ISP*o"u-LC
%>qRKlW8*2p<LC%"`A=L,XEAfc4CE;*ANWCLc=iCF^SP\U[DPrV=bp&O5Y=FA>SqI5PTB)]e<\nW;`Zsq]MEU@m4"Z;C+LVqZ"7Mf
%XSJ:&`K[aiF,p[.oU7i[`(+-Qh]S;Y'p0Y`mnC:eq&7NeZXRI1B$3;<[%&S#pO`"bNm"j'5C+AORQJj*'pVTMKA'8K)KQ\2Sf6_$
%!T%:ZT?VE111N:L;(\;t\s4dQ\S!29]GFS@]Y(cuGf"5Qh6&'kndLJ]?5NL!3i/eP_?#>I#oAUIe]O:p>W@hbEE,i&(OHTe=`^"8
%n2akC[@Jgu-,WAf.kDrYV9loCk(Q3jCo3*R*8c"G\@ImXN`tPo2oBI9'tsVjVoEsbjNG1P(s/>mnY@Pa?-@h?b*M/%<g7XPYi<M7
%nich:Tdk)4Kd'dq:?Q9KZ$/5*S>-i)3I*5=_4lHt96Z*U6ekFX<+22R/h9DF$`[L&^F*1@-Y-GOUWoXYoI+9?N(#[Dme1)?0*d7V
%*bS9A=S#+^b$t!GjXN5"FC!DZ5l">Sh/V%icL[sR82G0e:'4Y.@P*>'X[VDK<5iE=dZaBHn7Ki@Vc95P.1)bX;&OMijS$^WL_rJ?
%@HRD]d884)`(2]i1qQjX^@=Z@0J%f;pC)'E+`H)qhEkN-BT2KX8Y(G_ZgB<N#;]U-Ko<QDFsQsa`P_j[e!1[b9r:SL0"N=?G*89L
%%MMPB#kT`eLnZ?.L0;"-9KjuI8=VR^.U2&4I%[k0gVp]3'oA)H#,h862);=J;i<;/W$!-NB\"ZdJ^9Wm=nS1(*DPA(\a>n;$+Zrj
%A%F-@7Qn0@)hl1((TNVCAO?$NQi9#5V,m4Q[9c7C-W1[hG-/:3F%_4HmTLbdF/K9CPH*$YaeVTU=rgJ+YtMKDD6`41C+S?e,*1:6
%f+^"pa*WB3>Ze47Ob[bqrmY,Q&a.GVZDXW:_cGEJ,(9m-/b?aj;2hC)@Bon[jh>FVVpRUAPD:AgCCR]ap_pn*L'NN17bFaE`P*<$
%qnq7bFSZ5,>OP=I%f\/$^'sf1Hq4uu"%;#FrGU$DRK)udImaehNeU&ZNs@ba^]//E[QWF4<o/#/-Gr^LTAAnWMp3@9a'rV2U\QDZ
%UWsX_6%9\^Wh&#*i].IVqjgTn,#>0js-`o$8H!.EB/hr>2B^Ati4!TRGZ\]_b$Cg^Qi54&1TKqsU;=7oDtKhmGa^OIK&+QG$anY.
%N=Q=Ig^9B.f)?Nj8rkUQeQQm1U'ZQs7[)_bUO=]GG.09Pf=4AHlhfM[f&#q/,P9l-pgn*D=/kr+KC*Z0$i+k$BAd*((MU/%l1]P:
%UX%h)DlZbX*KBeC)oH+!BRS1tU8RQ<IY=.+SAq?d)S?p.HqsAR$QSW>2O[1-^Mn*[Xa*(W_uE<AjG7MepP;8/Z5(\:Zi5<,BR[(m
%Gp-X%s)kP+m.\L)7I+O+9A2D>XaYKmf6G`W&8tb0ik`mWdHmV0:D*M[Yk2T&Jn<^$%CW7,oqUB>45HCDK0poc<S$n*LL%nr??1JJ
%V"mK#XXpr!hnFV/'@Fm2&]n$H=6B(4\Ge+?kf&@(><M@_j\09-LH^cT1S/uAB<b?o"+kK`):"j.[F:Kd'f^&`Gbur_oD_D!s%<=i
%kJn\*))A0<^\ULY\asnsr-cA1<L.>YT43]3Qc7+<kFI6CjVF+ami<Crf#\:GPo'3D-`"HE!:lRBWm2l["D(lC534F'DF[#kU21UG
%]s"+rSn7Wp(]J_IhgQ.'G="^Z=ln,!UpBrCH:Z;$+58Udd0oCArGRr_1fA_[Bb;geP<'dI00B+bm37t<bKYs+qfpg:A)R;MJ[sh:
%J1nCA=W<M<kua6N@E"(^+UO[dW"l;'fcNdgPhu,5\!+pmYrhDki6`KT"6W`HSRN?aA=6GI,bq[#g[SNAl-6*$i$7bJZdo7Smn>Kl
%h@aD$[sp*:[+sW^Uf6^P"P"[Ie/788)Ph)qB*fC(Tp:o8N0MO/=UA#&[H3@t$g4;1+Cd<,2>22J\sFS8JV<;a;5pWi"7"@RPCPL>
%,Uf^PV"ah=9\],':M/S*Ypu<A+9B>L`h\]p1n`[CH0af=b).cpGTpQ3rOo:.[q)c6rYVP:URa9[SPJU".Io,I7[;%^;&Ra1s2j6L
%fQ$+h4iBYLBro^$r,sFmJ9g/#hA1?(BCm\UhEP4k52>Rto([*6i?&='!>W+=P(2!94IU@`K>5BZCSObis(X@iTjC@Q[e>%Gm88'=
%9BjTia+UJP0g6r!TVCr9L$OB]\)06AnQh;SldWg[GIHjVSc2J`(_=Wa'HE3ZMrir3`j:0oO%7`.39XZO9E!i#IWtZUBZc7iqFaM$
%Zc>!WW/F?4BP+q>H-Wb,^dQAbs-#k@mit8lNKf?pU=\)bG;$<Z0!`q*cO&Qk1POrJ0$Y5/p9-dOR-3&JGVVDV$a@B1PsgtZ*>ffY
%TsP=`:9"7Pp'op1n^e]*s/rIdhYI+'5i;SD3;L)Ag\TgF`^Aac?BZCMkB48_5@`E^pU2Gr(L$Q8nh7hmSQ;uL_R\.Mlh5Mr0#V4V
%U48"+(7/<t2o/i;RbP$\aL(NM][!"s5;'s4rZ\Zmk#3?3c^N2BE'fH%>'FU'[h2nZH7(6AATS8kQKuG`d8lV&CAVcp'dW,E'&tt8
%:-..*D>a\D'E7C8>hP,iP7,cCWO-JDSS91d:jX1$C:ZFlN4(6@I.*N,CehUjV/hbsB.uO9cpY<k<H^mGmE2s5cb*YKmh_3Nll:1=
%o^q(?ci2d2X)PAn=MPi=RaXd(as/ul(8J_X5I]kEW*?@K\RV#8HZ%5O]?7!7/ILZ)Y=<0o>A(T4`M8m];5q^];0Ue9rRS)eFT4)S
%F26(5YMYi1]\cGq=%QsnXth6OO#l;mGBE^@Ndn!DG5@cGf"<'HFgh.[6Q.u/MLWtuGB(ma3E6R\i=1;&NXk%8bA/YVHIgp?*?A+V
%f>W.e&M$Y[nG@2R8>TTKbHmd>9&9__P$G^$dEfDa]uk,^A+-%17GtPF==$[RWk:<[*$.i"X/*$M5#2T+XY\Tm6@d2$i?:s(Dp?lH
%BA)s(\,WB_TpDY1mc\Y3b`Cqnp7gp-E3%I.oOgd_95MDJ6.\,RqdR"1-k4shpC5!:ooD[Ys.<Wk2:SIj_@%hm<Ac5-h1"a2ql&Du
%On4m-^eKiQd7I*+Cl)7TK1W8pl1[7!3<`D/B2Y!9X\!0RV7k_spXRrnpBSU<r?8<0XrNAG?PJjuZ0fG82&=?$RPnqFoX)uI%m/P#
%a#cKKN;&BOM"0GCEkEC:Z"-MX*`m)HP@6b&kA<ST9-6GTj2kuEhjoP'H)2n,+,W6r%U6iuG'A9C2C`pB%k"^0F53kE#]#QV4`8P4
%jdaIbXF+Z\\(pd6goQOI`"L)G+WjXT?'H*)$[tG?*A<bc<t[m4kEeBN0mTbZBt]T%H\\*/+%o6g[iD``:;;:p@ejDE."OB>:2$7.
%2\CU;.IH&C("&Maa[$/jGa=O.>J+5?E;*bT9)GX#4l"_iMCs4pHtJ9YNOuR\lhE9.PWcF<K?e.[I%lgmoCI58#?'b@)Tp9RcHsRp
%IW\lK@Z2*k2SWN3O6'!Fd2?L+[gu#jl45L2MSnh&>8>cN[,ekG4Zj_'Eb?s4'oMtP4?](3T">n?Zu"k$9NA2ZXlPGSm&U-8JiuM*
%<r4.G/mNWVbh9>m[[NdK=t)Ta%j]\*1S<6Uo!<F-A4BgD]<_75dN"Bg)kB<6W*``g\XR3s3!rG721rV!)P`9Hm[dd'ms)AVKYYQ/
%00b68D0O%6h*G0]f4QhBc"I*Kfd<%*me$A=YuotAA)UDM1@Eig3'$+"W/A96:6D[;J<kTbq0^aU:pa&*2fXb#NZL-gph79#*;+:D
%paiV>>B5KUlFl0?T/kSs;XA?^m[_D/V;pCsfeaNRjl\?J3ORM,'[1IBg:7B:4(kGNXi(.hY;8/('\XIac_P/&1a2IfXRhu<93SWM
%kO8Q:L]u+n!"1?`R7YhtadH"BN*(rn8XPDB#;9qR1Wg?T:O85h-E:g%W`URE%s@=X2`a<FT3#]A<,gqtb<V9VOg]::\PXfmleHqt
%+`DNnj0KM?<rXQSRgYIPPim0qiNf\uJ50#]aTY:47rj0tjcRdA7lu>pFh<,5s-#d)URgB%9]h+Nj.jk.:T!_aCJ<4UXa?Af91:ac
%cs+h"oPo$#h<i#)4M):I&>[O1c_2Kr,iLO=VmX6*H_"VtoD'@@*:Mi9rU*h@6E0AUVUp@<2oWhmp5Tl/o6C:"%]cq-)'7YI@\XV%
%4Zc'o(#>En$-Xn:"_>_oS@>rUJmse4;j7FAftG6/^cm8d-9n]pn8R\ENl*0_B.Z?7fKM>`h4YJAUI-B;htMG\DR!'bnQm5OiuEc,
%%+aqP`![C93>u_)79NM:>5nbKbo[gim0j2QKAqi!k?8j0#A'`IiD"I.>'\`UX>GZB\SkP50<Dp8nac9\jYqUVATpCS?s-X&[ieWU
%2Hk$<(.iO>icj0=ppGSU8kUIcPJ+h$S2J9$H24a#??WfFW?:V@miUBbbO0&A>EkZJ9Ia>I4g$meFgdtf<]Ym#kc-bo3@V?q1CE@m
%W5\2]PMXEL^/Us%ErD&C-Ij`s>E4?r:;ZZiTuF(<f7,KEqLL01!W/%Rg)alF`?8J,pDTCSfht5NAp5M_Y>V!$Qa7`!DD6CS2J/?1
%.>?>c*,I"G2;f!`7">!t)1VF_M\Ce[E,O6=);@T-i2D""j*QXpVNN`4`[/pIf_HcO-I*K*0m,*r@5Pe43X8;*)P"Q+a_A^dCOMc^
%D;it(IfG4(<'njEiefccJbT<P%!1(N`QqulJ6W.u]kk.KfA"Yn=j-Vr.`WoXOTUnp*;<R=)l44cZOt!\LmS'T%Y#QkCtmFq@(SPL
%$W]>D:9E\.?h5dh!c`'u=D4]-S>qRJ\lp0D`G<.JlBKTcZoP<W]Imsm\FA#-r0F6Z]/m"TZf,<%[5T!FFQY8HG33h<nei:h0%B>=
%Gb(lXkI&p`Pj(rsA/Dl_ae!!<kI!3;]n9s.I_G'=B*@?S?EdM69uF&(^@Bp9AU<Y:?A\h'SS_&]qu9c"os1(YO&^W,0@+R3:lN_t
%:F<S]"F:DA[%P-SGZZB5$QFH2TINLL-Y9CmrS*TWHl#lGpV$!f1@G&E<nA3g^rdJ(?I$ok>ZNmq4H0*Bc$")'=KT4RF2RW1Q?k=r
%ru)qY%S9]%Lt*)u`=j;I1qMEbIASrbHBjX-\Q,>`MZsAk&iGjr)VXIWHE79m.fGCWqh8NPRW6*O,qO1t]LNn0j$AmbZdZpikL^lY
%dh.Rc\2,.%Dd5:@lm"HoH92(=*)k$bUYau*,)Amq:IlSoN6\_-c9HhAHU':rnCKZ*4JhSs=tmZs%LI3k0%>^`@iW&NlQ^te$hbB0
%59=Xg)ZM=Y2MQj$G3;'GVTsNM]edu!cT<@9CT*B1_`C":dL57Vo+.;9&drtA8o8?#h!@_qXaL-UC+`J`[.:'$4.$!F$PF?@+>^HN
%^L'1&H2b$^?goT=Atj:jicW1fR/_)hrS(uN2*@Ec'Us/Ts'4N2[Q8N3h?iFp&b7?Ta-L\m7d!V-Q?i_*c1c@OV1>)'s'2JU*t*`_
%Fh(7U+>\B2'^]%8^usd^cgg.`M$Z"3o(Kq;Dk-4QSgf"P"bg&7P`rGDTZ=I;1]@&(A#Q"9D*XpRhY/bGi$)b;XmWgh-=.:1&cIW$
%q=4(sj/`D5bj5_%'b'g@B6g4`[T@m'luBM?5[^k@)MQ"Qdc=^&r769cg/*k(61%cb8RXmQGCQ_faCQ.g=uFa13hs"R5LkXe7iXZ$
%jaF_\]`:i_S,'+.bLXFLZi5]"Z'*OZVr#UVnCi3KnRHL+A;G0qFU?[*#;<60>$?2qn&F2/qcckElS!/-=%<c3p6Kn-Q_(Q;h-.>9
%k]NocX7jf5QG'T:qW?c8BA%q![Ege'XcAFM>e?i)q.hJ'XsD-!q4kKI/%N6;pM9HalH66Hn`onK^-g_XhHd`Mb"Fmce9<"J>$G:S
%]'G@4^&)$YCA#U7M8%QL5>[-<ftOo]5!GJnIse5.+)g&:*=UQ>Zj;l/V>Ku/;7i6%I96Hr^[[>qC$m6B2WqMleV,%<p=6(e[>dZK
%mHM<Mb:S3H?.j.G=^<(M&!iZnXrXnd*cCFC2iOs6GN)9?SM0G:]t`9N^V!M&Rl'io7l>p]n(4%5C@13Lb(CZ%U`gZK\FF_9l]Ahd
%s4Me4rV0:h[f:?T[XS+r5R-bmZ[G6tKHCRp>HKLKC8%o!ICm*h]9Zc1W^"8kI;-*/j%[/54h>q=m?9&IGIP"AqtS`HC@/+i8_5H&
%drD/>eaL\pY>;UmrG)p]g`A%q5,t`e?iPrh/?[iXZH'-r^&.NHC2L1tj'_-.Zb(G:_<6/.kO+:Qdb8C#Z!,jg<^i3VbpVP\KK47O
%le\J[p2[?VVaHBDT&!V\IB-T@]9`aXLC\1P<Z@*$Y.SQ+$3p601`q4Q=73]?nE\NFg[.e[HLo8qDYO.g)GTJ1]m0e)o#\VPY6I8B
%rVHMf]c@FOmIj_X^0Gs7][L#ohS-AhEJ/3\*dm'M\-R5@CgMR\nK1EugFMgKb.H5'.GqYcqC\o7&,J"XnG?b\rr(D"h0cGR0/iIj
%hTF[A+4%^mC)/%kp0Q6Ch@5aM5:M?VANBt%E:5YVFYec?9D.F+7Q5$X%l4%0rn+5f1k.&6GO@Tlg$3Zs>clc*2m:*AC[^01?8Uq#
%RlfrLT;t2k/E:o^HM1e-Riq?uh>Z('VO$)iZhLjDmH0IRh\s0Mp<MKbK58*d`m.:I35#:I\_#TRBnq09kJ>X$Mm]$MgWd_)Vh1HZ
%f<PQF!gCOeX/-&>4$R:KpT<nchVFQ(Y&-:h*1`VT1$"WSOY=`OdA=LTFkT,7)S#7/ol9l_Y5Z0+TUE/OYGOtu/)OF^9qmc>\!H<s
%nFcR&bp'X0\G9S>q)m:K+#0?@Rkh"8X?EY5H_QmF<gF6aIW$n+4K[1tQ&UiNn`n^@)9FF!m*Y.GD(f-Y>\rc[fDD\H[;(%\YI"g(
%%%5eM\$eT$X0fJKY1)I7/2h\G>%;c#lcnaaql&Bm?\au/qJU!b^\k<YqpoAH[k(t&q\3t2X_g2T?6X!&5;_\A+84lWQ]%0P4oF5]
%B_/TQU*"!n:6NraAUErYs),G_53f!A&&7-oM!<E&?<]MY<n"Ri^&?qBo:Dt.o_''pg:[%Un7MX>AG`%V+1rWF2YQ!7V)Fnt'b).k
%D@N6(p@[2.;sj8'h@6LYja,`8XmJR.\_,]Jn]9.'LO6lN>ArC`auMNUnFXmng0WUKpE'83HZM!tHWPQ8D/27<mX"9n`i$QNdD*B3
%gheMWd*8r5n4Bo`hd8A0[9"ELKbCHdq"eU#N#%R.-.]2]c(ik,]q=bjP3:Ir&G3iXmEu!HlR*&7mn7jHO*?D0Dd>)?Fk$Fj>Q=\u
%&YFg3pXPO!N@G\=rg*>qg@`&RGkA,HI^G53T5nB01kH^KNjb7WbEA,LlCAG9%ph'sc9:Q"8Y/U>XX6g[%U/M0>u.&lm@&ELo&3oJ
%Dt!-.XKu)bWSKVe5W@f!SQPLJ_JUU%q1HC5L6kde<mQ,SL8;5p2O/XYR_J`68s*6N0QpA'&>dMYEAn-Ij)($8?ds>+^YOjdOYL9d
%g^4LB]9/M%P8Mk[I9g6c24bV.KBgL^<"/VJYA5X#44KkGk0nr\od>q>.obfY"8_dl.q=e??hh4$,BDmG#ml43O#NZnXaI6FOc+*h
%=)7g3rmA\E[M%&,oVI='^1aIMr29EPWb*q/jedM7d4kBhl]Zr\D)N25(7p/+bF=GdBDr$NnCjC!*bWj>a%L40GtmPb,ej$SG;Bb:
%10m@=Nfhbk;0X^"R6XBNN]<OQmJ+W!;XCW$@s0i.h's*;FFU/hZmWQ$^G#Ir\n&-?/*K?a;P&t)Dp-(iM/(ZJAQ%X(I`/W[JNo%[
%F,>XVra$pQU9nD&Vj1dWmPb%j@cV*W',ID6Sjr1,p-nt?VhBoJ>]5"]eHp0F2VpV<Zr_0f2olK]d:N+cC'0Wj]5-g&cTWnh0AW]r
%X<l]IAY3`<\$(rYe(e;YGNI(eU\FH9C27VbkB2o(,osls?Cl'&P]`+bGAQ]_>+;pEGc8mCgPZS1-[b`7naf`Dc.HOJQ.<?&(.)O"
%kk3!Ye#,FrjXJ`pF_e/cbnmGH?UpS^DYpI>C:9TX2D(5e-iIs6\%fD-a.M5!]_I<le[L=9X]l`glLpOX>r"!3I<2mN^"I]g<Ol4_
%H?'^s\;AqmBE+]:h3Bi*Z<q#?LOOT[,APti#2WulmIp%pZe(gb(`3r8dcJ`oJ&cfEJE=WTeA#_1>ekC%e\Qi6De!fs=O1*j?h^H6
%N:0h<O5`45\[EU1VY<mOXPloO2/VW.S`.EYG&D:_qV6I%[l:7@`Qe7[ePA-iYHE;AYc=3UH)TL<<0^/mVZ-JdBsmd3L[.Vg#K$Yb
%Mb?kc4E>B;CE'YtDk7Tpdl%pZSW;bfRmU"uhqFR=5'U2ugYGYA)uQ76*>QhOP=+`OBKk4detmfgC'F$d/c'X+o'l/>AdD%RZfe[^
%Y+9%>XPAWUk$`,?^Uch`GCQWpf+23OeMig]1hSabFpVOQff@=YrGhj0A+0#cAK(*JD`J,OWR?I#hu`TMB1ld6]\LVdNNru)iG3jK
%hn(^n:saTq]RA.&YZ+D1/88=,YI$JpMcO*[l^+)Bg9&1'[\phT%_U0?XfHY0H+13TV#KZ@l:\hciS\u$lHtB&[9(]+hngYb+2%K5
%7PkXZ-Z8rto4>4N=RA<m^Z^]<Fe*HsA%ho?];BHQb&"8A7XK'Zj_+$'E"@/V#C!r#!,NoBU%,YBpl!&dUO%)_:XlL*j%D2onEF^?
%gjOL\Gd*>/XS-C<XgN&KN\3PAe@rJ<.jNX<NXVRbgB/'iYM8G_MjO,kf5u.HoBTfWh5dC<bBlnJ4d(QY#EsLk=.aGS4M'?r1:m9E
%;VF^R\^\2D7>m^!e(VdLZ*q(+//$WKF5BYeVgcdp[rH+-fZ%GR%X/i)ER1rfiV"Ws.U#%Ua-sYk2k\[gX%O_^o51"tLQ/3[0!_SV
%V<?b<M]Z8#C/7'mD->&/:S2Pa[h$?XS-0W\P<&XcBf7#<&`IhYGj0ZW*!YD>H[!deGJ@MR7T;NsH)KN&^/ibIqLE]#l:1Vtrl0G%
%IJ\?X'+KHcdd#0Tf7cPEm1n,@4P3uR7`Yjr+bOrBRs.'iAi1Oihk/Q>O!8sg(CHCRpZujI<h;r]\!"22XfjB9^QHNV(VFBnZ*h!(
%I'.#gi>&W7G@'oofRJ3YFlgH/lcmHT]h`eBp3j@BlK6:Gg?X_E]Sb\,[>/*oI:$iPapO(5R!X%GO$Bc&KEh"9M\*'u=e@X#^N'5;
%HMcH^lQ;QWKX,p]?bP!;ZEUjS.aO=eY^3R$D4`4$>e[gkFa\1'Y8N2IfAkH19tO>iG?D&dDtU<7Dm)n_7Fu=^be'5.A??<9Y\lA!
%[qD;g\<K,ToPc+b;2AKNlTY3NZa8H!n`h"VHFIYVk(cGck=oikS6;S(mX?%&qKu>C[l<.7Xh-6H'tN)t]"$(8\)lebGC-Gr_iK]-
%Uf"OBe,Jq-?ukiCb5E`Ubm@Rb1+(]FCerQM#PS,6`q.4)#KI)qSpcPMI3OsQkA+8ceXn.q0fG:r$,c4N:Fi'0bZT]ND:GK7hJ<.=
%[*n<ERAkcX(\6mW9?j%#n&%W`nl8'LS\:s2mQVc<,:$S7d,']>emWg3F%=be/@V4RhQ7lceab].Q%dc9m;N1<]ioJa[\#L&_Y6-o
%O57qN@jhdN7Q34r(\mj#2V`Y!'1eT=R6lhk5<hr!:W%MJ\3qh@n(De(Q%]*>CSU%/CXslJ20WAd+f'g-`:6%&dVdRKm'[k6]<<;^
%]r)q'_O^YZr$&P<5??ZZ4RTRXRZl0=LbE,G]Xn$D]=[>=8)Msa3N&@4?G+DG7C;]-n"Ok<rGT-0Q&#<N#>=gI_afeI5<n$':om\i
%>dH;BMuOO>aH,YfDg++"8r_`;:QCmofA!c9Q_4<1059kHZ!f;p#E<tM;s`8223"Aeq>n^UR3fAj^U)PjqE7>m2_/D!d>Od^UT`]t
%o@@Nc[Bb&Mg)Hd-%mT@b0CG<n7.]\!M6m/AX?bTA$cM\CCS\jbghH1mN6!&6Fq.,KnaZCtpP7ASQ_(@?Y'ccsGD;mX*4cS)7s>bh
%3:sr@fQiQR[o%&#5\"bPhhp^L^A@h!0@=B]YPI\e[4^\a_2@E!lg;`4dI,ia_W1$-0L.jT>J+lt=2)P53*Md)LrD)GH?3NBS'g&9
%Ub"\,;1##%.9Y[Ap/b>`+'pC7b$7$&DqfJ.LePgt52,mPZ<#6*IejC&6d=kM9CYin[e7XF+a(?/2J?rq!Hih&\i9q%2em7/=e""$
%_opc<[^0pF2h_.-rj4R!8?#4)Q_,k+,[341?b4UMSY?%m2Q(DB_Jc&?BKL,@C5IDdIRU(*4_\b](n'OOUVi^LiEJYtH<.!/iJ5rI
%+$\m;a3qXK+.nc/6t5@Q^$f"*ZDA-D6nM.\gs%(JNn;I`G?.2P>g'j=B9*glHG=t)rKs-_U9p(3he[-V.lYWII;I?SK3H%=`L4^\
%*;1Ycf>G!fo@AhlgURBnIoHi'7c&)Cf3;IGm2*'M/reR:s8(,_%HQ]If5#1thq^<&I\!S;+*OY.c-Zli&cZ`KH,7nQ)2cGiGHI\X
%2jO`)?Z2Q:mf##rO&)rWfBqk9Y,RnbpNNYgrUs]'5sO5[qWSq1Hhh=7Gq48T!OHltr%Uk_-!2O,F`66hiWiR>cgUM//?_HI2_W_\
%f"Y^O@G:^\Hb\=8q1mu:%ao:)(S9E2gJDeu`co&<f+2QGY8>Afhu@u;l6UN8#@$"eep16dRtnU%$,Q!&j/^HM;?DWqh4:>/kVse.
%hJD$teL8_1R<%6Ipo2+k.HBa]p?F7Bqte^[pA&68feR/5^e/i@2"XP,P-XY[[XN"Wen4[=@&=m?dFQmrj_m#+]6Y?pU-1tV,bG:s
%HFCT%D;W)'o%(DXNCSuA:YV4EJmD\gH'Nhq5(1"_\N"ds?4D3a]5tZnHM>T%dR`2pV*s5;\OB3lj$&=YS\s1I^3MZTOur,6a,BC>
%2kN9*M>FF*&*Ira4:'m,8%8$UBE5NtqN](6k,ttU=)K%,mb.J%Dmm_\](r\Gdb]jL=n&GC:$(^jo!EDD3F6$!]!prW2`V_+7e3D7
%f!gDb:t6)[I_@o;Lb<UaDf%&kcHV^Krb](5nGUE%"'V0cIHpir,1"#A*jrb43SHh'`sjquD@^W%A@rc@"]+o&I9D]'41F+plG$K#
%%5rFN"eV8unuFr^WE>&4Qtc:Hl*XlZ#_sM)&W;!Y1jp8km9OShNSBhp0C5nA=JNt[]UNn^!n6&aOj#j[`jK@=q-hC-b4r!o=P7BE
%m+p>u\b4oq^#j5r7XNa6QjrN<6;KWOqtU:^eZVD&<dh%Bioq\X]C(+J-M5NL?<nm\dJ\0ro5==*-LRGUO)+,`)"q-?hs\6%hK/S3
%SFYS)Rhq]G6tWdVrd8J@mD[3'@;F%=RejA0`L\#2I^R)uqf+Rg/(+Tm[;QUV?iAWgrP@sRZZk[$&de3EhV,)K1rhQBc_m<=pW.qm
%+R<f3c$!3rEq:@Gc0"Tr^#k[<LFXZk.iMmgT4H<bBl0ZL)LJO>\!rHUNH`FmJ4.0KI&4OG[*C<?IJNEaY_7TG&%X?;6k;2UBl.ap
%b`kiIFSufo`1q2CFQ^r6O+H+?Ce:PHp8iaU\^gNTj&U$di6ogBpOt7=S)SM\aebP=3l&DuDdVrsIduX0?%2fcP@i9\8)9:50(OuL
%#opn1rt_ShcXf>U?,#mk6;^B&Hs:>K>7.b7Q>Y)Vg).<-mQ[GChHW:X)W%hb>n+F7?qJi"*l4a]rE@t.gR;N7s53di([7p*Z#rdT
%Gqt*_SkNrN^$"S2gGSK[`=m/njM5VXCQOE,)8`9Z'r?<^Di.+9#10d&^]//%939VPASo5fIC7I5hTa,[*]GUm'e0*@9$9&SDcHX/
%ELRdLq@2nmiV+;)s#kj9d\$0SPs=aFV9It+Ur6?)c`5Q,=lfY!'^t)0KGmK.;lZ"C^$W1%#sok7/urMcTTLW(Ut*[n>A6pI1fSm"
%BuTD>RTQ=8WNjt^n#Pu5MPnTt[!#HO14gdOl3rs2U*ZN/3.mGA.M8tdo#=b4<`NX]WdOU=h\_Y_JRp"d67s)U&CN&C;5'4^?<=56
%<NhCWg#<&ZT+XOlK1RhMAC]U9cXi?8,tID1NQl2pL1)I<U/[#:(9*0c<Rn,q`>AUI$Dl0c9'oQV:aMV7C(+I$YIp]0BnFWE'J?G$
%T2IE4Wm22gBdA???VqXg+eA\2RV5lK_OV$o7]'j0*^d<7U,,eD9SR$K89p;1;RHN-oqAAooh;.4(,%:4BG=PeO()cG_<@kn'X'*_
%a&NqgXZ41Rb0gt=e!*n'\u[lV<!,#"Wtel/X/luAY:?NH0r4H\BgW`2`_hlP:C(A3%+UFCW^q5@/W-BZk"90Q-,/Y#jXMn3eKj`K
%e;P.nnUr9Vq.aZClR^RdQdIiT6V%9!ZA_u&98oCkfF<]gd_JhTAZ)E)8#!63&fG8@R\DIb4S@oOeaWtuk>LT-Q6-iIW29Q+<C/M*
%R]oDL*6=;O<CTp//1m$[Jp>r]=/'74NX1]c;8p_U\X;q[G"Ls$.N[J+["^Z?0oCYfF@?=7MDq]iCKn``?4U]:<6@5?TC^2X%0H:D
%dcSH:W/+%V"A&F,73E0I6O6O$U7FP_Yp+k`h*=C2S13=;8ZFW_UNHX;"-Ou&jlCST7H,>U-7jHH/CIF18(.dOcNqWmO-ag",&p91
%T6NqbGBQPH>/2E1Y4^K^LSXI5@[^]'7!Z.5MDpAj`/m)YT#Z2_YXsYD%BVAT+dr[VdY^f(2[F91)(l@dTX;[p_Po1,Uo0(EPj!_-
%2/sq'3J'MJY+3G(XSgJ<o=ci=Sc]"D63H'ZG7]<.-0h6HLtJ+^S];3C6sD%#=<\-@&9_+I$*=jC"*"U$-mR8AWanWHlna2P26BDs
%PCZlN,6Gq-&=TtbJ6<9]K(dF<AmpA*2;)8latO)i9ZE8E@>N5HOuf0D5nZk[+9p;PgG2?j!/]D(=NjluGi$bs."MrgqL%qOB@;7E
%%Z-si]YbIbX>E;(QbAf7pgp,CMs25@5W&to@V^^AV;OP'+r2]mZJHOTGT413J7+ZOoU2%TN-e8=grhs>!D&?7$8F=jj4,Mb(>5(o
%48/jjqb(3G@[tR+R>fN^!f3dKfO(KYU5>T]P0-siYgQ+/j+2_1#J+#rf7G.ha+F`(I?G+meHC7@&=UA<i..@!Lehht\FeV3#h5:(
%@c"!1^5'L5#j09k!eY1;8?q*GQCr$<#fAP85aq6&6Y.s6+p]^A#`pro"b996nd1>D^QYJA_V_a:1_;47faB@k6I$q+N(nT7+N-rB
%Z&lu]")5ng7+=el-<WcJB6_;3pSdc/iDk\b2`W$VA/C(j';0E/oElJ3AO^_A2BDEG/-Bl>@^cCnOK:")#sg"P%%nePRR5f89I4!`
%!c^HQT3PhnlV\umKLq=8:*F1+GTBa"j,&+MJ0l*nXWMX+dL\q_,OT:ZR@kb$:!*q0/fF1c8,Jf9/1?#kU_4:J"GB`G9U3[33c1s3
%L^,sTZ_UnekZ!3oZ=4(@))P,(CRe5?Z;X^W"eCj3BJoE/Dn25?&#C#;elhU"esUMN"sOJN!\=n:!D)4rE2bZI7NFRA=JAGR80VVj
%7:nTV9TiB'G_N2M,XjH9OH^?5ag`O/F\->E+ot7=,9Y)clPp_I[#kA3'1(nD'!_ohI4KIHp''95<fC&Z`FrBs;(_%+!MiF*"uSu!
%M?jn/9^32l:`'>O1_o%K$8`1tWCSI*1aF@i-IXTNk^`G-(4bO:)HD[F+T_[##K2=D8R8'd)T7SH(tOlMf%(+W`3;KtBbUgrQ)d1j
%6['e=L\;Nf\"3f,$0(.Ve3:ja"qq3E9n\ZIk_tBaTH+Ti8iRqW63;rY&@)?-MDfIZU*?F)M(KDcKI4\Mkemmd$3mKm[+Df3nJt%d
%8+mTaZTq'H92F%6R;$77KNs0V5S@:YOVJp.=+PrE(m%Y!]NIgu1,bCqi/8MR]n<Ql5jB=V8EUP7'8;f53iQj`J-H@fVQHDdCfD7?
%%]U,H6fJqJ#-*i4ZtjN?H4HZJ-U,rn+9?Wj6(EibH*ATt8@kBgA:>RMVTIW?OO8R]g-c>m"A.W!WF^[W)g]aG[=f&!9Yjg2$R#dq
%!]60/?5eA+^Qj]/O_dT$ct=bmM;AaK@6cWeJF47@S4>%I0Os@08/D@a@X/!kQ4to0+XrP2WJsGKdI^h>#BGY#Z18#g"uZbnerg%p
%10fO8S4L?;4-Uq9-1s#^@osO[bub0=4f>hO9/_;W:]"(J=lsjWA=6p5iE^c:A-P[q@OhfPRt-MU+"@K:QU;`L@r-PV^4:GK@R\A$
%L^A!M)mI1)Q1hma6I^sBKTLSHMR9XjOb&W/K*MDF!t(Xe>2CDV)_u"_J6:K^!7L;`![MQCMh/o'+@KR'&e/B-_^NDh0G0&H9hkO@
%#h?_$oI9+uhBu2J<C,h*L!jjL$u$(G3sF)W5p3Cd!?i+GRS(\fQAURdI./lmZ>N?J)H_NsT0_64i_h($2Ism#78cGRA-7A/d0T%`
%N*M#qCsE`.cQT+`91@:_ZnuB3^pn%c6feNj!OXt"6I-K8QAAp*`BjmP_KI+pCii',b`iJ$+(\s2!O$7p&u.u"+UiH8/a*itYlaGe
%K_X%bLin!^J0c>_%nm3A%%(`U&5V%UPK#js4toAn"W'GXY>S'1f`_X=i!!RTC`0ZHciP@30,;S?--_-p`5`iZ;%1T'"?MX!6c/Ap
%#ngM0;8^3q6R<I#j^KJQPsDR."NV54-j5'd+6s)rp]*?m5(uT\oeL+s":8chAMP5#BpO>D,7HsH!8.\\JIN'E&mjM46=!pDjtej@
%G]ZDq_aQs198!S,d4uLG.t[(!bXXcL#69Fc@2:"m>-]:]eEY,i1CI2_VJW#q!+MV`"6*8]:R-P5-]O>B'l!h)kZH'EE[HTo;j/@[
%;JaHC`_Pg!b:D9t[cUQogjjk5(qeg!'1rn*U.6S9%u<$iQkU]49:?0mUmS(r'F0m<[>:bk/`,Sl^k0`:L6*7,Y^[F;2_qOi,6I(S
%,m(_$Nf1H42$uTr-4nL_'-rKf%4\hZ+qOeoOA)#l.Gbm7oS*;[T"]<te!GX+6rPC_/XuiI!M21d0ArChJVm'ak\LHQJJN$XPVKgL
%*l&0g4<STu!alYnSd&eFRL-p#=:a*eI,,Q!.bB:W$T$?P3"j@,1tX9?.)HE]&Q^5cAo]#Q83i+M0;XE8RNWqg,K(>BbQ+O@J/5Z@
%$oeSC.^UY?^G&)#Xpc?S$]W#]*GJXcF:<9\;\M*`B":D:7S.[.ct[u:#a7JSbbEKZ^]<tp)UQjt*9kqJf!.<e,hau'$nANFkrYje
%BUsqjW$I**Xi*!5d,&<NQ+2HZ8-hP#)/'?+kT"t@E/5'Y3Y_q"9o:(pH86UtN$#$dMZ-#$8/50F#(`E:T-;$1SHTgb_$eR]S0!#u
%iAP[PG\IqD=O3"7n7SCr]YjH1GF2DT@1+#>Bq>m4"TW:H#i((7M+d<qe4djJ-B/*J6EVhQ.8-1>LppPK,^(%ebjB*L6el(,KO]f9
%l6$X9a,j[AJWP&@jaM#TY^qA)jU%&USOW&J#rp*>$h"rU7#*\(kY`q5=m2dm$!s.][#7k;G^(PQihemI*%eGeJ])(&O;'m"P3>a6
%'LOEP"V=iPQWNhGQmZ:=fQ..$_#=V\+T=H&;S_6BB1lJ[WFLg:0qlPePGM<;H)Men#pr!/kVVXX_=6C2:I(A!";rS7$;&7_*<l8\
%DLWC8P_%a/$oG4'>bMQ+YqZB1)hpb6_Gc[QQ6?I/'Ub""!ur;uJ9].(5XOmcKAS=JG9dq]UBNh0,lhmAr,$`8BePZ%PrlL?J`"g?
%<Fm_sT>_HjP(RijQP]*9iiG,Jb<9>\c57BT4%nNtj/,r-P,:S(bsYeZbOIo@W-nfccbL+8R.;q>`,1kE.hIo?0!@g@OGY;a`$:dU
%-'43W#]Zg0fPq920^US!'"<)4>O(9KL1V-jfeZt(/U"_?q>9&9ARVk7rnX2jAcfM.@SD_Tdd,kBDuY*<[jaFO[$OZmY@J]L4-KHI
%[D?Ls2GYK<8D',X$_a=OFqgbZ1h<,8V7\.V0E`6iHrpbki):Ab/_K>+a^kprVT.c]AMslcCJcNiVi%^&%AOA-#r^i&](FWKE5bpm
%Y#tsC.cOYuA>Tc7cu7mJ_<r\f-i,%$"t,oInH^"M7P_un+pm'*G"+fWBT%ffdchn_WM5!Q"tprQ#8^2@CcX@t73&eb^4tl>KqQK5
%"A'14:n1)&UBqQ"Lb6Ll.@qi1;Ah7snKb'Nlt_34!XQmL9b89H@P0XOb/?tQi\4"s&TV?['0i0B9)Lg]>"gLO]1N\2VEodYpomG'
%=F?8RE6j]M5nsja1:5A+GWc*N,gNNi%@P(nMc-1U$0f)@`J?3UIOSG%QR#=`=npGcX3?HX-4M05't,4>.k1A&JPmBsR0omK1G>MJ
%=_TUISqmdfCN:4'.;:V:85Yn*_%i0LWQl&g\Er,B7$(4a6\m?DdN&(mKEOCq16EM)ScSh&67g>7b>sj_#":VN5UrHuHu^[J-t0Qh
%CdM(MOW;;j3P[YM"*?"i1Gt2J#cgAF"N7T]ihAJb(([[+("P?kK)17^bZYc3Z4M\a"p9L)L;c%))A_ri6h!2C+uV)P;$6D=S8C7I
%LQ)L$-)D?rg_64!C#0UZ;;`nDgi75rE,pIO'-(r-Lt%N?Qmb&=$+2T`EAnIU8/7LQYfRR2TAD=-LrMRSoc20[bfoY?,i"LZOEpr*
%\a[pr8XkMJ-P!a&^.f(2Q=4u@(;pdqmQkp"lsla^"QFEI$3gME2^-D@E$U()@>C4L1q"+1>$5"#'X!(Qhm<Qm95pa/@fmJrQq46N
%`Yk`]CJ@YN.CLGGmQ_AP-S>huEU_hV@"lJis2uScb9?o/+of_/s2uQ]j,ebR.SR4#?imWQY^bWB!9[?APbPk5d=3&-AcfiG[7;si
%#Gk!!',;M4i'`H(4B5OCWR10O"mE9AR?!]PJN'\B\2p`>=H5kd(@qh:_KuN\V*-0E&feYrh2RPS*/OrW(TSQ1U2m93&;rogKD*%S
%/\s']o[Ab6K0ujOkK$En$dbIlb`3i4^dJUu68k^?=Fb#0JW:j,5_s])4="Y@1jj7cS3_Z8iJD%L2)#&;H4m'[Jg>s+D5Dr?J"4`l
%K6U@O,76,mb]r8EA18uT%'#8m6P$p8BM=>f'5W\b?ULX2HqdB27"D6LOU0)W,DHapMa@7obE)(=!1l"eb(5V$LeJsral$g82'4)r
%d43fBhWIBm%N\"hW9::@6`cM1,hNo;RQ,KMLq49D"4?(\f(e;]L!s1GNt-PuHH[LZ31u37V.h$K"t-u[04i6pGd)#%)a85_i2oRf
%J6Yn3e;6*r*!ILD#Bt-&!YJh(ltRk::+L*^jCCN/"H$Un`$QJLGN.kf7CYV*!CV<MMASQOOda]9@SMn:@D4]#o0Hh(mR>#uc69Or
%;147Ye=K1H*0[oj,.qm/X)T0dN_XTrlk5?BSBjJ_:i_F^^BkR0mbm39L/77=+B=>]7;\6s_=@Xmg4Pu`fXM@%*[(rR=Z-qs3B/.)
%F,Ikubf^X7iBrh;h*C"2*tfjXW0Mnn@;oHkqE)Q-$8*BOa<q'[&KG6KBtI&6KV6nHehZ`!6tSD,9LOqEYW>#/"V1gdZ%eS]":otj
%O]hrb2)'be[>ZNR`T'`6n%4N'D@hd59`_!-n:l/H@8j9%V;N[s;FE<,$nrM,Ys]&;O,+\X5@g(UZ7_#ZIgSC?Ak*LISIHJ^D&ihl
%6pjP@^#Y+dUTnD>;%T[V&EZARbSZ>TVe6U?8D%T&6VIjh'm`mfeJ/F[*(;>dh3e]R,"\6.ZH$9E3;eUtAZW4`#Nci<`'s8A(s,AS
%d2%:BLI:,:O:2@N&H_];)E9KFn<1XQRfipF`:'@`8Ni8g6Y$HFJcAE'S@,&s"L2*+)JP*J*`<?6!Q<]"7BpCk!6%imIi(GoWY,>t
%P,U\tK`j2P1,YB)J`C$9?7Q$%!+n3&"\qUd%LgaD>b%-Ii<1Fr0bbm%1mABLNi!B!5]:DRlu7^!kiH;MPqbZe*u@)&K0j7R`/Q?%
%SqjQN#\d/c'WnRFd%#*GSshuIG6)s(;*QlLd#U\AVPq,L0pr2W=R8>?A]WNskXBoM:8hRm^ki:eOtq;LVoj+7`:YnmW$;AKIUlBe
%?m>Y>W=2P2;h6@`n7[\-7&'0!+@)UZV^<'JL<t:"3&*'22boBG@FnUuV3GJZ_Q]6O$6Hu^?o7Z^aqQD:9_^G<,\NM+^_e6>!7mH/
%19hr1%Kb:[?rXseo!'62PAE&uHo*s1LG6OAf+e$&@#?@#eQRt5iK.@KM^rX5+3E.`3T8bIJRB'X)rm(o7/L[B)Mea%#VEu7EEajI
%Iu6VGK?7`h<^W3bl&KG$O!Wm1Q&K7`7o5#";&u0WK%Gcji".m"k=n\27,WHIH"q.3a<0L.OL"6kLB.XQLr&7R*<[&Z3M:Ab`^E6o
%"V!G)I*@C;5=3;c943Cf%,r\<K^hB&R947iK_=;K_r=oBEIgs2""XuJ6dBb1VPp44N^Ba+<OA`qZPpa!nuOXFLgg0L`A6Ycd+f4?
%7DB:%AC/c%E-FS5pl.lhFqi>>0MQ4OBuL('n9LhVKp>O=JH>oSMn&b"CS7%\ecKfaiC,NSp0a\b6ruYCY<d18U8(;qA#-4&)lSh!
%:^4ir,:F[#\3%o/Jln!<&_a3&iB)TX$jBufMkMm76kfd+Vo!.,4B!$<]#?*NNaFK=/<a"Db@`f&!1c_l'M$<sXFo4pW/!!m+I7^A
%O.=raNhJfg%VH#c"9>6D,2i^,8ibs'+<$S`DQAF98-'M9fjuB+q7mti?Vir.E,]ifa)1lZ`/0.P3*&ULM/YcIO2lDh>tJMVi+hk>
%B2qbM#S"_fH))M?="nY0$gnEkcf`9)@kn.<Ycq7m,5`.l.BR^UU#(;e.uAp9SFiKdb,mY'NjorL,j%WA5pAhajV/=q`R7(DUcfh)
%Oh_7k<!]&s"==8QZU>V[BFVe_X[FrIP-F+"`6`8k-WC1*fa4Ro5b3J3N_i=fd!Otb3+7R$8t41/:9]@8e`95:L),D#KCCqC5tMBm
%#%G@s2#)^2p`^jl$Js!+%S@`H]<fYOnkgPB(i9rlh$&?;#tMZ5N_sd%"t`Gq!0I?H"GX-c#%Un0.C`jj@KcbBN5f96Yi(-WN^76L
%*!Zu]iZ'qXA9NP6`hmm_]3keN:FG/dYU!$ZOqPhsJ>lp+AB5oP,r!.S-m-\%Le*B;,1Kc%X+M)c4EuU3i>oF7MC<cN$kA?#79DNt
%!FL"9:.?g*J6?S,\eIZ`"3YL+!QuJFD8?U9Y\YM/BZr4CFohcj6]tqC!PusHO$W-oM$Z)cb$RO&!t@%k4Fc`_Drd)O.`#]K<>m1f
%$UVeDB4C$bC^WKb#C\!*\)n\5Db\Al&$EAfNSui<g6.#>L]o"Iq)FO<)'lI2nA%TM.;bOsnrl4oL*I`Q`27eS68B$($h3O[IgLn2
%a]^#l'K+sdC%t+/<!+15$9KGEYa1*S:*jaHPT]&.#[>>p[j8Q$!oOb\"EM9df<@mZ+p>#;J]GXE11Iq9?3ebC+Rp-Ue\Teh7S490
%%-sD4@,t1AhpQbK.']5n[Mj2?#jjT>GJKEA3<]GR+0lmS/0ADSQ>Jo6?F>_Z%5i6>1^2'^WKjmAkco1e8p[^L+9HRH_`<:!PQ>]U
%;^"GW1o)a\;oS9D8LAG]L:.qU&BJgD@M-IJT*HZ.c@ZC9@/lMWIoNF8jJAB0l%)0SnA.s@XS@])El/a=WBc9fV+34%+*eMofQ3E`
%L/8NPY=)i#NiN7idL='/#Z/KLLnnWRRRN$lSoqQ2MMf3C!&GBY%)cQS"'#aY6I'J%jR%`822SDWlnEuqbn-\FOc,)VEJ/=H"b,oC
%/YU:"(A<D1k-h@W,YE0D'P9Fo9,`n="2>+(g*_0tT.763LYF7.=piP!_()]0Hko&dKJ92J(D4WJK_C/@)JW<b#R=[feiXR[%@ddl
%psIH#&8s5e9p1;bj.OK0$**$k6KMWc$_1AQR#h^TL2&2(ZL<1kl(icN>R-b!Wh%N#7-cWTX`(po#j2LELRFYC@'LF@2gVh^;`O\4
%ofO^raVGO4>]U=\Gql->`1%$(Zp9SK4:L;XZ@Mj=a:K=c#Y)Y,TH4/DH&bF)'Bc4TN!(X[806V>j=-:<94NL,"*Z#g9>gA'&>kf9
%JH@C6KO#Tp[ZL-?F!c'++@6t<#5RH@e:k4YnO?%gfk3jmj&g:F!Jo/(CC(ImZLAmpe:K!`EKcKX>U[BIhhD*Ll<p#j/6"?oJ+MM>
%r.m:!_+o3K\Te4_/EKb:$*>?('M_aJ3q3als*]K17G+i0">^RT!oe"k0HE7/K?3!+L8QH8L^uI4no,4Nlu5?hLEXJL`5]/-ML@fN
%ldng93)r2RRq2+/W4J/`K.,CT5dEL``'_#=,Zp.?jZ,RFVZXru/.),$E5!M("(K5))\!5"0K1g/OHU32L5PU(ndZY-,J.Ah(^!b@
%&YKG8JIm;VNesmUf;p8Jg>L<m2k'f7,5[8M.GSGO\*Q7QgB-rb["oJ"]`UVoYQ-Km`0qW6/<A:b**0Y<CPB=W!)tSL!',oR+=;kO
%>i5dRPsgF_%hauriV6@Wis_+$9SsNh::q*Gaa5#a!_?OKCij4J^p\oS2pU;GZs"FT+EAIsf'j;Td^2PU=uQ'dM9Hia?sH*]##Vu$
%3*<n=J2X)e^a_oEJfo=kOT?T)(ZG?/EY2*@"'CT5LSNOg)M6N\K[6>q5lM'F<]Ok7>(VK!OfKZ&df>4]*i/.ZlG@9?nkB\EmGJ'i
%'cTZ1QB+7D`=*he9BK"s8#AaBM'[5',G%1]!E$.mFpQ^V0qrL^WNN3#oO/n&'a\cL!rrG!Yp^qE%o"@;+N\FPKl`T:aWo\GU3iU*
%b1Qrrs(f=O!lp"NS]3rLcLW%*+-)WjX[=6u/p3J:5"B?.>g.r/%H*O1fWj.>CESJaUo3Ulj.#Z$p-"G\3>auk.eAr9VLZiG^p#Bj
%JU:.T]eWpa.3^LKN,sN##*/G=4&g3C#9rLH.%`3j'uQ5+1)%VT7CIq`4-Lm.82!K7JsT\UE%VP*i/t*;5b`JLF&$OK%*BZ)&]4<3
%0XF:E:kF?aR*\<sKfih?_!m8A(i\RH()FHm$>1iu`^_7E)\XqcFX(C)8jQ"n8??(WK7!hFU"HTV=5XlA*0YnL3'\"?'D0ZsjG4ec
%#9"3p9>l<nrJ6X@QjD&fTh$EnqBX$<r_u<[_m,2@F8gac&\MY$B8gC3/:aUc=QGe<EAbjN>&b#?/?id"gfiXPDZ`'/O@qr3O@r0,
%ibO/,ZM=XDej^54PUgQG^08Tk`-0<u08@jU9b-<lK3nu>+nGK;':m:^oKb;:P-R5'H,>83J_^eCVma)GMA0LDWVBNBag`CP7QBoZ
%i@HZH66`Mg.Te^DHS$UY@u$sO]JYdA3!02CZn4TH%VIRS"9c!PaO*9*Z[=!WM,%n)RV[!'^+/@2%dAZrkJ`X=BQBZhF67f2<8h`4
%WKNMl6,FZ^[MU>N(.:>bHP!WU`nh-l>er2*R%"V)]Ep;%g#DedjLYA:L]7C`/!<r7@9k$1'=M's]E'_*rFQIH;$e7q7a1pF;h2er
%HiP<<!!>0rhhnVDK(g9Dg$t'bU`'_NJJ/S=69"s:@'MLXJ6sG7fYX3b`!U'B13aLg*)$pd!XS=1JS7l#JD+L9m)N?UY,H>YKAjLO
%_,<fDj'^4&QJoLji*te!5n!*+:?6qh=!Vq(X^Q2S7t?KtAdDM/+W1sgGSkWJ@*rHq:d?jgjH+.:FU3I(42j]1/V/HTSJ0%S&3Ii%
%`+.m'E#Ig`5nXU"jD(K_i<[Ch[mI6b",Zp1=leWR1l(rC*9YTi@2:q$6Z&U[K<4YM^-lk1%s#=87W>BdE8\R3f[)b5rKA^&Z\#+&
%_B\'ui6`/C@hDtg3H&RPLHdbqa`,\nYd#3l-2Xodd)/JPUl4^G&tDsRM^P0ij$F/<-%kg>^r:'a,R1eIS3.mha!@_VPpBaPn6;?s
%2`!a"ol,^#KG4B:"b_#0U?NW2g&[U.\.es8WWrI%JE7+XfDs<VoP@)gjueg*h0ISV`G]5<bER__U;I9<Clllb$0Eqk=I0J5q-qUR
%L.L,J(1k8fU$X+&$0L"(G``Wo#0.O,=JY[0Sr76YK4$6T@1W^-7"6l6/AmLY^_up?'_#>^^S9XbYrJu++WJR7<\CV/*!r-`Q685B
%Vj(il-#BkP)9YDh=G3)Eg$KW_K!57LLDLYNKgCq;lY[Sf4UGK@Um]AbQ/ES]4l=;8(ghG!0rN%"$Cl=Dr[2D,^Fl[WAFS,Q&Z$PX
%$&+<s9Z@X(#7/tL3"uA2BGj9ima%4@+ES0L1U-uuZl,>:*;0t`]T$uPL+&0BXMN!Q+\RYp!9,T5&HN"8dfBjsQ7t\-#[m]RmRgt3
%:^9IiTPfQ,5f=.'L8cmQk$nG5@=LC=O>_?(RXo(eFd4BI%^?ZIUq$b]%thh4_7X9,YPE2K5$N#u+W51D@a)dFOT9KB7l(3&Q8#P"
%@Wr<R:^@_+cNi1!%0`Ee*,1(pi1'q3<2Qa:c(ekVD/I=OR#m#c=6)LITLR]U90#C2!lAC[OA%dm5%p4>7KZ3hAsqT&&;K\51H9qa
%#$Ag*!MVq0l?W/<!9A2(5_@'Hpn<oP1p9#8#g"o6+ANaRoS?f3Q8kG*M'A4BNj$&[fM'@f!bc'ad,Mbu)&D,EA!!Wb-p+Car4/_]
%*#O:_L]D?o_TieVo8rnTQa&7=<q<.srfscgi+F`uJr,SfbpNd81)U=3Mh1"*>O3CF^uc;IDk,]%hS=MO<=XRE%%_9S>eV'[rXKU&
%#8d_*+TpC_b]&jc@PIsO"9e-aL1Dpt4U/sG+;Jln#f9USK4<aV"o#rQ`8q%<!o8HkH@2b>dMrk,L3!DHq2n557E>iZ3!e^26Drq<
%Mto'p&^un;:$T@L;c'YX0*Q?F*2e?$,VB2D=)P$i?=AtPM%o9+$uH6),ISa.QW)0L`Slj>g[b,s5H^@1ZA:&9V'2mALK9S4ks8j1
%KIl!Zk'W+0!>'I57A+/@-3V&'%P^mYOA8WoelcXK[oj0<T8Oa_*rUAE&;W-'*Gs_^_f`EX]U3cJ%1X8l3%V=FS7X4qpq`@/?Z%49
%[60n=okN9i7MZ:R`X"N^Min';=X'BZpdfkMbH5))ap]o7JrbsUh\HM&3$C)ZJe="P12r(')87dua&!^7!+U\AK88=Q)(>1lcAJuj
%J:j(r"XkE#i9CH+fKG-Yi,B@WYngE9=9R_PManb#i7gg9fV@G?UKroO'\\"TAO;+rmU"ps#fCk(i':V/%qnYH&^SLBHDn!&eM5H%
%SAH;BGj$iM;Md\41O)h`R.4WpKKU7o3C5+6Td>I7BdGe4.7+)1!i41NX^!`@^hs:"A$&;[HO`lVE62Q$;B/bK:pLOl_Q'Q5mMU?c
%fr^/,d6t-ka>,)X,C9mO-ntP@E:=K_Wf.I5Of+1P-mq[R%,VEV`#Qel;T0I*>)@!,^F:ei6M;0IfRi#4M?>hE6OA3s46,>nMb`\s
%Mr^%tI+KOO+aZRbWY!UpLGG6cQ6eG,RL%h=U.VaPAW`6D8g9lH_e#;@ApcRBe.NWR]-4WRKPeGiHCLAF'=X$[l`gDBlVg*Q\3poj
%+N<p1qG[^[Qt?Nr3+4:UZ<sWi!lRMsQG^d`%LT*em)gG?$V+]ZA4S3.#$W=GQuF`u]G`X*Pj^(K9#SU!,+$?l`?'bTH#U.87]&KK
%9$XJVi1Arb14uWePUo_4Th`KANB<8AhZ*qP0.^Ofj[cl@,es#eSE+Z7'p<6L&ja1@@P"#<]EL%nL;B8<n:'4.EZ$GgM8><9?n(_,
%_m_5Wl3pcV\@LQ$[@C""q$lbAb+/W;.[qc-g^^r<"Gel?7,WC%G)=,j&<l>jIBB47_]slJ0G?+>6&[<AE2L]:ij_(K9<c9pf]0g*
%294[2R%T'FlNWM^E=TjJ^.HQ$K3AK>"^*pMl/k"g,iti1,`12/3/iNS%KeLPO3X<PLb4pC>D?NDQ;?PH]OHK9k`E6:\l;!0dT"=X
%b7MULY[0*/2$\H</7(5G]u2+m9K7jUZDlW6NkeQu2[;k5OQk"$^,g('DK4+(Obt2'Mh5P3+P`jrGQ,_7.$S:q,9(;d!Q",M2)[2k
%&]BWQ`cqf>8+O2ult(RgRRoQ,_569&1.KIGEWR;?<"r)W_?"Yl/`W@EioE.1!#^L34>F?MRfeid)i3:9bk",J.bBl:NS,R(4*1%R
%'eu7&Wa54F_rW874mm>0AAT/3aIR^(4i7m:+[iR%3OFYsbi-`9&Y>5cGg-MP)Ae%TOjJVOV31e4Qp-0f)GZIH=D<dYQpo60.\G1#
%dU,u8].#e5=#`%!S'-)`P'$oaNr-2jAQaWO$5s-."V[\s5n/MHa1F1%>tS5$ht(`s8NHX`UlkjoPhaL-MonWF&VepBbpZU8-OpVO
%,)k['9&_F5MM&a<*b,Ai0X8b<,"us@QJkLU5]H*#V]^g*%%'?W)4&I`OHEWP>bD1h_qE$H7VW*GSg"WW&a=9>\0d&a"t<mZ)L1Un
%"`Y2_`f>./\L"cI91t].`sJD]YulV$f9t2P%h'97+^@`8-_W)lF<jF.$%!QI-''S$&Bi#q!\@oGIht(S9#h@FfV)_a"hn4Y+]*t[
%/tr7=ilF-@W\e;XRP.Y&_8V+\-CG.Al82i*C*;4j1COkLJ.sLFX`T<6NJuhmZ3%8bH"5kIHmFaU:@+>;W[t:mU?$o&$==7f2nD%>
%&Bk:s;\,#RJ@:)k2u2D4*ss_lOhq\>Pj&a'Z/[6.NpLh=CL(c9,ie2%O=QbjOu0-JZAB6"UP9A*`9AudP.W",&bU`,:2q"(;6mV7
%^=!Z#D9P<:)DAm#QDI:fW:C92r0R"GDn')eOu@>P,iZ[!k3,'B;.>tKKJ-KI\<Z1Z?.bfZA8kd2a#@\!2caP2Di-fsZ&';nOl_dH
%:3X@"O>RuS5d8j>U7,bfC>jZ6;`fWmZ8$'h=\Q.JcBft/`YW.dP4=N.n1JaOqM?[#EDZen`^>eYFj*]H&7?8UaQ(uZ6p6'n&]]O.
%9g0C[SqWKCk=j/dfFJLBKG,@<m)e8.4QG4;7-DII"IWY-!,,tU#K"QtR>7Sb_Ae>J@E<H9(3&u4i*'!qMQMo<\niiG,H?MdFs[D)
%36."3L%_`*_7?r6*Tn5GnoUOtE8Hb3MMGug0OmXH7/WTDbaH<NrXM@h_-]Ko=?\)t:*R,#B]hX2$HGL;&1^;I/8=,cqCQ[J&R<51
%j<5H6^_P@;+=i.]SFp;kF0l[K.Nf]7aN26G6:7\b(:][NWYikE9sF0754`A5,W9FWJ:O->R#9lTqj(0;OZJ<A_)\lX__F+a*G_4'
%><lCfohQlKLFZO?JuRgTTH\uM1J'VP[D=PM`.DH=bMr%.BMcU?MXfFX<XbL[WajJ_j\$YVEJUZIZflJH.1X"89U6Y@cT[RERj.mn
%)O3\tW0+H5_`b=C3"R4I=9r3/\6T=,P71MP@NAA5+(-_K9`@M_Y)#)r"B/Gg*"oKFO`Tg``C47tF/5T7C?m_6Q$iNbL7s\FaK[HR
%(BM?X.KCa"Gd&Tecg*SrV[3!i3DKdfJ1H]_0[=S""?/=g_GG8Q+)'Z#EW?ri&$!d=@AJ:ED9=Y.26S%gfEm[.+]Df7,H.,<#M@AF
%#R@]gfI([mR"sn)>Z$d?iMk6/j3f*jSm1!LHk:kugnRg.Qp`s@6E!&d>rn;Ce=9ouYA'!f%P"?fB*c02fQJ"!@`s4<Zo\ABQhBhf
%iWmTLQW?@]$euHGCLl&t'!n2]?g,XSMh&eiS<GVY@;=sZO:u^5O)i$(nGDD$]R3htQ[W?9LsX$8i%ip&+\frHlc.ja1,ueZbt\-$
%&l,UGJKSc2(QYm7.Z?>Z^fWJ2nGuk83+YQG3DMWObIM17C!AWCoS,"Wi!W=<#G>5\FlP60!9^n&'+63h3(,Qc`.XI]Y\B-`,>o$"
%FE.MPb(UIkD;fI<0H`QAZQ[N6"dY>e2.FA^'EhPQ.[*8=N\^d.V[>OEVH#[k6O2rX\Z3Zi5Y35&6#FH'VslUNo.4JO/r@;(gpP=G
%eALX=1Zf*S&#blbXkl$J;mGjLNQ`C4!/P4)^c6T@-Q0!-V#2P>]ThBn')ln<`Wn?h-*iNjnI[JZAN>\C(ZRbYnMMd6a&K;7/24[;
%UBEf@2dZ_P*e@fWn67V6`T*Zm^<d]?"n2P_lqbY!B1dN0bN%tP3#^-41'L)4,b,qCVSKun-\ptj\R<K'7tLX)#aJ:BBb65%-nLJg
%_`_m3i7H_6k&Ah0=fP#Y]E/PYoF,P1@"GNQ9nL"mbB$Jq/ej%hLO2$8XFqf0E!S#B3*:*J>7T3d@7.+:-5+O2JFJ*Y@:5+*#F%c?
%J<rX]l=eg,`b&I*ADF\XHdTAM6j$Z=cg\2(,B%\`cl6(L!Bpj>KtnCLa,sU>f0%Bp8]q[d@VU-)k59f[Nk[hI!N\i:Lue.<!edKc
%6eOC2m/_lZ(_=ZQ,(^Z,iKr1>+Gce]&l/=3lI9h=:/9K1&O@Y]gf#2mEtejNA=gDq&<%;^YB)S6G(N(ES=h)PnW99e;[r2L,ecDL
%=et&[_D8Eg"W5:rJ8DLokBok6?KEG1)Y5Y*6$_daB]H^WpdV'3)'Esb6H\p(Qd.F(SV]JhbrlMH#NB#,L.N:1bLk/U&A*iN,;@n@
%RoQ>fi,(]Pgm%j`VW*-s6H,>`<fYKWZFN1u4<c!!L)>c7@(?amYVUnPMP)SU#Rpo;VDuo_peT3:nU)(]jjWGkU1Yb.A/n@f=7c\,
%&'Hr:$.j17Q>T62Y!TXA!HbjK+!FYjZ#R9HartGP,:k*<?N_fqW_\5"r,_iFEksa-$fQ/]n!_7PNP&iB-F'.pB0O&++H%nHe,3em
%`--,O(oQdE3XEGsk@6tAgEDm%49qK%Eg4O,LmI=Q4ok7rl+Zmi9bP)u:cjq(HoNsLm1PH6e.RU"Mtb45Q>*ir8+HD5;%a7nHdar5
%%,$Ys.=tnNQ&DpM6NUK;\2B_W26;uS8qZ"_K0jHl'!Ldi'NRQA`OTZD]7c4=Gbu\+JL2X!rsGVWDGK_LOTVadOd#p]Ws-(8!Q5ul
%&UX"4a3,\=D1k"a-e]:WB]6Cts1c*c=k+e.cKJN+GGn(D"W@'UJHo4!K;$(%(kG/ROW3!3Q;#Jfn_<qJl\hjEmSf9Q+G"0JG%Kg.
%f8(GoIi#(>e:P3L2uLi"!f;(u[^l*Gkp=sD=;BcO!![4[%[e1_O6Mcs4K*iQFH[GmDj(r?Uon)t1@o2G28SocCZj9Aa!]>rg,cLi
%Bn2lo#BJP-K-KOkk.-LO&dq0O8]UWi4J,76bNZL.2U#fXl3I(TZY?Z.kd!?WI5nmkqD?_u5n2p(Vso$*W9M*>[-QD?q/Pir]d+pJ
%H1OlO"<%G^+Y<Y*")1K%a@N^*)'!=G>aZM5kMCA,SSVZp:naHY:'KV3m7#31a>dT;c/N]-E2-b2DDa2#8TG0ud+[=\5FdcK(b+'I
%%=tnhK<dULSuO89FOg<7*k/g%3-FXtd39eZ:ZM$cpk.?!rl7a,MIGli"B1ql$5"8ZS@QoC*_61/H4&c]#]oQ>DKG4.52VB##4%:5
%eV1gpLTfk-g[likm<ZRL?JuNS0k(6Y+r3$D,-Rh:PdNQ>GTua:+cG>cn/M`m$K+<iR9_B#Xut>)?f>@6SGK;3aDX3H^\sl_iKpXA
%h`=NI0rFpPS,L^KqMiJe%t(U0cnW]bh`&aXTqaLo0?i0aF>&W7?DCCkq6p?%q?+oSIXW-?e2jE+es&QhH"'X<Wl]ZX=_^k/n(DC2
%;JfMW#49mYFflG<$.P)hcs4V#a)Wm6\H8#"(06(jK6=5maDk7WHukf@0ad7M^pFq\@een8SC5JP/U=AiR=_"UI^#%8q7=WGWA(=E
%=2(a%dYcRiJRX.b@1WWPFWjFMJ3G(:Y']&=[1+E?,r#2Yd#uQI]5D&qOA9F\hX,j!7s#OumE-"DHG^.+\O@%XC%iN*k&j3m5mAXd
%0'O83q#X^VC^kDiFTkEVd>HI)Vqn?9@P9Vsr9;eh(/gd'0<p,)1jiZr!6nJlZDd+O909[rRgp[3hRiP$R\(sE_9^/RokS4=Z2!lQ
%5<u?@?O]\[5])of5iG$3-?ep-b5&FX?39ae^'-D%JQ:$5#JU=Op!s6:*K14a'E%ft6M[5B6[bLZ6X)R_<4^XJp+J'bJbbgdmNlDr
%ppl2W48'ZcTciP2-5us:%1^VIX;J0a8>&)+l2l(`j>Yl=Z5l'L&0@.'>U"O#`TU)p*.O?[91?FC_5:O(TN(A*:"p_J?VbZ,bR6cl
%1#2C,!(n.jh_Ou%WCcA@+EDgJGT?3EMa^(jU!"+Z!(d5h`;FT4L2s*/LnP;DX<KenVPKF\N#A3%!SC8%/?C2kJ^`p*"Dblu%F']]
%+<NbV>e72Z5W`A"@Q4l2X)Lf6[KCLi]%6X@N!n+MFY#)gdn88\%H-I^m<2,*=eq.X%*kV4;Th2(@)aK[f6q3L<m@?:Os\<->R#At
%C)]9!25Lj]aHLQSPYk,+cDsJ_5h0*-U'#1?BkntC&oFa4qioH+a=4IA24nZY'EatQK]^E21;uQN3E)#T.t@;W1`@klf%am_hVd9B
%`!ccAh,_`:+[lYG"4d^\BV773B,1GZhA(9mr\?AioD,4KOcgQS4ZB+C83lo@`?+1t0_Y*:3^jW1T[sL+"C5&Eq7B@8h'Hgng$,m]
%=G]oQ*%'1Q5_[o^T\Tp=ZXu/"gP8&t]2(^15'gMrF+/Qp+<L:QU1BL3A$<P8Io,(Z#3M)#c%F2Gj&F+>nL#V`=oT+blnCb/oqr-^
%-NZ*"(IE6KhPR<PJLfJs?eq,m07e;JreOkQiJ&.ul@RkOk2B&R3*SKJS&D>3d_.hTOqVfS9-B##au)BN28YP`ec2FdYme9#X.6Ig
%;oprh\aQB%W#T'KAM9,N&@1aJYs/4:!lki&qr@KKE7iiul6q3!qDS(-RL>1A,V_hS`%Is#:ID/V9hilf<>4$^/fu2*N4cs%;GSF]
%8Bp].&31l+GJj#1q7b91oe+kN7udqb0-Jelr`nK0DS"E26eAcZle5SVkhsr*ea^aK<@Q8Y[<q(-VJ:Q'^.[[3h>VNBqb6<*4<)$c
%s0&<2aL?A=%5lTp+6V$<OoTI8?mb8d'"'G=1.IpueIms@0omG[G+($6R"ql.]mO5)9DkW/q7+g]*W+k&j)#FckNT,5Mc3Ao0qZ.1
%eX,HqE2\p,eGLUuU^^:W1oPZ\-p!i0Vn;bS=%"rW`VADD>]<6KS.D!d>G/_>^>S2fgDQS9T*tadM%R_Kht%`52++T]i!PHkRF<$E
%$,8[??f`1qp++\=1\5qLlg'f)\E)p,-%dK-\a%<B2!)O'R-aB\p3C\jRaQn^I9alcg9]2be,K!NTL!_kn-2[");@fa2qGpt+m+ql
%W.rMPk(Jc</+,`rQm*\*lN'L*nGIY^H/!M.grV`19hJkfe++P_<X2'L=aYbKchD%5/S?_uOG"P$Q&NeH!P)Q8lt?l?pap,Q!mRVi
%[TGnI'0\eU?.B:=S1l1;Bj'.Op=u&W9^N^gQ?,8Ydq[08]ZMO8mo_&4EsYa\gXX7/,MV!N0;4/DB-nOP%BD`pcZDVDAFJphg6A+T
%nm%tB<Zk/a8]m<dEF3HY5bT*a41g6AW7uFsrK2+`oOq-k_95C&ELL5W9i7%(il>[eV3X"\<EekL.lIA;mUnRGSQEoWLp/uYd(adD
%\OsK)9^S*fhJBP!ZC.\Sc>=5h'A*o6"r7]>d@:_A7p$/_;\=6`\V7iT=p""t(`qWs;b,KsRKnoOc+K"f><a(^a.6`/a=E@%^2cT#
%@Em\:\"3!:jT'oCil+'&>;2EB,eD^eYbWES8Wl6q<GLo6Aj2FAdXOR,T%IGBTn1_kWM<p'TSW+j&t'")?`[b(,k*5LQ"&=nP*)c8
%NoS&UZ4?S&Q9[lsk'<hSlR9@%q^BB>ghG:O[iiWYEZ.B6!F7M3^C-Vj,2pej@(?#m,WIJ;MfC>Fc_;HJ5#j]n-A[=^c?ObMVC&$k
%,dk]b?MZi(q%pFJep)m_Tnk20KqQM_G["nXo5!h6J[!eY3L'3k[gDc?71nt=iNt"\L-c'H;(2Do`M%#dK2H52U";qu=E5n%'!-A&
%*)n([^&>c3=k^`IpU0krIo1g<)/A$k=qh25?6,9o`unDep+%#N6)e6#'r0$L_I8;K7OsPm.q8R'7edf`TVh>2-"XT4Y?i$\o6h;L
%OOs_q6P!)"Z>ekQO2k*q0,I/4,Bf79kU:2f5g>LI;W,rV1A>p`blIa;Z6O'*4nFf^+_Fq?<j*>/!&bd#G>BMhF/TGiP:MkZk`.6+
%%IV1c(W1En`!lLK)u.>Jr)mmn(M[;s[<5dFmCAX\VZ&P--9ZUJm>hW-f!&q7b4r;tBli[CPVqk\nYd:D)@TS>`1Y>5FQVk9mMhG^
%*ku!\8mM>FGDpEVq0.OLGD&Q.qQsT5KrQLL'isaX;iqTJ\PD/pW5fg2Sj=@=;2H1SNg(ZQm)5Ri/M!X+GNSjjDV's9;tC2n23jJ*
%dq<((`o)lhY)X&](67ssfN)k9OL2VTGg(FqP:o(_UKG&[*s\S&0sWBq5Db?S*"]R!GEmA\qV#]RHFqjQ`fD1aOH!D_1t'B`:OW"\
%"GJ+.Y(c>S+a6GN+(!o5F<l0im'BtC#ab+#[fas15-5b"do!,,(;1)`ZS3*<OSW9Nd4:?2>PgIuci<,bRX@"3FhuYt?B52/b<5d)
%IiQoqR8/4D;Xn,7.Vl%%3:of".kmhsSTlsqqgHO]i*G'q74"[9Mii*Zkc2Gd?RcN4&CXg_8CCNWV;W7YcYNX1*pKI;F=]9$Z5*$j
%".Jfm+id6OIG@W(!5V,26=[)sZ<=#S8Aqo#O]2*8L0BZnnlTS<2h`G#bSEV?p6+)gDfHGP:t\]sam*Kt\;74?Js"AH4K;EEq<TM)
%-p(2.6q!JEj$^g2COtMO:b4YV74<^c4sej(.>)e80mm\57K4!d)_'k]FZb\D(jE^V`!W8&Ok6\d&qRbfA5[J-E^YEaMKB#;EDq1#
%Uh&QoqI27&2W`dYq3"aN444;7faRkkS#PLB7,eZ<ih0)CV'7)''SqmiE"T1?,X``QD'AkZ4D+;fa_qc1(5cr;[8/"#]+?CmZ_u)d
%r`p$eTip?Q8dX8eSA9OT7OGA$"8_k?7TA1.3QiYS6?'6qPGlRfa,$,7L>tbLZ!@^H@h7sh?k8(+a*2I$P^6F@.^Tj<Hem#.V2Y=]
%dDQ*j18C1uHJn#&0@`M$T,XQ,CF#5n;nlFAatcB-4E0r3G_3TV>gGKa$nA/N:r5;lX9KC&D3=Y]8hl.ClY>"WA%@hP,-.e2k&43m
%QTQRVs3)Iq=-`S)eK0<jTAs-+&CPJD"7EkQltG'(U/0h9a?)DgRA.D>kL"0G6/8BAEn&cS>c1<?)%%(2'-i*to0MtKl02CrK15Cu
%=RME[#V$1p*n@]rle>Bbl<ZUS(KNrt9PoZ[o%sT%kW-;H7Q%6X?s&*JaAGfhCZiB>Hg2(DHYif6&%G&$01(!Mr5875#1^+FmMP[!
%pcSI-OfQ+I8H2_>$=>'@4iZ.enUmCW(6X\]lK+_MYR]0t;tD7i=oa]g/(d:BY7rINNpFClWB-E^r2;)[N0%Fs*NR0`/5*7N=i+[9
%_lLdtE#KSdLlC`MA^Xe:%M-Aj&e7n[otm))HMA$&o\KA>6.OITCY;R<U@*MA,`7rqTSGIMSO8ZTFG&fOSC^c$D.!TE\Muo8(r2np
%;o*]#j@)3UCBS;-a+&01@RcR/GF*3#c_&mmT5.DXCDaF36tG0;p^4\G))Hh6eVdP-<fGUt/O0?bNq4;)6S'FG!K!n(J1?p,Y+?ZS
%3N^ID=CDKDpjUdU>L^C4/M.Q\,$:_f2\^SbGN/[-+qW&322AcGnSuUC:cn[b%_IFPBOKms0gts<)B8mbH`4V&gh-N(o4A>i^[TIt
%JLEd`V&d@I2iks6Ecr/R$rDI?gJ.?8,1X(Tam_#Ap6p=>S2PX!Zm%IKB,Oi'VHQJ[D*MANkb&['F%:qN8E#J0RP4pqIk-=Dj8F3\
%)SBf!d(4InUAA7AXU=?kWUhO4XYXt7d"M-"k]a34`?2H%M$tY5Lbr\(Tfq!*EQ<sH[+]K'CPl]I^pe`%$!\]?`FiH9D@>&!4!rrn
%V<hmI>2IVhOjYKTj*<l(7Osa%U"%L.qZNGmLfA[[6s<e\-=<[,:9[^$O0QbH=3MYL\^R%U5lLDP+?uD-$-sp>;Xh\fhpun=R0:'p
%S&PVolT,):qEDIMI,kUg)(\m;0;\C;!Z>PL?7PXOBW.Q>U<N6u7.a.-TfeP!o8taSit8rh;=.RX\\mMm&m0a^4B7@BQBCU^c!hL8
%_l50ZF/fYlhF#GAb^K^M.*C_^Dl8PMX["2>PC9""fMdql#dklh`N=AHn\lo^q"BQoF/JRm.<\Q*eC>8S2J@-$71ff>)K>:%&CLSf
%`TN^uq\01_-?i#pO.dgC2AhAL#*J'@"r9@2r7In7E7]K]Gmb,sXd;X5NSFbPfi7a'-e@[N:N(W1dW'V*k7c_+!Khgbj-'j+_Yo@o
%Ql8gL6j)t"e^IF[GI+U_qVLcl93+M+$i(&phg>G1M8="L8lQ[Zn\<td6s71;A#+?G.!>\-eu8:*Q#QY?D[fo/'.6fs(O23>k)\X>
%!u<:mej4^+Z4Gj>=P?g#P!P@N)m\",695,aa2bmaM4pS(a-BN1n5V,ME\kW"pFe/\TY>2Xd"0ZepA[#Pm2'UMOCel3/]t0hHAIHk
%L;/\taXnte8?lCD)qj<qAiddeaM\L@B/K&e3s9Qt>4,mR6B\.[=%NR"Ts-JRod@oiJ$rT`f@1K40jp>2U)ElB+B5)N<g:Z`T*].H
%)c&1Fqi2(@TO4X]ci?HYF#`n;Ua@LTp6T8.`,/,uKDt_DjK/7CXbi-iL(n=Um-*>MoKcSAn9YW7.WgC4P!0HW];\qWlG6=TZhfXs
%%f!/>kX;0G(t_%9%%*t-kj7rhE1q4TR"PQA&B)HmU.=6<!#EmRapCRF.l8t[e/!Hs:ZXXC:>`g]s47pZ?h35-6#Z/A^HM"E5\QAf
%ksl/ZX<TV9#BdsjGa35Q]_T"m++JJ=:4gODSRjJJ3u1Sr]_R_EnJ@^Uhj>S%F`;`gnbCZ<nk3;OdHlg86:ZD;)r_2kL`IuGDu?hF
%f4t;*J6>m/=T(k#g.W6:#4;MPTp<>7Q>^9uU&d83F)GR7i2\G=j$qg<)UGtH,TS]'g=L*@rgF@)kFN:o/lnN/[qHn<C]^FQdY"8K
%"%ie8eH2>_4@J?7G#\C$1SoU.>,UBR$GQlte!l<+$Ac]+A+PSsT>u:7c\VZNd+"7A[b.e(.gT9+<`__<e8qL7^L23VV]ArO@GHc*
%$AQ(\,3%]0U,;[*8k8_Ne*B?SCrM47JWDCAEBp%(@SJY9L"A:s\h)&C;q;=PXsJHs2W_%qWNL=_W1C(H%U:KsiYC6GYE;M)NL2c-
%?36V;AfFj&UV8.i</V>fE;_qiM4:@e'[CKT2_&du&jb=jSTB!"5QQ'LVWuah3H!jb'`HdIn7/fkQ*<*FQP3FIbF,iX_+Vu8SK?0*
%V>74@q6<3^H;U8+kOj,,#ZUS@MM:I_XNr("fWH*5ZLOC.mG@Ka5[<RsU7'G/@X[W:;h$;P<8ub)7%Q?FI<8E',T5ZYqiK`rd9t:N
%GCkhPF,<Ig225h2@[7jf'#BhB-:mI;lU[/'6gTH:,[msA:=C4hOkZ>50UgN"%<=h48=t[6%I1+jku/<?L@0B8Y44'k),j0Rg,0f`
%eH-IAO.p)Hm#<:qB1G<Y+1Id>N]Ki];s"]sbuiYg_S"X]C[?CBMd<:D/b<_Nd*4?adt<9GMq4k"D:!TS:_s9A:1#PO41u?X!0AAk
%+<8t<5a'g8lFX!'ERYQ285INs+EAaQc?<=!UWtcl1mO18?"ei5_D,nF-tc"q%AU%UZo2Ag8-/inr7Q'P60]kg5M\Vk(Nc:LOt::>
%/UMhF)s4cAYAHIes5H1Q?KTK6)$0*ogB;4kKT_Yq)36offLo1r\\T$RLo",cW\s9NR'c*a<3X7.ZX]hS^GOg,2MIQC-\BCVS$'g/
%dg6'CDNJ<d3D?t/b#rS/]kMC[rr"'MGCLsLGb^i1l<l[D1qR'"hd96f^EVleA&flJglrN7@)W$IoE`V/qi"MJ52th6n.Q[0K"WSY
%rrqElJg)S>9'\S<*/f=9K9^QqO^7&e5Y!fB9ai=Po+]eS&a^+H(5<V\fi15[=VnLl8T1g/_jd-:QOssXf3_L6^J.Ol+Mf!WmLKF8
%9e-E,JE[`+gC_'$f10pM4Zpbpo&FZ-PmI.N!Y6`CWfM0^1KMT38'?;\#D$H7Xo&%QfKBF>Zq$/7HNle0m)WYTG8+dHW<d6S6uHaa
%S4"$2`R+c--+<]-9o'm`?&[3O@GYp^=BH"PruLP+ciRq:OU+7JggP]t=]LKZ[mJjVr&Qmo:!r9>)l/C"@`7J&<UQ]j]'4Hg$g_)n
%^_&91iWO?"&i!57^&FBX%)QSU@e2)<O2oR\(SHJn?X+sV7pLYq0osu_9j[C:eaDWGE23YTmd3+-EA2),[hq+[VQNF4"F3A=$4(g0
%gh63oE-clDYYF.\Y7P+jI37G'!j<C,:P5b=fiL^/6-*"FrYB[Rh(=L[bdbNGV"@,!S"O\eU86&%bL<:C8BdgqLGYZA$#FIsADUK'
%9(8@AP3sd`N,o.Z*8[SY'VJpIj#PicU;+!:VagJP"FI*mD.Cp@ghh?rG^)$V?$+PPXEF7-TCMJQ4i!dNV9$J'$;`TC**01;jE(uh
%GiJqi]/G?66kFP*7Jc.4IW8a!cK#Z>Eb+Q2*[Qc?Bb95T11E*Ia>-@Bj(>e:-ug)aYJZR=G8b+/"gZ3<V2q-LkXQU[n?/N*f:#4a
%qGVDMGgR.,LB'm7p#paSBQe0kG:2!NLao894/ZXmg"g%HSJWr71/q>s_$>@QiWlL)iE"d)F6EFrRc--1Q7t)6*T9U5K-\EZLP=F.
%2029"\Xa`G1,tf?Jt:pb/NHO+!WLmc;NAs+pFq6\lsB-d&tli0p=]B?bp+e,P\O@'PFm8m=;gZZ0t"hLOOm<[-F&%K]6,EC[u/et
%&<HqA.5;"de--L,_7"g]&Q,>Z%Ndu7C.fUMnGQb?CT\LimbK?j>erkDri>6c5\#Qq`_,!h5TZR!MGisicXaFB5fEedWJl!hUa7H<
%OHu0:TAU/S>W`>h]WC0V/.pi$AI"#;R&FY;=<9O>JfF#rCc$hH$$1sdH=R^=O59^"2Z4-$6tN2E3"r8RW]7ZURW$K?a?D*Tr%Y<,
%MdJfTlba=\<:dhc)Ij5uh.<2P2]5j7kM%&;dJSG-$7B<&lppD0oK*<D.F3sR<R)3)(dH\QJ\6T#-M?gP.@k+p&rPV,&*\iP]:+ng
%6Mj;mSOC3A.(0k=HU7RonjK/>#V@P=lggY?r0p>eWQ`%7F6-/04h`"X:<F`(W/Ds5A"Sj??9E#jb6'.ZP#SDbMFV-E6H%j-$%RkE
%*P.:GTQpB9\k<MA.cmu0D!*>mFQEVagZ6Np(8_Q9;Y/%<WYDdC:3j#7,Q&`#Ssg\WNpLXI%)jmq_uPcTT2@[0f,O!M5.fFm"m:3^
%p2J$6;JdU[Vk<F.VT/dKa_hob<./9`YJiWCIsQE/KZG%18[f=Kr<1_7RuMS8F.C;i-SkD%UDdDH/1_G@W7WS&)hd@CTdLM4Li4$Y
%W[,[L4^'(=6DZt>?1UG]$u8d"Na2VkP5ru<Z.Y%-JL7**CMb"ta4-1nh%;SU(*_1a/OrW]j.cWfkq/CXfE3G4mD-ElH4lWQAh0@M
%G':b<fj16PJB8Q?eBn&a#_c%h7BXsg+QflK<#6P&K80F*XZ3eG:5iY4"dt*,id9n9mDu%=T\FKVqi1cihjN7ulo])K*CbNlXm2ob
%0e:<;8KDqX9.eZOk^mfQ)NRDE(.s&&WlBhXg_Cg7o:&6pEM:C;mMY@+]K^b3B@![?\O+!W!aSmTXNAo..pBJMB>%'$c(slXDT0RV
%DNG+t+\q:2oi:skmc96m-kTfB$(O!h9KAoo$@IBu;-KU),]'@<WTb2ShA/,iqSt/<2toA&M.\VBcS$aQlCh<<2[eU-#L+id&o=8+
%i:]j^O\!OiBCteYIZ/6`L=PD^fk,9QOF@<i*9Qi'?B\/fHAIc)Q<:X6OekQ>A:4f";aH18/U92_Z)Ktn$Mr%j*5N*,mPIl%$AmD`
%J@/&8s(-ZfasX"ZOE-V(oAULl+?A9ZZ`SYaE@pZD\3%s=q=]K.JB#n?3mO^S]##,+s/!nf],pt@o:Q$CX2"W1n^"uFmD"&DqL?6T
%mUnb2"hsiRYCH/g5CN;!^]"$ghu30p^\Ri[J,&0^f>%89D1QX)j7QdJIe2AS^]2X;IJ;!uhuE$2rgO0TIGEe^YC?!PJ+qEar%A5K\#]~>
%AI9_PrivateDataEnd
